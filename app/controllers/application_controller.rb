class ApplicationController < ActionController::Base
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
  protect_from_forgery with: :exception
  skip_before_action :verify_authenticity_token
  
  require 'geoip'
  require 'geo_location'
  
  
  before_action :now, :db, :logger
  require 'open-uri'
  require 'csv'
  require 'fileutils'
  # require 'zipruby'

  require 'mailgun'
  require 'securerandom'
  
  
  require 'uri'  
  require 'net/http'  
  
  
  def shenma_api(service,method,json)
      # json = {'header' => { 
                              # 'token' => '954b904a7a3e4721954d1fed3183f098',
                              # 'username' => 'baidu-Guam2161498',
                              # 'password' => 'Dfshk2016' 
                          # },
               # 'body'  => {
                              # 'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                          # }
              # }                                  
              
      url = "https://e.sm.cn/api/#{service}/#{method}"
      
      response = HTTParty.post(url, 
                            :body => json.to_json,
                            :headers => { 'Content-Type' => 'application/json', 'Accept' => 'application/json'} 
                            )
      
      
        
      @response = response                
      return response.parsed_response
  end
 
  def baidu_api(service,method,json)
      # json = {'header' => { 
                              # 'token' => '954b904a7a3e4721954d1fed3183f098',
                              # 'username' => 'baidu-Guam2161498',
                              # 'password' => 'Dfshk2016' 
                          # },
               # 'body'  => {
                              # 'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                          # }
              # }                                  
              
      url = "https://api.baidu.com/json/sms/service/#{service}/#{method}"
      
      response = HTTParty.post(url, 
                            :body => json.to_json,
                            :headers => { 'Content-Type' => 'application/json', 'Accept' => 'application/json'} 
                            )
      
      
        
      @response = response                
      return response.parsed_response
  end
  

  def sogou_api(username,password,token,api_string)            
    @sogou_api = Savon.client(
      wsdl: "http://api.agent.sogou.com:80/sem/sms/v1/"+api_string+"?wsdl",
      pretty_print_xml: true,
      log: true,
      env_namespace: :soap,
      namespaces: {"xmlns:common" => "http://api.sogou.com/sem/common/v1"},
      soap_header: { 
        "common:AuthHeader" => {
          'common:token' => token,
          'common:username' => username,
          'common:password' => password
        }
      }
    )    
  end
  
  def threesixty_api( api_key, access_token, service, method, params = {})
    url = "https://api.e.360.cn/2.0/#{service}/#{method}"
      response = HTTParty.post(url,
            timeout: 300, 
            body: params,
            headers: {
                        'apiKey' => api_key, 
                        'accessToken' => access_token, 
                        'serveToken' => Time.now.to_i.to_s  
                      })
      @response = response                
      return response.parsed_response
  end
  
  def threesixty_api_login(username,password,api_key,api_secret)
    cipher_aes = OpenSSL::Cipher::AES.new(128, :CBC)
    cipher_aes.encrypt
    cipher_aes.key = api_secret[0,16]
    cipher_aes.iv = api_secret[16,16]
    encrypted = (cipher_aes.update(Digest::MD5.hexdigest(password)) + cipher_aes.final).unpack('H*').join
    url = "https://api.e.360.cn/account/clientLogin"
    response = HTTParty.post(url,
        :timeout => 300,
        :body => {
        :username => username,
        :passwd => encrypted[0,64]
        },
        :headers => {'apiKey' => api_key }
    )
    return response.parsed_response
  end
  
   
  def logger
    @logger = Logger.new('/datadrive/'+@today+'logfile.log')
  end
  
  def now
    @now = Time.now.in_time_zone('Beijing').strftime("%Y-%m-%d %H:%M:%S %Z")
    @today = Time.now.in_time_zone('Beijing').strftime("%Y-%m-%d")       
  end
   
   
  def useragent
      @user_agent = request.user_agent
    
      case @user_agent
        when /iPad/i
          @variant = "tablet"
        when /iPhone/i
          @variant = "phone"
        when /Android/i && /mobile/i
          @variant = "phone"
        when /Android/i
          @variant = "tablet"
        when /Windows Phone/i
          @variant = "phone"
        else
          @variant = "desktop"
      end
  end
  
  
  def location
      @ip = request.remote_ip
      @geoip = GeoIP.new("#{Rails.root}/public/GeoLiteCity.dat")
      @location = @geoip.city(@ip)
      
      @country = @location[:country_name]
      @city = @location[:city_name]
  end
  
  
  
  def checklastdayreport
    
    last_day = @today.to_date - 1.to_i.days
    @last_day = last_day.strftime("%Y-%m-%d")

    
    @last_day_report = @db3[:report_keyword_360].find({ "$and" => [{:report_date => @last_day.to_s}] })
    @db3.close()
    
    if @last_day_report.count.to_i == 0
        url = "http://china.adeqo.com:"+@port.to_s+"/threesixties/resetreport"
        # res = Net::HTTP.get_response(URI(url))
        
        link = URI.parse(url)
        http = Net::HTTP.new(link.host, link.port)
        
        http.read_timeout = 60
        http.open_timeout = 60
        res = http.start() {|http|
          http.get(URI(url))
        }
    end
    
    
    @last_day_report = @db3[:sogou_report_account].find({ "$and" => [{:report_date => @last_day.to_s}] })
    @db3.close()
    
    
    if @last_day_report.count.to_i == 0
        url = "http://china.adeqo.com:"+@port.to_s+"/sogous/resetreport"
        # res = Net::HTTP.get_response(URI(url))
        
        link = URI.parse(url)
        http = Net::HTTP.new(link.host, link.port)
        
        http.read_timeout = 60
        http.open_timeout = 60
        res = http.start() {|http|
          http.get(URI(url))
        }
    end
    
    
    @last_day_report = @db3[:shenma_report_account].find({ "$and" => [{:report_date => @last_day.to_s}] })
    @db3.close()
                
    if @last_day_report.count.to_i == 0
        url = "http://china.adeqo.com:"+@port.to_s+"/shenmas/resetreport"
        # res = Net::HTTP.get_response(URI(url))
        
        link = URI.parse(url)
        http = Net::HTTP.new(link.host, link.port)
        
        http.read_timeout = 60
        http.open_timeout = 60
        res = http.start() {|http|
          http.get(URI(url))
        }
    end
    
    
    @last_day_report = @db3[:baidu_report_account].find({ "$and" => [{:report_date => @last_day.to_s}] })
    @db3.close()
    
    if @last_day_report.count.to_i == 0
        url = "http://china.adeqo.com:"+@port.to_s+"/baidu/resetreport"
        # res = Net::HTTP.get_response(URI(url))
        
        link = URI.parse(url)
        http = Net::HTTP.new(link.host, link.port)
        
        http.read_timeout = 60
        http.open_timeout = 60
        res = http.start() {|http|
          http.get(URI(url))
        }
    end
                
    
    data = {:today => @last_day, :last_day_report => @last_day_report.count.to_i, :status => "true"}
    return render :json => data, :status => :ok
  end
  
   
  def checktodayreport
    
    
    @today_not_done_report = @db[:network].find({ "$and" => [{:report => 0}] })
    @db.close()
    
    
    port_array = [81,83,85,89]
    
    
    data_arr = []
    
    if @today_not_done_report.count.to_i > 0
        @today_not_done_report.each do |today_not_done_report_d|
          
            random_port = port_array.shuffle.sample
            
            data_hash = {}
            insert_hash = {}
            
            yesterday = @today.to_date - 1.to_i.days
            
            insert_hash[:network_id] = today_not_done_report_d["id"]
            insert_hash[:network_type] = today_not_done_report_d["type"]
            
            insert_hash[:username] = today_not_done_report_d["username"].to_s
            insert_hash[:password] = today_not_done_report_d["password"].to_s
            insert_hash[:api_token] = today_not_done_report_d["api_token"].to_s
            insert_hash[:api_secret] = today_not_done_report_d["api_secret"].to_s
            
            insert_hash[:status] = 0
            insert_hash[:worker] = random_port.to_i
            insert_hash[:report_date] = yesterday.to_s
            
            data_hash[:insert_one] = insert_hash
            data_arr << data_hash             
            
            if data_arr.count.to_i > 1000
                @db[:miss_report].bulk_write(data_arr)
                @db.close
                
                data_arr = []
            end

        end
    end
    
    if data_arr.count.to_i > 0
        @db[:miss_report].bulk_write(data_arr)
        @db.close
        
        data_arr = []
    end
               
    data = {:message => @today_not_done_report, :today => @today , :status => "true"}
    return render :json => data, :status => :ok
                    
  end
  
  
  
  
  
  def geteventfile
    
      # begin
          @start_time = @now
          
          @logger.info "get event file"
                                  
          @one_hour_ago = Time.now - 1.hours
          name_datetime = @one_hour_ago.in_time_zone('Beijing').strftime("%Y-%m-%d-%H")
          
          
          # domain_name = "http://trackadeqo.chinacloudapp.cn:8000/export_event/"
          domain_name = "http://china.adeqo.com:81/export_event/"
          
          # begin
              name = domain_name + "export_event_" + name_datetime + ".xlsx"
              download_name = "/home/bmg/worker/public/export_event/export_event_"+ name_datetime + ".xlsx"
              
              url = name
              res = Net::HTTP.get_response(URI(url))
              
              if res.code.to_i == 200 
                
                  IO.copy_stream(open(name) , download_name)
              
                  @logger.info "download done"
              
                  tmp_file_path = download_name
                  
                  @logger.info "start loop"              
                  xlsx = Roo::Spreadsheet.open(tmp_file_path, extension: :xlsx)
                  xlsx.each_with_index do |csv, csv_index|
                     
                      begin
                          cookies_hash = {}
                          csv_cookies_array = []
                          
                          @logger.info csv_index.to_s 
                          
                          if csv[11].to_s != "{}"
                              csv_cookies_array = csv[11].to_s.gsub('{', '').gsub('}', '').split(",")
                              
                              csv_cookies_array.each do |csv_cookies_array_d|
                                  temp_arr = csv_cookies_array_d.split("=>")
                                  
                                  if !temp_arr[0].nil?
                                      name = temp_arr[0].gsub('"', '')
                                  end
                                  
                                  if !temp_arr[1].nil?
                                      value = temp_arr[1].gsub('"', '')
                                  else
                                      value = ""
                                  end
                                  
                                  if !temp_arr[0].nil?
                                      cookies_hash[name] = value
                                  end
                                  
                                  cookies_hash[name] = value
                              end
                              
                          end
                          
                             
                          @db2[:events].insert_one({ 
                                              id: csv[0].to_s, 
                                              random_number: csv[1].to_i.to_s,
                                              session_id: csv[2].to_s,
                                              tag_version: csv[3].to_s,
                                              company_id: csv[4].to_i,
                                              referer: csv[5].to_s,
                                              ip: csv[6],
                                              country: csv[7].to_s,
                                              city: csv[8].to_s,
                                              variant: csv[9].to_s,
                                              user_agent: csv[10].to_s,
                                              cookies: cookies_hash,
                                              other_param: JSON.parse(csv[12]),
                                              date: csv[13].to_s,
                                              check_status: csv[14].to_i
                                            })
                          @db2.close()
                           
                      rescue Exception
                          @logger.info csv
                      end
                  end
                  
                  # File.delete(download_name) if File.exist?(download_name)
              end
              
              
          # rescue Exception
              # @logger.info "download file fail"
              # # File.delete(download_name) if File.exist?(download_name)
#               
          # end
          
          
          # get normal event start here
          
          # begin
            
              name = domain_name + "export_n_event_" + name_datetime + ".xlsx"
              download_name = "/home/bmg/worker/public/export_event/export_n_event_"+ name_datetime + ".xlsx"
              
              url = name
              res = Net::HTTP.get_response(URI(url))
              
              @logger.info res.code
              
              if res.code.to_i == 200
                
                  IO.copy_stream(open(name) , download_name)
                  @logger.info "download done"
              
                  tmp_file_path = download_name
                  
                  
                  @logger.info "start loop"              
                  xlsx = Roo::Spreadsheet.open(tmp_file_path, extension: :xlsx)
                  xlsx.each_with_index do |csv, csv_index|
                     
                      begin
                          cookies_hash = {}
                          csv_cookies_array = []
                          
                          @logger.info csv_index.to_s
                          
                          
                            
                          if csv[25].to_s != "{}"
                              csv_cookies_array = csv[25].to_s.gsub('{', '').gsub('}', '').split(",")
                              
                              csv_cookies_array.each do |csv_cookies_array_d|
                                  temp_arr = csv_cookies_array_d.split("=>")
                                  
                                  if !temp_arr[0].nil?
                                      name = temp_arr[0].gsub('"', '')
                                  end
                                  
                                  if !temp_arr[1].nil?
                                      value = temp_arr[1].gsub('"', '')
                                  else
                                      value = ""
                                  end
                                  
                                  if !temp_arr[0].nil?
                                      cookies_hash[name] = value
                                  end
                                  
                                  cookies_hash[name] = value
                              end
                              
                          end
                        
                        
                          @db2[:events].insert_one({ 
                                              type: csv[0].to_s, 
                                              user_id: csv[1].to_s,
                                              cookie_id: csv[2].to_s,
                                              tag_version: csv[3].to_s,
                                              company_id: csv[4].to_i,
                                              host: csv[5].to_s,
                                              referer: csv[6].to_s,
                                              current_page: csv[7].to_s,
                                              ip: csv[8],
                                              country: csv[9].to_s,
                                              city: csv[10].to_s,
                                              variant: csv[11].to_s,
                                              user_agent: csv[12].to_s,
                                              
                                              
                                              category: csv[13].to_s,
                                              action: csv[14].to_s,
                                              label: csv[15].to_s,
                                              value: csv[16].to_s,
                                              
                                              
                                              order_id: csv[17].to_s,
                                              promotecode: csv[18].to_s,
                                              confirmation_category: csv[19].to_s,
                                              price: csv[20].to_f,
                                              revenue: csv[21].to_f,
                                              confirmation_name: csv[22].to_s,
                                              sku: csv[23].to_s,
                                              quantity: csv[24].to_s,
                                              
                                              cookies: cookies_hash,
                                              other_param: JSON.parse(csv[26]),
                                              check_time_status: csv[27].to_i,
                                              check_event_status: csv[28].to_i,
                                              check_page_count_status: csv[29].to_i,
                                              check_url_status: csv[30].to_i,
                                              check_confirmation_status: csv[31].to_i,
                                              
                                              check_status: csv[32].to_i,
                                              date: csv[33].to_s
                                              
                                            })
                          @db2.close()
                          
                            
                            
                           
                          
                           
                      rescue Exception
                          @logger.info csv
                      end
                  end    
                  
                  # File.delete(download_name) if File.exist?(download_name)
                  
                  @logger.info "get event file done"      
              end  
#               
              
              
          # rescue Exception
              # @logger.info "download file fail"
              # # File.delete(download_name) if File.exist?(download_name)
#               
              # # data = {:message => "download file fail", :status => "true"}
              # # return render :json => data, :status => :ok
          # end
          
          
          
          
          
          
          
          
                       
      # rescue Exception
          # @logger.info "get event file empty"
      # end
      
      @end_time = @now
      
           
      data = {:message => "get and insert event", :clean_day => name_datetime, :start_time => @start_time, :end_time => @end_time, :status => "true"}
      return render :json => data, :status => :ok
      
      
  end
  
  
  
  
  
  
  
  def getclickfile
      # begin
      
          @logger.info "get click file"
          
          @one_hour_ago = Time.now - 1.hours
          name_datetime = @one_hour_ago.in_time_zone('Beijing').strftime("%Y-%m-%d-%H")
          
          
          
          # domain_name = "http://trackadeqo.chinacloudapp.cn:8000/export_click/"
          domain_name = "http://china.adeqo.com:81/export_click/"      
          
          # begin
            
              name = domain_name + "export_click_" + name_datetime + ".xlsx"
              download_name = "/home/bmg/worker/public/export_click/export_click_"+ name_datetime + ".xlsx"
            
              url = name
              res = Net::HTTP.get_response(URI(url))
              
              @logger.info res.code
              
              if res.code.to_i == 200
                
                  IO.copy_stream(open(name) , download_name)
                  
                  @logger.info "download file done"
              
                  tmp_file_path = download_name
                                
                  xlsx = Roo::Spreadsheet.open(tmp_file_path, extension: :xlsx)
                  xlsx.each_with_index do |csv, csv_index|
                      
                      begin
                          @logger.info csv_index.to_s
                          cookies_hash = {}
                          csv_cookies_array = []
                          
                          if csv[18].to_s != "{}"
                              csv_cookies_array = csv[18].to_s.gsub('{', '').gsub('}', '').split(",")
                              
                              
                              csv_cookies_array.each do |csv_cookies_array_d|
                                  temp_arr = csv_cookies_array_d.split("=>")
                                  
                                  if !temp_arr[0].nil?
                                      name = temp_arr[0].gsub('"', '')
                                  end
                                  
                                  if !temp_arr[1].nil?
                                      value = temp_arr[1].gsub('"', '')
                                  else
                                      value = ""
                                  end
                                  
                                  if !temp_arr[0].nil?
                                      cookies_hash[name] = value
                                  end
                                  
                                  cookies_hash[name] = value
                              end
                              
                          end
                                    
                                    
                          
                          if csv[5].to_s == "sogou"
                            @type = "sogou"
                          elsif csv[5].to_s.include?("360")
                            @type = "360"
                          elsif csv[5].to_s.include?("baidu")
                            @type = "baidu"
                          elsif csv[5].to_s.include?("shenma")
                            @type = "shenma"
                          end
                          
                          
                          @db2[:clicks].insert_one({
                                        id: csv[0].to_s,
                                        random_number: csv[1].to_s,
                                        session_id: csv[2].to_s,
                                        company_id: csv[3].to_i,
                                        network_id: csv[4].to_i,
                                        network_type: @type.to_s,
                                        campaign_id: csv[6].to_i,
                                        adgroup_id: csv[7].to_i,
                                        keyword_id: csv[8].to_i,
                                        ad_id: csv[9].to_i,
                                        target_id: csv[10].to_s,
                                        search_q: csv[11].to_s,
                                        ip: csv[12],
                                        country: csv[13].to_s,
                                        city: csv[14].to_s,
                                        variant: csv[15].to_s,
                                        user_agent: csv[16].to_s,
                                        device: csv[17].to_s,
                                        cookies: cookies_hash,
                                        date: csv[19].to_s,
                                        referer: csv[20].to_s,
                                        destination_url: csv[21].to_s
                                      })
                            @db2.close()
                            
                            
                            
                        
                      rescue Exception
                          @logger.info csv
                      end
                  end
                  
                  # File.delete(download_name) if File.exist?(download_name)
              end
              
          # rescue Exception
              # @logger.info "download file fail"
              # # File.delete(download_name) if File.exist?(download_name)
          # end     
          
        
        
        
        
        
          # get normal click file start here        
          # begin
            
              name = domain_name + "export_n_click_" + name_datetime + ".xlsx"
              download_name = "/home/bmg/worker/public/export_click/export_click_"+ name_datetime + ".xlsx"
              
              
              url = name
              res = Net::HTTP.get_response(URI(url))
              
              @logger.info res.code
              
              if res.code.to_i == 200
              
                  IO.copy_stream(open(name) , download_name)
                  
                  tmp_file_path = download_name
              
                  xlsx = Roo::Spreadsheet.open(tmp_file_path, extension: :xlsx)
                  xlsx.each_with_index do |csv, csv_index|
                      
                      begin
                          @logger.info csv_index.to_s
                          cookies_hash = {}
                          csv_cookies_array = []
                          
                          if csv[16].to_s != "{}"
                              csv_cookies_array = csv[16].to_s.gsub('{', '').gsub('}', '').split(",")
                              
                              
                              csv_cookies_array.each do |csv_cookies_array_d|
                                  temp_arr = csv_cookies_array_d.split("=>")
                                  
                                  if !temp_arr[0].nil?
                                      name = temp_arr[0].gsub('"', '')
                                  end
                                  
                                  if !temp_arr[1].nil?
                                      value = temp_arr[1].gsub('"', '')
                                  else
                                      value = ""
                                  end
                                  
                                  if !temp_arr[0].nil?
                                      cookies_hash[name] = value
                                  end
                                  
                                  cookies_hash[name] = value
                              end
                              
                          end
                                    
                          
                          if csv[4].to_s == "sogou"
                            @type = "sogou"
                          elsif csv[4].to_s.include?("360")
                            @type = "360"
                          elsif csv[4].to_s.include?("baidu")
                            @type = "baidu"
                          elsif csv[4].to_s.include?("shenma")
                            @type = "shenma"
                          end
                          
                          @db2[:clicks].insert_one({
                            
                                        user_id: csv[0].to_s,
                                        cookie_id: csv[1].to_s,
                                        company_id: csv[2].to_i,
                                        network_id: csv[3].to_i,
                                        network_type: @type.to_s,
                                        campaign_id: csv[5].to_i,
                                        adgroup_id: csv[6].to_i,
                                        keyword_id: csv[7].to_i,
                                        ad_id: csv[8].to_i,
                                        search_q: csv[9].to_s,
                                        ip: csv[10],
                                        country: csv[11].to_s,
                                        city: csv[12].to_s,
                                        variant: csv[13].to_s,
                                        user_agent: csv[14].to_s,
                                        device: csv[15].to_s,
                                        cookies: cookies_hash,
                                        date: csv[17].to_s,
                                        referer: csv[18].to_s,
                                        destination_url: csv[19].to_s,
                                        check_time_status: csv[20].to_i,
                                        check_event_status: csv[21].to_i,
                                        check_page_count_status: csv[22].to_i,
                                        check_url_status: csv[23].to_i,
                                        check_confirmation_status: csv[24].to_i
                                        
                                      })
                            @db2.close()
                            
                        
                      rescue Exception
                          @logger.info csv
                      end
                  end
                  
                  # File.delete(download_name) if File.exist?(download_name)
              end
              
          # rescue Exception
#             
              # # File.delete(download_name) if File.exist?(download_name)
              # @logger.info "download file fail"
          # end     
          @logger.info "download file done"
          
          
          
          
          
          # @all_click_files = Dir.glob('/home/bmg/worker/public/export_click/*')
#           
          # @all_click_files.each do |all_files_p|
              # if all_files_p.to_s.include?(name_datetime)
                  # File.delete(all_files_p) if File.exist?(all_files_p)
              # end
          # end
          
          
          
                              
      # rescue Exception
          # @logger.info "get click file empty"
      # end     
      
      
               
      data = {:message => "get and insert click", :clean_day => name_datetime, :status => "true"}
      return render :json => data, :status => :ok
  end
  
  
  
  
  def exportclickfile
      # begin
      @logger.info "export click file"
      @one_hour_ago = Time.now - 1.hours

      name_datetime = @one_hour_ago.in_time_zone('Beijing').strftime("%Y-%m-%d-%H")
      # @one_hour_ago = @one_hour_ago.in_time_zone('Beijing').strftime("%Y-%m-%d %H:%M:%S %Z")
      @one_hour_ago = @one_hour_ago.in_time_zone('Beijing').strftime("%Y-%m-%d %H")
      @one_hour_ago = @one_hour_ago.to_s + ":00:00 CST"
      
      # total_clicks = @db2["clicks"].find('date' => { '$gte' => @one_hour_ago.to_s })
      total_clicks = @db2["clicks"].find({ "$and" => [{:random_number => { '$ne' => nil }} ] })
      @db2.close
      
      name = "export_click_"+name_datetime.to_s
      del_click_array = []
      
      if total_clicks.count.to_i > 0
          
          click_array = []
          all_click_hash = {}
          
          total_clicks.each do |total_clicks_d|
            
              del_click_array << total_clicks_d["id"]
               
              array = []
                
              # this is for the old one
              array << total_clicks_d["id"]
              array << total_clicks_d["random_number"]
              array << total_clicks_d["session_id"]
              array << total_clicks_d["company_id"]
              array << total_clicks_d["network_id"]
              array << total_clicks_d["network_type"]
              array << total_clicks_d["campaign_id"]
              array << total_clicks_d["adgroup_id"]
              array << total_clicks_d["keyword_id"]
              array << total_clicks_d["ad_id"]
              array << total_clicks_d["target_id"]
              array << total_clicks_d["search_q"]
              array << total_clicks_d["ip"]
              array << total_clicks_d["country"]
              array << total_clicks_d["city"]
              array << total_clicks_d["variant"]
              array << total_clicks_d["user_agent"]
              array << total_clicks_d["device"]
              array << total_clicks_d["cookies"]
              array << total_clicks_d["date"]
              array << total_clicks_d["referer"]
              array << total_clicks_d["destination_url"]
                  
              click_array << array
              
              # this part is for different company
              if all_click_hash[total_clicks_d["company_id"]].nil?
                all_click_hash[total_clicks_d["company_id"]] = []
              end
              
              all_click_hash[total_clicks_d["company_id"]] << array
              
          end
        
          p = Axlsx::Package.new
          wb = p.workbook
            
          wb.add_worksheet(:name => "Basic Worksheet") do |sheet|
               click_array.each_with_index do |csv, csv_index|
                  begin
                  sheet.add_row csv
                  rescue Exception
                  end
               end
          end
          
          create_excel_path = '/home/bmg/worker/public/export_click/'+name+'.xlsx'
          p.serialize(create_excel_path)
          
          
          if all_click_hash.count.to_i > 0
              all_click_hash.each do |key, value|
                
                  p = Axlsx::Package.new
                  wb = p.workbook
                    
                  wb.add_worksheet(:name => "Basic Worksheet") do |sheet|
                       value.each_with_index do |csv, csv_index|
                          begin
                          sheet.add_row csv
                          rescue Exception
                          end
                       end
                  end
                
                  create_excel_path = '/home/bmg/worker/public/export_click/company_id_'+key.to_s+'_'+name+'.xlsx'
                  p.serialize(create_excel_path)
              end
          end
      end
      
      
      # @db2["clicks"].find('id' => { "$in" => del_click_array}).delete_many
      # @db2.close()
      
      
      # normal clicks sstart here
      total_clicks = @db2["clicks"].find({ "$and" => [{:random_number => { '$eq' => nil }} ] })
      @db2.close
      
      name = "export_n_click_"+name_datetime.to_s
      del_click_array = []
      
      
      # data = {:message => total_clicks, :status => "false"}
      # return render :json => data, :status => :ok
      
      
      if total_clicks.count.to_i > 0
          
          click_array = []
          all_click_hash = {}
          
          total_clicks.each do |total_clicks_d|
            
              del_click_array << total_clicks_d["_id"]
               
              array = []
              array << total_clicks_d["user_id"]
              array << total_clicks_d["cookie_id"]
              array << total_clicks_d["company_id"]
              array << total_clicks_d["network_id"]
              array << total_clicks_d["network_type"]
              array << total_clicks_d["campaign_id"]
              array << total_clicks_d["adgroup_id"]
              array << total_clicks_d["keyword_id"]
              array << total_clicks_d["ad_id"]
              array << total_clicks_d["search_q"]
              array << total_clicks_d["ip"]
              array << total_clicks_d["country"]
              array << total_clicks_d["city"]
              array << total_clicks_d["variant"]
              array << total_clicks_d["user_agent"]
              array << total_clicks_d["device"]
              array << total_clicks_d["cookies"]
              array << total_clicks_d["date"]
              array << total_clicks_d["referer"]
              array << total_clicks_d["destination_url"]
              array << total_clicks_d["check_time_status"]
              array << total_clicks_d["check_event_status"]
              array << total_clicks_d["check_page_count_status"]
              array << total_clicks_d["check_url_status"]
              array << total_clicks_d["check_confirmation_status"]
              
              
              click_array << array
              
              # this part is for different company
              if all_click_hash[total_clicks_d["company_id"]].nil?
                all_click_hash[total_clicks_d["company_id"]] = []
              end
              
              all_click_hash[total_clicks_d["company_id"]] << array
              
          end
        
          p = Axlsx::Package.new
          wb = p.workbook
            
          wb.add_worksheet(:name => "Basic Worksheet") do |sheet|
               click_array.each_with_index do |csv, csv_index|
                  begin
                  sheet.add_row csv
                  rescue Exception
                  end
               end
          end
          
          create_excel_path = '/home/bmg/worker/public/export_click/'+name+'.xlsx'
          p.serialize(create_excel_path)
          
          
          if all_click_hash.count.to_i > 0
              all_click_hash.each do |key, value|
                
                  p = Axlsx::Package.new
                  wb = p.workbook
                    
                  wb.add_worksheet(:name => "Basic Worksheet") do |sheet|
                       value.each_with_index do |csv, csv_index|
                          begin
                          sheet.add_row csv
                          rescue Exception
                          end
                       end
                  end
                
                  create_excel_path = '/home/bmg/worker/public/export_click/n_company_id_'+key.to_s+'_'+name+'.xlsx'
                  p.serialize(create_excel_path)
              end
          end
      end
      
      
      # @db2["clicks"].find('_id' => { "$in" => del_click_array}).delete_many
      # @db2.close()
      
      
      
      # rescue Exception
      # end
      
      @logger.info "export click file done"
      data = {:export_click => total_clicks.count.to_i, :export_click_time => @one_hour_ago, :total_del_clicks => del_click_array.count.to_i, :status => "true"}
      return render :json => data, :status => :ok
  end
  
  
  
  
  
  
  def exporteventfile
      # begin
      @logger.info "export event file"
      @one_hour_ago = Time.now - 1.hours

      name_datetime = @one_hour_ago.in_time_zone('Beijing').strftime("%Y-%m-%d-%H")
      # @one_hour_ago = @one_hour_ago.in_time_zone('Beijing').strftime("%Y-%m-%d %H:%M:%S %Z")
      @one_hour_ago = @one_hour_ago.in_time_zone('Beijing').strftime("%Y-%m-%d %H")
      @one_hour_ago = @one_hour_ago.to_s + ":00:00 CST"
      
      # total_events = @db2["events"].find('date' => { '$gte' => @one_hour_ago.to_s })
      total_events = @db2["events"].find({ "$and" => [{:random_number => { '$ne' => nil }} ] })
      @db2.close
      
      name = "export_event_"+name_datetime.to_s
      del_event_array = []
      
      if total_events.no_cursor_timeout.count.to_i > 0
        
          event_array = []
          all_event_hash = {}
          
          total_events.each do |total_events_d|
            
              del_event_array << total_events_d["id"]
              
              array = []
              
              array << total_events_d["id"]
              array << total_events_d["random_number"]
              array << total_events_d["session_id"]
              array << total_events_d["tag_version"]
              array << total_events_d["company_id"]
              array << total_events_d["referer"]
              array << total_events_d["ip"]
              array << total_events_d["country"]
              array << total_events_d["city"]
              array << total_events_d["variant"]
              array << total_events_d["user_agent"]
              array << total_events_d["cookies"]
              array << total_events_d["other_param"]
              array << total_events_d["date"]
              array << total_events_d["check_status"]
              
              event_array << array
              
              
              # this part is for different company
              if all_event_hash[total_events_d["company_id"]].nil?
                all_event_hash[total_events_d["company_id"]] = []
              end
              
              all_event_hash[total_events_d["company_id"]] << array
              
          end
      
          p = Axlsx::Package.new
          wb = p.workbook
            
          wb.add_worksheet(:name => "Basic Worksheet") do |sheet|
               event_array.each_with_index do |csv, csv_index|
                  sheet.add_row csv
               end
          end
           
          create_excel_path = '/home/bmg/worker/public/export_event/'+name+'.xlsx'
          p.serialize(create_excel_path)
          
          
          if all_event_hash.count.to_i > 0
              all_event_hash.each do |key, value|
                
                  p = Axlsx::Package.new
                  wb = p.workbook
                    
                  wb.add_worksheet(:name => "Basic Worksheet") do |sheet|
                       value.each_with_index do |csv, csv_index|
                          sheet.add_row csv
                       end
                  end
                
                  create_excel_path = '/home/bmg/worker/public/export_event/company_id_'+key.to_s+'_'+name+'.xlsx'
                  p.serialize(create_excel_path)
              end
          end
          
      end
       
      # @db2["events"].find('id' => { "$in" => del_event_array}).delete_many
      # @db2.close()

      
      # normmal event table start
      total_events = @db2["events"].find({ "$and" => [{:random_number => { '$eq' => nil }} ] })
      @db2.close
      
      name = "export_n_event_"+name_datetime.to_s
      del_event_array = []
      
      if total_events.no_cursor_timeout.count.to_i > 0
        
          event_array = []
          all_event_hash = {}
          
          total_events.each do |total_events_d|
            
              del_event_array << total_events_d["_id"]
              
              array = []
                
              array << total_events_d["type"]
              array << total_events_d["user_id"]
              array << total_events_d["cookie_id"]
              
              array << total_events_d["tag_version"]
              array << total_events_d["company_id"]
              array << total_events_d["host"]
              array << total_events_d["referer"]
              array << total_events_d["current_page"]
              
              array << total_events_d["ip"]
              array << total_events_d["country"]
              array << total_events_d["city"]
              array << total_events_d["variant"]
              array << total_events_d["user_agent"]
              
              array << total_events_d["category"]
              array << total_events_d["action"]
              array << total_events_d["label"]
              array << total_events_d["value"]
              
              array << total_events_d["order_id"]
              array << total_events_d["promotecode"]
              array << total_events_d["confirmation_category"]
              array << total_events_d["price"]
              array << total_events_d["revenue"]
              array << total_events_d["confirmation_name"]
              array << total_events_d["sku"]
              array << total_events_d["quantity"]
              
              array << total_events_d["cookies"]
              array << total_events_d["other_param"]
              array << total_events_d["check_time_status"]
              array << total_events_d["check_event_status"]
              array << total_events_d["check_page_count_status"]
              array << total_events_d["check_url_status"]
              array << total_events_d["check_confirmation_status"]
              array << total_events_d["check_status"]
              array << total_events_d["date"]
              
              event_array << array
              
              # this part is for different company
              if all_event_hash[total_events_d["company_id"]].nil?
                all_event_hash[total_events_d["company_id"]] = []
              end
              
              all_event_hash[total_events_d["company_id"]] << array
              
          end
      
          p = Axlsx::Package.new
          wb = p.workbook
            
          wb.add_worksheet(:name => "Basic Worksheet") do |sheet|
               event_array.each_with_index do |csv, csv_index|
                  sheet.add_row csv
               end
          end
           
          create_excel_path = '/home/bmg/worker/public/export_event/'+name+'.xlsx'
          p.serialize(create_excel_path)
          
          
          if all_event_hash.count.to_i > 0
              all_event_hash.each do |key, value|
                
                  p = Axlsx::Package.new
                  wb = p.workbook
                    
                  wb.add_worksheet(:name => "Basic Worksheet") do |sheet|
                       value.each_with_index do |csv, csv_index|
                          sheet.add_row csv
                       end
                  end
                
                  create_excel_path = '/home/bmg/worker/public/export_event/n_company_id_'+key.to_s+'_'+name+'.xlsx'
                  p.serialize(create_excel_path)
              end
          end
          
      end
       
      # @db2["events"].find('_id' => { "$in" => del_event_array}).delete_many
      # @db2.close()
      
      
      # rescue Exception
      # end
      
      @logger.info "export event file done"
      data = {:export_event => total_events.count.to_i, :export_event_time => @one_hour_ago, :del_event_array => del_event_array.count.to_i, :status => "true"}
      return render :json => data, :status => :ok
      
  end
  
  
  
  
  
  
   
   
  def click
     
    useragent()
    location()
    
    
    @cookie_id = SecureRandom.uuid + "-" + rand(1000000).to_s + "-" + SecureRandom.uuid
    
    current_cookie = request.cookies
    
    total_minutes = 1
    
    @company_id = params[:company_id]
    @network_id = params[:network_id]
    @campaign_id = params[:campaign_id]
    @adgroup_id = params[:adgroup_id]
    @ad_id = params[:ad_id]
    @keyword_id = params[:keyword_id]
    @durl = params[:durl]
    @search_q = ""
    
    # @target_id = params[:target_id]
    
    @cookie = params[:cookie]
    @device = params[:device]
    
    if @device.to_s == ""
        @device = "pc"
    end
    
    @test = params[:test]
    
    if !@test.nil? || @network_id.to_i == 0
      data = {:@durl => @durl}
      return render :json => data, :status => :ok
    end
    
    if current_cookie["user_id"].nil? || current_cookie["user_id"].to_s == ""
      
        @user_id = SecureRandom.uuid + "_" + rand(1000000).to_s + "_" + @ip.to_s.gsub('.','_')
        
        cookies[:user_id] = {
           :value => @user_id,
           :domain => 'adeqo.com'
        }
        
    else
        @user_id = current_cookie["user_id"].to_s
    end
    
    
    if @cookie.nil? || @cookie.to_i == 0 
        expire_day = 30
    else
        expire_day = @cookie.to_i
    end
    
    cookies[:cookie_id] = {
                             :value => @cookie_id,
                             :expires => expire_day.days.from_now,
                             :domain => 'adeqo.com'
                          }
    
    
    
    # |||||||||||||||||||||||||||||||||||||||||||||||||||||||| old one
    # if @company_id.to_i == 1
        # @id = SecureRandom.uuid
        # @random_number = rand(1000000)
        # @session_id = SecureRandom.uuid
#         
#         
        # cookies[:clicks_id] = {
           # :value => @id,
           # :expires => expire_day.days.from_now,
           # :domain => 'adeqo.com'
        # }
        # cookies[:clicks_random_id] = {
           # :value => @random_number,
           # :expires => expire_day.days.from_now,
           # :domain => 'adeqo.com'
        # }
        # cookies[:clicks_session_id] = {
           # :value => @session_id,
           # :expires => expire_day.days.from_now,
           # :domain => 'adeqo.com'
        # }
    # end
    # |||||||||||||||||||||||||||||||||||||||||||||||||||||||| old one 
    
    
    
    # cookies.delete :clicks_id, :domain => 'adeqo.com'
    # cookies.delete :clicks_random_id, :domain => 'adeqo.com'
    # cookies.delete :clicks_session_id, :domain => 'adeqo.com'
    
    
    @network_type = ""
    
    if request.referer.to_s.include?("bing")
        @search_q = params[:q].to_s + "," + params[:pq].to_s
        
        @network_type = "bing"
    end
    
    
    if request.referer.to_s.include?("google")
        @search_q = params[:q].to_s + "," + params[:as_q].to_s + "," + params[:oq].to_s
        
        @network_type = "google"
    end
    
    if request.referer.to_s.include?("360") || request.referer.to_s.include?("haosou.com") || request.referer.to_s.include?("so.com")
         
        @referr_array = request.referer.split("?")
        @referr_param_array = @referr_array[1]
        
        if !@referr_param_array.nil?
            @referr_param_array = @referr_param_array.split("&")
            @search_q_array = []
            
            # @search_q_array << params[:q].to_s
            # @search_q_array << params[:pq].to_s
            
            @referr_param_array.each do |ref|
                @referr_keyword_array = ref.split("=")
                if ref.to_s.include?("keyword") || @referr_keyword_array[0].to_s == "p" || ref.to_s.include?("query") || @referr_keyword_array[0].to_s == "q"  
                    
                    @search_q_array << URI.unescape(@referr_keyword_array[1].to_s)
                    # @search_q = @search_q.to_s + "," + URI.unescape(@referr_keyword_array[1].to_s)
                end          
            end
            
            @search_q = @search_q_array.join(",") 
        else
            @search_q = ""
        end 
        @network_type = "360"
    end
    
    if request.referer.to_s.include?("baidu")
        @network_type = "baidu"
    end
    
    if request.referer.to_s.include?("shenma")
        @network_type = "shenma"
    end
    
    
    if request.referer.to_s.include?("sogou")
        
        @referr_array = request.referer.split("?")
        @referr_param_array = @referr_array[1]
        
        if !@referr_param_array.nil?
          @referr_param_array = @referr_param_array.split("&") 
          @search_q_array = []
          
          @referr_param_array.each do |ref|
              @referr_keyword_array = ref.split("=")
              if ref.to_s.include?("keyword") || @referr_keyword_array[0].to_s == "p" || ref.to_s.include?("query")
                  @search_q_array << URI.unescape(@referr_keyword_array[1].to_s)
                  # @search_q = @search_q.to_s + "," + URI.unescape(@referr_keyword_array[1].to_s)
              end          
          end
          
          @search_q = @search_q_array.join(",")
        else
          @search_q = ""
        end
                
        @network_type = "sogou"
    end
    
    
    begin
      
       # if @company_id.to_i == 1
#           
          # @db2[:clicks].insert_one({ 
                              # id: @id.to_s, 
                              # random_number: @random_number.to_s,
                              # session_id: @session_id.to_s,
                              # company_id: @company_id.to_i,
                              # network_id: @network_id.to_i,
                              # network_type: @network_type.to_s,
                              # campaign_id: @campaign_id.to_i,
                              # adgroup_id: @adgroup_id.to_i,
                              # keyword_id: @keyword_id.to_i,
                              # ad_id: @ad_id.to_i,
                              # target_id: @target_id.to_s,
                              # search_q: @search_q.to_s,
                              # ip: @ip,
                              # country: @country,
                              # city: @city,
                              # variant: @variant,
                              # user_agent: @user_agent,
                              # device: @device,
                              # cookies: request.cookies,
                              # date: @now,
                              # referer: request.referer,
                              # destination_url: @durl
                            # })
          # @db2.close
#         
       # else
       
           @db2[:clicks].insert_one({ 
             
                                  user_id: @user_id.to_s,
                                  cookie_id: @cookie_id.to_s,
                                  company_id: @company_id.to_i,
                                  network_id: @network_id.to_i,
                                  network_type: @network_type.to_s,
                                  campaign_id: @campaign_id.to_i,
                                  adgroup_id: @adgroup_id.to_i,
                                  keyword_id: @keyword_id.to_i,
                                  ad_id: @ad_id.to_i,
                                  search_q: @search_q.to_s,
                                  ip: @ip,
                                  country: @country,
                                  city: @city,
                                  variant: @variant,
                                  user_agent: @user_agent,
                                  device: @device,
                                  cookies: request.cookies,
                                  date: @now,
                                  referer: request.referer,
                                  destination_url: @durl,
                                  check_time_status: 0,
                                  check_event_status: 0,
                                  check_page_count_status: 0,
                                  check_url_status: 0,
                                  check_confirmation_status: 0
                                })
            @db2.close 
        # end
        
    rescue Exception
        logger.debug "DB is somehow not working, can't insert clicks, add email function in application controller later."
    end
    
    
    
    
    
    
    begin
        return redirect_to @durl
    rescue Exception
        return redirect_to "http://china.adeqo.com"
    end
    # data = {:uid => @id,:random_number => @random_number,:session_id => @session_id, :company_id => @company_id,:network_id => @network_id,:campaign_id => @campaign_id,:adgroup_id => @adgroup_id, :ad_id => @ad_id, :keyword_id => @keyword_id, :durl => @durl, :status => "true"}
    # return render :json => data, :status => :ok

  end 
   
   
   
  def event
    
        useragent()
        location()
        
        
        @tag_version = "3"
        @company_id = params[:companyid]
        @current_page = params[:current_page]
        @host = params[:host]
        @referrer = params[:referrer]
        
        # @host = request.host
        # @referrer = request.referer
        # @current_page = request.original_url
        
        
        
        
        
            
        @event_category = params[:event_category]
        @event_action = params[:event_action]
        @event_label = params[:event_label]
        @event_value = params[:event_value]

        
        
        @event_type = params[:event_type]
        @order_id = params[:order_id]
        @promotecode = params[:promotecode]
        @confirmation_category = params[:category]
        @price = params[:price]
        @revenue = params[:revenue]
        @confirmation_name = params[:name]
        @sku = params[:sku]
        @quantity = params[:quantity]
        
        @leave = params[:leave]
        
        
        @user_id = params[:user_id]
        @cookie_id = params[:cookie_id]
        
        
        logger.debug @cookie_id.to_s
        
        params_except_array = ["action","category","companyid","controller","event_type","name","order_id","price","promotecode","revenue","sku","quantity","current_page","host","referrer","leave"]
        params_array = []
        
        
        
        if params[:companyid].nil?
            @company_id = params[:cid]
        end
        
        
        
        if @user_id.nil? || @user_id.to_s == ""
            current_cookie = request.cookies
            
            if current_cookie["user_id"].nil? || current_cookie["user_id"].to_s == ""
          
                @user_id = SecureRandom.uuid + "_" + rand(1000000).to_s + "_" + @ip.to_s.gsub('.','_')
                
                cookies[:user_id] = {
                   :value => @user_id,
                   :domain => 'adeqo.com'
                }
                
            else
                @user_id = current_cookie["user_id"].to_s
            end
        end  
          
          
        if @cookie_id.nil? || @cookie_id.to_s == ""  
            @cookie_id = cookies[:cookie_id].to_s  
        end
        
        logger.debug @cookie_id.to_s
        
        
        # if @company_id.to_i == 1
            
            # begin
         
                # params.each do |key,value|
                    # if key.include?("param")
                        # params_array << key+":"+value
                    # end
                # end
#                 
                # if !cookies[:clicks_id].nil? && cookies[:clicks_id].to_s != ""
# #                   
                    # @db2[:events].insert_one({ 
                                            # id: cookies[:clicks_id], 
                                            # random_number: cookies[:clicks_random_id],
                                            # session_id: cookies[:clicks_session_id],
                                            # tag_version: @tag_version,
                                            # company_id: @company_id.to_i,
                                            # referer: request.referer,
                                            # ip: @ip,
                                            # country: @country,
                                            # city: @city,
                                            # variant: @variant,
                                            # user_agent: @user_agent,
                                            # cookies: request.cookies,
                                            # other_param: params_array,        
                                            # check_status: 0,                        
                                            # date: @now
                                          # })       
                    # @db2.close                      
                # end
            
            # rescue Exception
                # logger.debug "event: db is too busy"
            # end
#             
            # data = {:message => cookies, :status => "true"}
            # return render :json => data, :status => :ok
        # else
            
            
            params.each do |key,value|
                if !params_except_array.include?(key)
                    params_array << key+":"+value
                end
            end
        
            # @current_page = params[:current_page]
            # @host = params[:host]
            # @referrer = params[:referrer]
            
            begin
                # this part is for track goal:event
                if !params[:event_category].nil? && params[:event_category].to_s != "" && !params[:event_action].nil? && params[:event_action].to_s != ""
                  
                    @db2[:events].insert_one({ 
                                            
                                            type:"event_goal",
                                            user_id:@user_id.to_s,
                                            cookie_id: @cookie_id.to_s,
                                            
                                            tag_version: @tag_version,
                                            company_id: @company_id.to_i,
                                            host: @host.to_s,
                                            referer: @referrer.to_s,
                                            current_page: @current_page.to_s,
                                            ip: @ip,
                                            country: @country,
                                            city: @city,
                                            variant: @variant,
                                            user_agent: @user_agent,
                                            
                                            category: @event_category.to_s,
                                            action: @event_action.to_s,
                                            label: @event_label.to_s,
                                            value: @event_value.to_s,
                                            
                                            cookies: request.cookies,
                                            other_param: params_array,
                                            check_time_status: 1,
                                            check_event_status: 0,
                                            check_page_count_status: 1,
                                            check_url_status: 1,     
                                            check_confirmation_status: 1,      
                                            check_status: 1,                              
                                            date: @now
                                          })       
                    @db2.close
                
                elsif !params[:event_type].nil? && params[:event_type].to_s == "confirmation"
                  
        
                    @db2[:events].insert_one({ 
                                            
                                            type:"confirmation",
                                            user_id:@user_id.to_s,
                                            cookie_id: @cookie_id.to_s,
                                            
                                            tag_version: @tag_version,
                                            company_id: @company_id.to_i,
                                            host: @host.to_s,
                                            referer: @referrer.to_s,
                                            current_page: @current_page.to_s,
                                            ip: @ip,
                                            country: @country,
                                            city: @city,
                                            variant: @variant,
                                            user_agent: @user_agent,
                                            
                                            order_id: @order_id.to_s,
                                            promotecode: @promotecode.to_s,
                                            confirmation_category: @confirmation_category.to_s,
                                            price: @price.to_f,
                                            revenue: @revenue.to_f,
                                            confirmation_name: @confirmation_name.to_s,
                                            sku: @sku.to_s,
                                            quantity: @quantity.to_s,
                                            
                                            
                                            cookies: request.cookies,
                                            other_param: params_array,
                                            check_time_status: 1,
                                            check_event_status: 1,
                                            check_page_count_status: 1,
                                            check_url_status: 1,
                                            check_confirmation_status: 0,  
                                            check_status: 1,                              
                                            date: @now
                                          })       
                    @db2.close
                    # data = {:order_id => @order_id, :price => @price, :revenue => @revenue, :name => @name, :sku => @sku, :category => @category, :status => "true"}
                    # return render :json => data, :status => :ok
                    
                elsif @company_id.to_i > 0
                    
                    if @leave.nil?
                      
                        @db2[:events].insert_one({ 
                                                
                                                type:"other_goal",
                                                user_id:@user_id.to_s,
                                                cookie_id: @cookie_id.to_s,
                                                
                                                tag_version: @tag_version,
                                                company_id: @company_id.to_i,
                                                host: @host.to_s,
                                                referer: @referrer.to_s,
                                                current_page: @current_page.to_s,
                                                ip: @ip,
                                                country: @country,
                                                city: @city,
                                                variant: @variant,
                                                user_agent: @user_agent,
                                                cookies: request.cookies,
                                                other_param: params_array,
                                                check_time_status: 0,
                                                check_event_status: 1,
                                                check_page_count_status: 0,
                                                check_url_status: 0,
                                                check_confirmation_status: 1,   
                                                check_status: 1,                     
                                                leave: "",        
                                                date: @now
                                              })       
                        @db2.close
                        
                    else
                        
                        @db2[:events].insert_one({ 
                                                
                                                type:"other_goal",
                                                user_id:@user_id.to_s,
                                                cookie_id:@cookie_id.to_s,
                                                
                                                tag_version: @tag_version,
                                                company_id: @company_id.to_i,
                                                host: @host.to_s,
                                                referer: @referrer.to_s,
                                                current_page: @current_page.to_s,
                                                ip: @ip,
                                                country: @country,
                                                city: @city,
                                                variant: @variant,
                                                user_agent: @user_agent,
                                                cookies: request.cookies,
                                                other_param: params_array,
                                                check_time_status: 0,
                                                check_event_status: 1,
                                                check_page_count_status: 1,
                                                check_url_status: 1,
                                                check_confirmation_status: 1,   
                                                check_status: 1,                     
                                                leave: @leave.to_s,        
                                                date: @now
                                              })       
                        @db2.close
                        
                    end
                end     
                                     
            rescue Exception
                logger.debug "event: db is too busy"
            end
            
            
        # end
        
         
        
         
        
        # data = {:click_id => cookies[:clicks_id], :cookies => request.cookies, :status => "true"}
        # return render :json => data, :status => :ok
        
        
        return render :nothing => true, :status => 200, :content_type => 'text/javascript'
  end 
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  def ctriprevenuereport
  
      start_date = 3.days.ago
      start_date = start_date.in_time_zone('Beijing').strftime("%Y-%m-%d ")+"23:59:59"
      
      end_date = 2.days.ago
      db_date_name = end_date.in_time_zone('Beijing').strftime("%Y-%m-%d")
      end_date = end_date.in_time_zone('Beijing').strftime("%Y-%m-%d ")+"23:59:59"
    
    
      # conversion = @db2[:conversion].find({ "$and" => [{:date => { '$gte' => start_date }}, {:date => { '$lte' => end_date }}, {:order_id => { '$ne' => "" }} ] })
      # @db2.close()
      
      
      conversion = @db2[:conversion].find.aggregate([ 
                                 { '$match' => { "$and" => [{:date => { '$gte' => start_date }}, {:date => { '$lte' => end_date }}, {:order_id => { '$ne' => "" }} ] } },
                                 { '$group' => { '_id' => { 'id' => "$id", 'order_id' => "$order_id", 'revenue' => "$revenue", 'network_id' => "$network_id", 'keyword_id' => "$keyword_id", 'date' => "$date" } } }
                            ])
      @db2.close()
      
      
                  
      if conversion.count.to_i > 0
  
          network_id_arr = []
          network_name_hash = {}
          network_keyword_id_hash = {}
          keyword_name_hash = {}
          
          conversion.each do |conversion_d|
              conversion_d = conversion_d["_id"]
              
              network_id_arr << conversion_d["network_id"]
              
              if network_keyword_id_hash["network"+conversion_d["network_id"].to_s].nil?
                  network_keyword_id_hash["network"+conversion_d["network_id"].to_s] = []
              end
              
              network_keyword_id_hash["network"+conversion_d["network_id"].to_s] << conversion_d["keyword_id"].to_i
          end
          
      
          network_id_arr = network_id_arr.uniq
          
          @network = @db[:network].find('id' => { "$in" => network_id_arr})
          @db.close
          
          if @network.count.to_i > 0
              @network.no_cursor_timeout.each do |network_d|
                  network_name_hash["id"+network_d["id"].to_s] = network_d["name"]
                  
                  keyword_db_name = "keyword_"+ network_d["type"].to_s + "_" + network_d["id"].to_s
                  
                  all_keyword = []
                  if network_d["type"].to_s == "sogou"
                    all_keyword = @sogou_db[keyword_db_name].find('keyword_id' => { "$in" => network_keyword_id_hash["network"+network_d["id"].to_s]})
                    @sogou_db.close()
                  elsif network_d["type"].to_s == "360"
                    all_keyword = @threesixty_db[keyword_db_name].find('keyword_id' => { "$in" => network_keyword_id_hash["network"+network_d["id"].to_s]})
                    @threesixty_db.close()
                  elsif network_d["type"].to_s == "baidu"
                    all_keyword = @baidu_db[keyword_db_name].find('keyword_id' => { "$in" => network_keyword_id_hash["network"+network_d["id"].to_s]})
                    @baidu_db.close()
                  elsif network_d["type"].to_s == "shenma"
                    all_keyword = @baidu_db[keyword_db_name].find('keyword_id' => { "$in" => network_keyword_id_hash["network"+network_d["id"].to_s]})
                    @baidu_db.close()
                  end
                  
                  if all_keyword.count.to_i > 0
                      all_keyword.no_cursor_timeout.each do |all_keyword_d|
                        
                          keyword_name_hash["keywordid"+all_keyword_d["keyword_id"].to_s] = all_keyword_d["keyword"]
                          
                      end
                  end
                  
              end
          end
          
          
          name = "ctrip_revenue_report_" + db_date_name.to_s
          p = Axlsx::Package.new
          wb = p.workbook
          
          @csv_head = ["\xEF\xBB\xBFConversion ID","\xEF\xBB\xBFOrder ID", "\xEF\xBB\xBF﻿Revenue", "\xEF\xBB\xBFAccount", "\xEF\xBB\xBFKeyword"]
          csv_array = []
          
          
          conversion.each do |conversion_d|
          
              conversion_d = conversion_d["_id"]
              
              temp_arr = []
              temp_arr << conversion_d["id"]
              temp_arr << conversion_d["order_id"]
              temp_arr << conversion_d["revenue"]
              temp_arr << network_name_hash["id"+conversion_d["network_id"].to_s]
              
              if !keyword_name_hash["keywordid"+conversion_d["keyword_id"].to_s].nil?
                  temp_arr << keyword_name_hash["keywordid"+conversion_d["keyword_id"].to_s]
              else
                  temp_arr << conversion_d["keyword_id"].to_s
              end
              
              temp_arr << conversion_d["date"]
              csv_array << temp_arr
              
          end
          
          
          wb.add_worksheet(:name => "Basic Worksheet") do |sheet|
              
              sheet.add_row @csv_head
              
              csv_array.each_with_index do |csv, csv_index|
                  sheet.add_row csv
              end
          end
          
          # @logger.info "done create excel"
          
          create_excel_path = '/home/bmg/worker/public/ctrip_revenue_report/'+name+'.xlsx'
          dl_excel_path = 'http://china.adeqo.com:'+@port.to_s+'/ctrip_revenue_report/'+name+'.xlsx'
          
          p.serialize(create_excel_path)
          
          
          mg_client = Mailgun::Client.new("key-c72a65e7d3d818852d40757182bd82c9")  
          mb_obj = Mailgun::MessageBuilder.new()
       
          mb_obj.set_from_address("do-not-reply@adeqo.com", {"first"=>"Adeqo", "last" => ""});
          
          mb_obj.add_recipient(:to, "jkwan@bmgww.com", {"first" => "", "last" => ""});
          # mb_obj.add_recipient(:cc, "mchen@bmgww.com", {"first" => "", "last" => ""});
          # mb_obj.add_recipient(:cc, "aji@bmgww.com", {"first" => "", "last" => ""});
          # mb_obj.add_recipient(:cc, "xfung@bmgww.com", {"first" => "", "last" => ""});
          # mb_obj.add_recipient(:cc, "vmenon@bmgww.com", {"first" => "", "last" => ""});
           
          mb_obj.set_subject("Adeqo | Daily revenue report | "+db_date_name.to_s);  
          # mb_obj.set_text_body(result_msg);
          
          result_msg = "<p>Please click <a href='"+dl_excel_path+"'>HERE</a> to download your report.</p>"
          result_msg = result_msg + "<br /><p>Team BMG</p>" 
          mb_obj.set_html_body(result_msg);
          mg_client.send_message("china.adeqo.com", mb_obj)
          
      end
      
      
      @logger.info "ctrip_revenue_report_ done"
      data = {:message => dl_excel_path, :status => "false"}
      return render :json => data, :status => :ok
    
  end
  
  def watchdogreport
      
      @id = params[:id]
      
      if @id.nil?
          # @network = @db["network"].find({ "$and" => [{:watchdog => { '$ne' => 0 }}, {:watchdog => { '$ne' => 1 }} ] })
          @network = @db["network"].find({:watchdog => 4, :watchdog_worker => @port.to_i  })
          @db.close
          
          if @network.count.to_i >= 1
              @logger.info "watchdog report running"
              return render :nothing => true
          end
          
          @network = @db["network"].find({:watchdog => 3, :watchdog_worker => @port.to_i }).limit(1)
          @db.close
          
          if @network.count.to_i == 0
            
              @network = @db["network"].find({:watchdog => 3 }).limit(1)
              @db.close
              
              if @network.count.to_i == 0  
                  @logger.info "no watchdog report pending"
                  return render :nothing => true
              end
          end
          
      else
          @network = @db["network"].find('id' => @id.to_i)
          @db.close
      end
      
      @all_campaign_hash = {}
      @all_adgroup_hash = {}
      
      if @network.count.to_i >= 0
          @network.each do |network_d|
            
              @db["network"].find('id' => network_d["id"].to_i).update_one('$set'=> { 'watchdog' => 4, 'watchdog_worker' => @port.to_i, 'last_update' => @now})
              @db.close
          
            
              adgroup_db_name = "adgroup_"+network_d["type"].to_s+"_"+network_d["id"].to_s
              ab_db_name = "ad_"+network_d["type"].to_s+"_"+network_d["id"].to_s
              keyword_db_name = "keyword_"+network_d["type"].to_s+"_"+network_d["id"].to_s
              
              
              
              
              if network_d["type"].to_s == "sogou"
                
                @all_adgroup = @sogou_db[adgroup_db_name].find()
                @sogou_db.close()
                
                @ad_url = @sogou_db[ab_db_name].find({ "$or" => [{:response_code => { '$ne' => "" }}, {:m_response_code => { '$ne' => "" }} ] })
                @sogou_db.close()
                
                @keyword_url = @sogou_db[keyword_db_name].find({ "$or" => [{:response_code => { '$ne' => "" }}, {:m_response_code => { '$ne' => "" }} ] })
                @sogou_db.close()
                
              elsif network_d["type"].to_s == "360"
                
                @all_adgroup = @threesixty_db[adgroup_db_name].find()
                @threesixty_db.close()
                
                @ad_url = @threesixty_db[ab_db_name].find({ "$or" => [{:response_code => { '$ne' => "" }}, {:m_response_code => { '$ne' => "" }} ] })
                @threesixty_db.close()
                
                @keyword_url = @threesixty_db[keyword_db_name].find({ "$or" => [{:response_code => { '$ne' => "" }}, {:m_response_code => { '$ne' => "" }} ] })
                @threesixty_db.close()
                
              elsif network_d["type"].to_s == "baidu"
                
                @all_adgroup = @baidu_db[adgroup_db_name].find()
                @baidu_db.close()
                
                @ad_url = @baidu_db[ab_db_name].find({ "$or" => [{:response_code => { '$ne' => "" }}, {:m_response_code => { '$ne' => "" }} ] })
                @baidu_db.close()
                
                @keyword_url = @baidu_db[keyword_db_name].find({ "$or" => [{:response_code => { '$ne' => "" }}, {:m_response_code => { '$ne' => "" }} ] })
                @baidu_db.close()
                
              elsif network_d["type"].to_s == "shenma"
                
                @all_adgroup = @baidu_db[adgroup_db_name].find()
                @baidu_db.close()
                
                @ad_url = @baidu_db[ab_db_name].find({ "$or" => [{:response_code => { '$ne' => "" }}, {:m_response_code => { '$ne' => "" }} ] })
                @baidu_db.close()
                
                @keyword_url = @baidu_db[keyword_db_name].find({ "$or" => [{:response_code => { '$ne' => "" }}, {:m_response_code => { '$ne' => "" }} ] })
                @baidu_db.close()
                
              end
              
              
              @all_campaign = @db["all_campaign"].find({:network_id => network_d["id"].to_i})
              @db.close
              
              if @all_campaign.count.to_i > 0
                  @all_campaign.each do |all_campaign_d|
                    
                      if network_d["type"].to_s == "sogou"
                          @all_campaign_hash[all_campaign_d["cpc_plan_id"]] = all_campaign_d["campaign_name"]
                      else
                          @all_campaign_hash[all_campaign_d["campaign_id"]] = all_campaign_d["campaign_name"]
                      end
                  end  
              end
              
              if @all_adgroup.count.to_i > 0
                  @all_adgroup.each do |all_adgroup_d|
                      if network_d["type"].to_s == "sogou"
                          @all_adgroup_hash[all_adgroup_d["cpc_grp_id"]] = all_adgroup_d["name"]
                      elsif network_d["type"].to_s == "360"
                          @all_adgroup_hash[all_adgroup_d["adgroup_id"]] = all_adgroup_d["adgroup_name"]
                      elsif network_d["type"].to_s == "baidu"
                          @all_adgroup_hash[all_adgroup_d["adgroup_id"]] = all_adgroup_d["name"]
                      elsif network_d["type"].to_s == "shenma"
                          @all_adgroup_hash[all_adgroup_d["adgroup_id"]] = all_adgroup_d["adgroup_name"]
                      end
                  end
              end
      
      
      
              # name = SecureRandom.hex(18)
              name = network_d["name"] + "_watchdog_report_" + @now
              p = Axlsx::Package.new
              wb = p.workbook
              
              @csv_head = ["\xEF\xBB\xBFAccount", "\xEF\xBB\xBF﻿Channel Type", "\xEF\xBB\xBFURL", "\xEF\xBB\xBF﻿Level", "\xEF\xBB\xBFResponse Code", "\xEF\xBB\xBF﻿Campaign", "\xEF\xBB\xBFAd Group", "\xEF\xBB\xBFAD", "\xEF\xBB\xBFKeyword"]
              csv_array = []
              
              if @ad_url.count.to_i > 0
                  @ad_url.no_cursor_timeout.each do |ad_url_d|
                    
                      if ad_url_d["visit_url"] != "" && ad_url_d["response_code"].to_i != 200
                          
                          url = ad_url_d["visit_url"].to_s
                        
                          if url.include?(".adeqo.")
                              temp_url_array = url.split("&durl=")
                              url = CGI.unescape(temp_url_array[1].to_s)
                          end
                        
                          temp_arr = []
                          temp_arr << network_d["name"]
                          temp_arr << network_d["type"]
                          temp_arr << url
                          temp_arr << "Ad"
                          temp_arr << ad_url_d["response_code"]
                          
                          if network_d["type"].to_s == "sogou"
                              temp_arr << @all_campaign_hash[ad_url_d["cpc_plan_id"]]
                              temp_arr << @all_adgroup_hash[ad_url_d["cpc_grp_id"]]
                          elsif network_d["type"].to_s == "360"
                              temp_arr << @all_campaign_hash[ad_url_d["campaign_id"]]
                              temp_arr << @all_adgroup_hash[ad_url_d["adgroup_id"]]
                          elsif network_d["type"].to_s == "baidu"
                              temp_arr << @all_campaign_hash[ad_url_d["campaign_id"]]
                              temp_arr << @all_adgroup_hash[ad_url_d["adgroup_id"]]
                          elsif network_d["type"].to_s == "baidu"
                              temp_arr << @all_campaign_hash[ad_url_d["campaign_id"]]
                              temp_arr << @all_adgroup_hash[ad_url_d["adgroup_id"]]
                          end
                          
                          temp_arr << ad_url_d["title"]
                          temp_arr << ""
                          
                          csv_array << temp_arr
                      end
                      
                      if ad_url_d["mobile_visit_url"] != "" && ad_url_d["m_response_code"].to_i != 200
                        
                          url = ad_url_d["mobile_visit_url"].to_s
                        
                          if url.include?(".adeqo.")
                              temp_url_array = url.split("&durl=")
                              url = CGI.unescape(temp_url_array[1].to_s)
                          end
                        
                          temp_arr = []
                          temp_arr << network_d["name"]
                          temp_arr << network_d["type"]
                          temp_arr << url
                          temp_arr << "Ad"
                          temp_arr << ad_url_d["m_response_code"]
                          if network_d["type"].to_s == "sogou"
                              temp_arr << @all_campaign_hash[ad_url_d["cpc_plan_id"]]
                              temp_arr << @all_adgroup_hash[ad_url_d["cpc_grp_id"]]
                          elsif network_d["type"].to_s == "360"
                              temp_arr << @all_campaign_hash[ad_url_d["campaign_id"]]
                              temp_arr << @all_adgroup_hash[ad_url_d["adgroup_id"]]
                          elsif network_d["type"].to_s == "baidu"
                              temp_arr << @all_campaign_hash[ad_url_d["campaign_id"]]
                              temp_arr << @all_adgroup_hash[ad_url_d["adgroup_id"]]
                          elsif network_d["type"].to_s == "shenma"
                              temp_arr << @all_campaign_hash[ad_url_d["campaign_id"]]
                              temp_arr << @all_adgroup_hash[ad_url_d["adgroup_id"]]
                          end
                          temp_arr << ad_url_d["title"]
                          temp_arr << ""
                          
                          csv_array << temp_arr
                      end
                  end
              end
              
              if @keyword_url.count.to_i > 0
                  @keyword_url.no_cursor_timeout.each do |keyword_url_d|
                      if keyword_url_d["visit_url"] != "" && keyword_url_d["response_code"].to_i != 200
                        
                          url = keyword_url_d["visit_url"].to_s
                        
                          if url.include?(".adeqo.")
                              temp_url_array = url.split("&durl=")
                              url = CGI.unescape(temp_url_array[1].to_s)
                          end
                        
                          temp_arr = []
                          
                          temp_arr << network_d["name"]
                          temp_arr << network_d["type"]
                          temp_arr << url
                          temp_arr << "Keyword"
                          temp_arr << keyword_url_d["response_code"]
                          
                          if network_d["type"].to_s == "sogou"
                              temp_arr << @all_campaign_hash[keyword_url_d["cpc_plan_id"]]
                              temp_arr << @all_adgroup_hash[keyword_url_d["cpc_grp_id"]]
                          elsif network_d["type"].to_s == "360"
                              temp_arr << @all_campaign_hash[keyword_url_d["campaign_id"]]
                              temp_arr << @all_adgroup_hash[keyword_url_d["adgroup_id"]]
                          elsif network_d["type"].to_s == "baidu"
                              temp_arr << @all_campaign_hash[keyword_url_d["campaign_id"]]
                              temp_arr << @all_adgroup_hash[keyword_url_d["adgroup_id"]]
                          elsif network_d["type"].to_s == "shenma"
                              temp_arr << @all_campaign_hash[keyword_url_d["campaign_id"]]
                              temp_arr << @all_adgroup_hash[keyword_url_d["adgroup_id"]]
                          end
                          
                          temp_arr << ""
                          temp_arr << keyword_url_d["keyword"]
                          
                          csv_array << temp_arr
                      end
                      
                      if keyword_url_d["mobile_visit_url"] != "" && keyword_url_d["m_response_code"].to_i != 200
                        
                        
                          url = keyword_url_d["mobile_visit_url"].to_s
                        
                          if url.include?(".adeqo.")
                              temp_url_array = url.split("&durl=")
                              url = CGI.unescape(temp_url_array[1].to_s)
                          end
                        
                          temp_arr = []
                          
                          temp_arr << network_d["name"]
                          temp_arr << network_d["type"]
                          temp_arr << url
                          temp_arr << "Keyword"
                          temp_arr << keyword_url_d["m_response_code"]
                          
                          if network_d["type"].to_s == "sogou"
                              temp_arr << @all_campaign_hash[keyword_url_d["cpc_plan_id"]]
                              temp_arr << @all_adgroup_hash[keyword_url_d["cpc_grp_id"]]
                          elsif network_d["type"].to_s == "360"
                              temp_arr << @all_campaign_hash[keyword_url_d["campaign_id"]]
                              temp_arr << @all_adgroup_hash[keyword_url_d["adgroup_id"]]
                          elsif network_d["type"].to_s == "baidu"
                              temp_arr << @all_campaign_hash[keyword_url_d["campaign_id"]]
                              temp_arr << @all_adgroup_hash[keyword_url_d["adgroup_id"]]
                          elsif network_d["type"].to_s == "shenma"
                              temp_arr << @all_campaign_hash[keyword_url_d["campaign_id"]]
                              temp_arr << @all_adgroup_hash[keyword_url_d["adgroup_id"]]
                          end
                         
                          temp_arr << ""
                          temp_arr << keyword_url_d["keyword"]
                          
                          csv_array << temp_arr
                      end
                  end
              end
              
              wb.add_worksheet(:name => "Basic Worksheet") do |sheet|
                  
                  sheet.add_row @csv_head
                  
                  csv_array.each_with_index do |csv, csv_index|
                      sheet.add_row csv
                  end
              end
              
              # @logger.info "done create excel"
              
              create_excel_path = '/home/bmg/worker/public/watchdog/'+name+'.xlsx'
              dl_excel_path = 'http://china.adeqo.com:'+@port.to_s+'/watchdog/'+name+'.xlsx'
              
              p.serialize(create_excel_path)
              
              @logger.info dl_excel_path
      
      
              @db["watchdog_report"].insert_one({ 
                                                    network_id: network_d["id"].to_i,
                                                    file_id: name.to_s,
                                                    file_url: dl_excel_path.to_s,
                                                    create_date: @now                                            
                                               })
              @db.close
              
                
              @db["network"].find('id' => network_d["id"].to_i).update_one('$set'=> { 'watchdog' => 2, 'watchdog_worker' => "", 'last_update' => @now})
              @db.close
      
          end
          
             
          
      end 
      
      data = {:ad_url => @ad_url.count.to_i, :keyword_url => @keyword_url.count.to_i, :status => "true" }
      return render :json => data, :status => :ok
      
  end
      
      
      
  def watchdogreset
    
      @id = params[:id]
      
      # if @id.nil?
          # # @network = @db["network"].find({ "$and" => [{:watchdog => { '$ne' => 0 }}, {:watchdog => { '$ne' => 1 }} ] })
          # @network = @db["network"].find({:watchdog => 2 })
          # @db.close
      # else
          # @network = @db["network"].find('id' => @id.to_i)
          # @db.close
      # end
#       
#       
      # if @network.count.to_i >= 0
          # @network.each do |network_d|
#             
              # ab_db_name = "ad_"+network_d["type"].to_s+"_"+network_d["id"].to_s
              # keyword_db_name = "keyword_"+network_d["type"].to_s+"_"+network_d["id"].to_s
#               
              # if network_d["type"].to_s == "sogou"
#               
                # @sogou_db[ab_db_name].find().update_many('$set'=> {'watchdog' => 0})
                # @sogou_db.close()
#                 
                # @sogou_db[keyword_db_name].find().update_many('$set'=> {'watchdog' => 0})
                # @sogou_db.close()
#                 
              # elsif network_d["type"].to_s == "360"
#                 
                # @threesixty_db[ab_db_name].find().update_many('$set'=> {'watchdog' => 0})
                # @threesixty_db.close()
#                 
                # @threesixty_db[keyword_db_name].find().update_many('$set'=> {'watchdog' => 0})
                # @threesixty_db.close()
#                 
              # elsif network_d["type"].to_s == "baidu"
#                 
                # @baidu_db[ab_db_name].find().update_many('$set'=> {'watchdog' => 0})
                # @baidu_db.close()
#                 
                # @baidu_db[keyword_db_name].find().update_many('$set'=> {'watchdog' => 0})
                # @baidu_db.close()
              # end
#               
          # end
      # end
      
      if @id.nil?
          @db["network"].find({:watchdog => 2 }).update_many('$set'=> {'watchdog' => 0, 'last_update' => @now})
          @db.close
      else
          @db["network"].find('id' => @id.to_i).update_many('$set'=> {'watchdog' => 0, 'last_update' => @now})
          @db.close
      end
      
      data = {:msg => "watchdog reset done", :status => "true" }
      return render :json => data, :status => :ok
      
  end    
  
  def watchdograndom
    
      @network = @db["network"].find('watchdog_worker' => "")
      @db.close
      
      @network_id_arr = []
      
      if @network.count.to_i >= 0
          @network.each do |network_d|
              if network_d["type"].to_s == "sogou" || network_d["type"].to_s == "360" || network_d["type"].to_s == "baidu"|| network_d["type"].to_s == "shenma"
                  @network_id_arr << network_d["id"]
              end
          end
      end
      
      
      port_array = [81,83,85,89]
      
      @network_id_arr.shuffle
      array_limit = port_array.count.to_i
      arr = @network_id_arr.in_groups(array_limit)
      
      if arr.count.to_i >= 0
          arr.each_with_index do |arr_d, index|
            
            @network = @db["network"].find('id' => { "$in" => arr_d}).update_many('$set'=> {'watchdog_worker' => port_array[index].to_i , 'last_update' => @now})
            @db.close
            
          end
      end
      
      data = {:msg => "watchdog random done", :status => "true" }
      return render :json => data, :status => :ok
  end
  
  
    
  def watchdog
    
    @id = params[:id]
    if @id.nil?
        @network = @db[:network].find({ '$and' => [ {'file_update_1' => 4},{'file_update_2' => 4},{'file_update_3' => 4},{'file_update_4' => 4}, 'watchdog' => 1, 'watchdog_worker' => @port.to_i ]})
        @db.close
        
        if @network.count.to_i >= 1
            @logger.info "watchdog running"
            
            data = { :data => "watchdog running" }
            return render :json => data, :status => :ok
            # return render :nothing => true
        end
        
        @network = @db[:network].find({ '$and' => [ {'file_update_1' => 4},{'file_update_2' => 4},{'file_update_3' => 4},{'file_update_4' => 4}, 'watchdog' => 0, 'watchdog_worker' => @port.to_i ]}).sort({ last_update: -1 }).limit(1)
        @db.close
        
        
        if @network.count.to_i == 0
          
            @network = @db[:network].find({ '$and' => [ {'file_update_1' => 4},{'file_update_2' => 4},{'file_update_3' => 4},{'file_update_4' => 4}, 'watchdog' => 0 ]}).sort({ last_update: -1 }).limit(1)
            @db.close
          
            # @logger.info "no watchdog pending"
            # return render :nothing => true
            data = { :data => "no watchdog pending" }
            return render :json => data, :status => :ok
        end
        
    else
        @network = @db["network"].find('id' => @id.to_i)
        @db.close
    end
    
    all_ad_url_hash = {}
    all_ad_m_url_hash = {}
    all_keyword_url_hash = {}
    all_keyword_m_url_hash = {} 
    
    if @network.count.to_i >= 0
        @network.each do |network_d|
            
            begin
            @db["network"].find('id' => network_d["id"].to_i).update_one('$set'=> { 'watchdog' => 1, 'watchdog_worker' => @port.to_i, 'last_update' => @now})
            @db.close
          
            ab_db_name = "ad_"+network_d["type"].to_s+"_"+network_d["id"].to_s
            keyword_db_name = "keyword_"+network_d["type"].to_s+"_"+network_d["id"].to_s
            
            
            if network_d["type"].to_s == "sogou"
              
              # @ad_url = @sogou_db[ab_db_name].find({ "$and" => [{ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] }, {:watchdog => 0} ] })
              @ad_url = @sogou_db[ab_db_name].find({ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] })
              @sogou_db.close()
              
              # @keyword_url = @sogou_db[keyword_db_name].find({ "$and" => [{ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] }, {:watchdog => 0} ] })
              @keyword_url = @sogou_db[keyword_db_name].find({ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] })
              @sogou_db.close()
              
            elsif network_d["type"].to_s == "360"
              
              # @ad_url = @threesixty_db[ab_db_name].find({ "$and" => [{ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] }, {:watchdog => 0} ] })
              @ad_url = @threesixty_db[ab_db_name].find({ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] })
              @threesixty_db.close()
              
              # @keyword_url = @threesixty_db[keyword_db_name].find({ "$and" => [{ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] }, {:watchdog => 0} ] })
              @keyword_url = @threesixty_db[keyword_db_name].find({ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] })
              @threesixty_db.close()
              
            elsif network_d["type"].to_s == "baidu"
              
              # @ad_url = @baidu_db[ab_db_name].find({ "$and" => [{ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] }, {:watchdog => 0} ] })
              @ad_url = @baidu_db[ab_db_name].find({ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] })
              @baidu_db.close()
              
              # @keyword_url = @baidu_db[keyword_db_name].find({ "$and" => [{ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] }, {:watchdog => 0} ] })
              @keyword_url = @baidu_db[keyword_db_name].find({ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] })
              @baidu_db.close()
              
              
            elsif network_d["type"].to_s == "shenma"
              
              @ad_url = @baidu_db[ab_db_name].find({ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] })
              @baidu_db.close()
              
              
              @keyword_url = @baidu_db[keyword_db_name].find({ "$or" => [{:visit_url => { '$ne' => "" }}, {:mobile_visit_url => { '$ne' => "" }} ] })
              @baidu_db.close()
            end
      
            
            @network_watchdog_status = 2
            
            
            
            
            if @ad_url.count.to_i > 0
                @ad_url.no_cursor_timeout.each_with_index do |ad_url_d,index|
                    
                    url = ad_url_d["visit_url"].to_s
                    
                    if url.to_s != ""
                        
                        if url.include?(".adeqo.")
                            temp_url_array = url.split("&durl=")
                            url = CGI.unescape(temp_url_array[1].to_s)
                        end
                    
                        # @logger.info url
                        
                        if all_ad_url_hash[url].nil?
                          all_ad_url_hash[url] = []
                        end
                        
                        if !url.to_s.downcase.include?("www.ctrip.cn") && !url.to_s.downcase.include?("www.xiecheng.com") && !url.to_s.downcase.include?("m.ctrip.cn") && !url.to_s.downcase.include?("m.xiecheng.com") && !url.to_s.downcase.include?("m.ctrip.net") && !url.to_s.downcase.include?("lvyou.ctrip.cn") && !url.to_s.downcase.include?("you.ctrip.com")
                            if network_d["type"].to_s == "sogou"
                                all_ad_url_hash[url] << ad_url_d["cpc_idea_id"].to_i
                            elsif network_d["type"].to_s == "360"
                                all_ad_url_hash[url] << ad_url_d["ad_id"].to_i
                            elsif network_d["type"].to_s == "baidu"
                                all_ad_url_hash[url] << ad_url_d["ad_id"].to_i
                            elsif network_d["type"].to_s == "shenma"
                                all_ad_url_hash[url] << ad_url_d["ad_id"].to_i
                            end
                        else
                            @logger.info url
                        end
                    end

                    # ______________________________________________________________
                    
                    m_url = ad_url_d["mobile_visit_url"].to_s
                    
                    
                    if m_url.to_s != ""
                        if m_url.include?(".adeqo.")
                            m_temp_url_array = m_url.split("&durl=")
                            m_url = CGI.unescape(m_temp_url_array[1].to_s)
                        end
                    
                        # @logger.info m_url
                        
                        if all_ad_m_url_hash[m_url].nil?
                            all_ad_m_url_hash[m_url] = []
                        end
                        
                        if !m_url.to_s.downcase.include?("www.ctrip.cn") && !m_url.to_s.downcase.include?("www.xiecheng.com") && !m_url.to_s.downcase.include?("m.ctrip.cn") && !m_url.to_s.downcase.include?("m.xiecheng.com") && !m_url.to_s.downcase.include?("m.ctrip.net") && !m_url.to_s.downcase.include?("lvyou.ctrip.cn") && !m_url.to_s.downcase.include?("you.ctrip.com")
                            if network_d["type"].to_s == "sogou"
                                all_ad_m_url_hash[m_url] << ad_url_d["cpc_idea_id"].to_i
                            elsif network_d["type"].to_s == "360"
                                all_ad_m_url_hash[m_url] << ad_url_d["ad_id"].to_i
                            elsif network_d["type"].to_s == "baidu"
                                all_ad_m_url_hash[m_url] << ad_url_d["ad_id"].to_i
                            elsif network_d["type"].to_s == "shenma"
                                all_ad_m_url_hash[m_url] << ad_url_d["ad_id"].to_i 
                            end
                        else
                            @logger.info m_url
                        end
                    end
                    
                end
            end
            
            
            if @keyword_url.count.to_i > 0
                @keyword_url.no_cursor_timeout.each_with_index do |keyword_url_d,index|
                  
                    url = keyword_url_d["visit_url"].to_s
                    
                    if url.to_s != ""    
                        if url.include?(".adeqo.")
                            temp_url_array = url.split("&durl=")
                            url = CGI.unescape(temp_url_array[1].to_s)
                        end
                    
                    
                        if all_keyword_url_hash[url].nil?
                            all_keyword_url_hash[url] = []
                        end
                        
                        if !url.to_s.downcase.include?("www.ctrip.cn") && !url.to_s.downcase.include?("www.xiecheng.com") && !url.to_s.downcase.include?("m.ctrip.cn") && !url.to_s.downcase.include?("m.xiecheng.com") && !url.to_s.downcase.include?("m.ctrip.net") && !url.to_s.downcase.include?("lvyou.ctrip.cn") && !url.to_s.downcase.include?("you.ctrip.com")
                            all_keyword_url_hash[url] << keyword_url_d["keyword_id"].to_i
                        else
                            @logger.info url
                        end
                    end
                    
                    # __________________________________________________________
                    
                    
                    m_url = keyword_url_d["mobile_visit_url"].to_s
                    
                    if m_url.to_s != ""  
                        if m_url.include?(".adeqo.")
                            m_temp_url_array = m_url.split("&durl=")
                            m_url = CGI.unescape(m_temp_url_array[1].to_s)
                        end
                    
                    
                        if all_keyword_m_url_hash[m_url].nil?
                            all_keyword_m_url_hash[m_url] = []
                        end
                        
                        if !m_url.to_s.downcase.include?("www.ctrip.cn") && !m_url.to_s.downcase.include?("www.xiecheng.com") && !m_url.to_s.downcase.include?("m.ctrip.cn") && !m_url.to_s.downcase.include?("m.xiecheng.com") && !m_url.to_s.downcase.include?("m.ctrip.net") && !m_url.to_s.downcase.include?("lvyou.ctrip.cn") && !m_url.to_s.downcase.include?("you.ctrip.com")
                            all_keyword_m_url_hash[m_url] << keyword_url_d["keyword_id"]
                        else
                            @logger.info m_url
                        end
                    end
                end
            end
                 
            
            
            if all_ad_url_hash.count.to_i > 0
                all_ad_url_hash.each do |key, value|
                  
                    @logger.info network_d["id"].to_s + " ad visit url" + key.to_s

            
                    url = key
                    res = Net::HTTP.get_response(URI(url))
                    
                    if res.code.to_i > 399
                      
                        array_limit = 4000
                        @network_watchdog_status = 3
                        
                        update_hash = {}
                        update_hash["response_code"] = res.code.to_i
                        
                        if value.count.to_i > array_limit.to_i
                            total_array = value.count.to_i / array_limit.to_i
                            total_array = total_array + 1
                            value = value.in_groups(total_array)
                            
                            if network_d["type"].to_s == "sogou"
                              
                                value.each do |value_d|
                                    @sogou_db[ab_db_name].find('cpc_idea_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @sogou_db.close()
                                end
                                
                            elsif network_d["type"].to_s == "360"
                                
                                value.each do |value_d|
                                    @threesixty_db[ab_db_name].find('ad_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @threesixty_db.close()
                                end
                                
                            elsif network_d["type"].to_s == "baidu"
                              
                                value.each do |value_d|
                                    @baidu_db[ab_db_name].find('ad_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @baidu_db.close()
                                end
                                
                                
                            elsif network_d["type"].to_s == "shenma"
                                
                                value.each do |value_d|
                                    @baidu_db[ab_db_name].find('ad_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @baidu_db.close()
                                end
                                
                            end
                            
                        else    
                          
                            if network_d["type"].to_s == "sogou"
                              
                                @sogou_db[ab_db_name].find('cpc_idea_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @sogou_db.close()
                                
                            elsif network_d["type"].to_s == "360"
                                
                                @threesixty_db[ab_db_name].find('ad_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @threesixty_db.close()
                                
                            elsif network_d["type"].to_s == "baidu"
                              
                                @baidu_db[ab_db_name].find('ad_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @baidu_db.close()
                                
                            elsif network_d["type"].to_s == "shenma"
                                
                                value.each do |value_d|
                                    @baidu_db[ab_db_name].find('ad_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @baidu_db.close()
                                end
                                
                            end
                          
                        end
                        
                    end
                end      
            end
            
            
            if all_ad_m_url_hash.count.to_i > 0
                all_ad_m_url_hash.each do |key, value|
                  
                    @logger.info network_d["id"].to_s + " ad mobile visit url" + key.to_s
                    
                    url = key
                    res = Net::HTTP.get_response(URI(url))
                    
                    if res.code.to_i > 399
                      
                        array_limit = 4000
                        @network_watchdog_status = 3
                        
                        update_hash = {}
                        update_hash["m_response_code"] = res.code.to_i
                        
                        if value.count.to_i > array_limit.to_i
                            total_array = value.count.to_i / array_limit.to_i
                            total_array = total_array + 1
                            value = value.in_groups(total_array)
                            
                            if network_d["type"].to_s == "sogou"
                              
                                value.each do |value_d|
                                    @sogou_db[ab_db_name].find('cpc_idea_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @sogou_db.close()
                                end
                                
                            elsif network_d["type"].to_s == "360"
                                
                                value.each do |value_d|
                                    @threesixty_db[ab_db_name].find('ad_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @threesixty_db.close()
                                end
                                
                            elsif network_d["type"].to_s == "baidu"
                              
                                value.each do |value_d|
                                    @baidu_db[ab_db_name].find('ad_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @baidu_db.close()
                                end
                            
                            elsif network_d["type"].to_s == "shenma"
                                
                                value.each do |value_d|
                                    @baidu_db[ab_db_name].find('ad_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @baidu_db.close()
                                end    
                            end
                        
                        else
                            
                            if network_d["type"].to_s == "sogou"
                              
                                @sogou_db[ab_db_name].find('cpc_idea_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @sogou_db.close()
                                
                            elsif network_d["type"].to_s == "360"
                                
                                @threesixty_db[ab_db_name].find('ad_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @threesixty_db.close()
                                
                            elsif network_d["type"].to_s == "baidu"
                              
                                @baidu_db[ab_db_name].find('ad_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @baidu_db.close()
                            
                            elsif network_d["type"].to_s == "shenma"
                              
                                value.each do |value_d|
                                    @baidu_db[ab_db_name].find('ad_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @baidu_db.close()
                                end    
                              
                            end
                        end
                        
                    end
                end      
            end
               
            if all_keyword_url_hash.count.to_i > 0
                all_keyword_url_hash.each do |key, value|
                    url = key
                    res = Net::HTTP.get_response(URI(url))
                    
                    @logger.info network_d["id"].to_s + " keyword visit url" + key.to_s
                    
                    if res.code.to_i > 399
                      
                        array_limit = 4000
                        @network_watchdog_status = 3
                        
                        update_hash = {}
                        update_hash["response_code"] = res.code.to_i
                        
                        if value.count.to_i > array_limit.to_i
                            total_array = value.count.to_i / array_limit.to_i
                            total_array = total_array + 1
                            value = value.in_groups(total_array)
                            
                            if network_d["type"].to_s == "sogou"
                              
                                value.each do |value_d|
                                    @sogou_db[keyword_db_name].find('keyword_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @sogou_db.close()
                                end
                                
                            elsif network_d["type"].to_s == "360"
                                
                                value.each do |value_d|
                                    @threesixty_db[keyword_db_name].find('keyword_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @threesixty_db.close()
                                end
                                
                            elsif network_d["type"].to_s == "baidu"
                              
                                value.each do |value_d|
                                    @baidu_db[keyword_db_name].find('keyword_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @baidu_db.close()
                                end
                            
                            elsif network_d["type"].to_s == "shenma"
                              
                                value.each do |value_d|
                                    @baidu_db[keyword_db_name].find('keyword_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @baidu_db.close()
                                end
                                    
                            end
                        
                        else
                          
                            if network_d["type"].to_s == "sogou"
                                @sogou_db[keyword_db_name].find('keyword_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @sogou_db.close()
                            elsif network_d["type"].to_s == "360"
                                @threesixty_db[keyword_db_name].find('keyword_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @threesixty_db.close()
                            elsif network_d["type"].to_s == "baidu"
                                @baidu_db[keyword_db_name].find('keyword_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @baidu_db.close()
                            elsif network_d["type"].to_s == "shenma"
                                @baidu_db[keyword_db_name].find('keyword_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @baidu_db.close()
                            end
                                
                        end
                        
                    end
                    
                    
                end      
            end
            
            if all_keyword_m_url_hash.count.to_i > 0
                all_keyword_m_url_hash.each do |key, value|
                    
                    url = key
                    res = Net::HTTP.get_response(URI(url))
                    
                    @logger.info network_d["id"].to_s + " keyword mobile visit url" + key.to_s
                    
                    if res.code.to_i > 399
                      
                        array_limit = 4000
                        @network_watchdog_status = 3
                        
                        update_hash = {}
                        update_hash["m_response_code"] = res.code.to_i
                        
                        if value.count.to_i > array_limit.to_i
                            total_array = value.count.to_i / array_limit.to_i
                            total_array = total_array + 1
                            value = value.in_groups(total_array)
                            
                            if network_d["type"].to_s == "sogou"
                              
                                value.each do |value_d|
                                    @sogou_db[keyword_db_name].find('keyword_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @sogou_db.close()
                                end
                                
                            elsif network_d["type"].to_s == "360"
                                
                                value.each do |value_d|
                                    @threesixty_db[keyword_db_name].find('keyword_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @threesixty_db.close()
                                end
                                
                            elsif network_d["type"].to_s == "baidu"
                              
                                value.each do |value_d|
                                    @baidu_db[keyword_db_name].find('keyword_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @baidu_db.close()
                                end
                            
                            elsif network_d["type"].to_s == "shenma"
                              
                                value.each do |value_d|
                                    @baidu_db[keyword_db_name].find('keyword_id' => { "$in" => value_d}).update_many('$set'=> update_hash)
                                    @baidu_db.close()
                                end
                                    
                            end
                        
                        else
                            if network_d["type"].to_s == "sogou"
                              
                                @sogou_db[keyword_db_name].find('keyword_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @sogou_db.close()
                                
                            elsif network_d["type"].to_s == "360"
                                
                                @threesixty_db[keyword_db_name].find('keyword_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @threesixty_db.close()
                                
                            elsif network_d["type"].to_s == "baidu"
                              
                                @baidu_db[keyword_db_name].find('keyword_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @baidu_db.close()
                            
                            elsif network_d["type"].to_s == "shenma"
                                
                                @baidu_db[keyword_db_name].find('keyword_id' => { "$in" => value}).update_many('$set'=> update_hash)
                                @baidu_db.close()
                                    
                            end
                        end
                        
                    end
                    
                    
                end      
            end   
            
            @db["network"].find('id' => network_d["id"].to_i).update_one('$set'=> { 'watchdog' => @network_watchdog_status,'watchdog_worker' => @port.to_i, 'last_update' => @now})
            @db.close
            rescue Exception
            @db["network"].find('id' => network_d["id"].to_i).update_one('$set'=> { 'watchdog' => 0,'watchdog_worker' => @port.to_i, 'last_update' => @now})
            @db.close
            end
            
        end
    end
      
    @logger.info "watchdog done" 
    
    data = {:all_ad_url_hash => all_ad_url_hash.count.to_i,:all_ad_m_url_hash => all_ad_m_url_hash.count.to_i,:all_keyword_url_hash => all_keyword_url_hash.count.to_i,:all_keyword_m_url_hash => all_keyword_m_url_hash.count.to_i, :status => @status}
    return render :json => data, :status => :ok
  end
  
  
  def db
     
    @port = 81
     
    if @sogou_db.nil?
        # @sogou_db = Mongo::Client.new([ '10.215.96.101:27017' ], :database => 'adeqo', :connect => :direct , :timeout => 5, :max_pool_size => 50, :pool_timeout => 5, :socket_timeout => 5, :connect_timeout => 5)
        @sogou_db = Mongo::Client.new([ '10.215.96.101:27017' ], :database => 'adeqo', :connect => :direct, :max_pool_size => 10)
        @sogou_db.close()
    end
    
    if @threesixty_db.nil?
        # @threesixty_db = Mongo::Client.new([ '10.215.134.32:27017' ], :database => 'adeqo', :connect => :direct , :timeout => 5, :max_pool_size => 50, :pool_timeout => 5, :socket_timeout => 5, :connect_timeout => 5)
        @threesixty_db = Mongo::Client.new([ '10.215.134.32:27017' ], :database => 'adeqo', :connect => :direct, :max_pool_size => 10)
        @threesixty_db.close()
    end
    
    
    if @baidu_db.nil? 
        # @baidu_db = Mongo::Client.new([ '10.215.124.104:27017' ], :database => 'adeqo', :connect => :direct , :timeout => 5, :max_pool_size => 50, :pool_timeout => 5, :socket_timeout => 5, :connect_timeout => 5)
        @baidu_db = Mongo::Client.new([ '10.215.124.104:27017' ], :database => 'adeqo', :connect => :direct, :max_pool_size => 10)
        @baidu_db.close()
    end
    
    
     
    if @db.nil? 
        # this one is for account structure
        # @db = Mongo::Client.new([ '10.215.148.65:27017' ], :database => 'adeqo', :connect => :direct , :timeout => 5, :max_pool_size => 50, :pool_timeout => 5, :socket_timeout => 5, :connect_timeout => 5)
        @db = Mongo::Client.new([ '10.215.148.65:27017' ], :database => 'adeqo', :connect => :direct, :max_pool_size => 10, :timeout => 5)
        @db.close
    end
    
    if @db2.nil?
        # this one is for clicks
        # @db2 = Mongo::Client.new([ '10.215.152.50:27017' ], :database => 'adeqo', :connect => :direct , :timeout => 5, :max_pool_size => 50, :pool_timeout => 15, :socket_timeout => 5, :connect_timeout => 5)
        @db2 = Mongo::Client.new([ '10.215.124.60:27017' ], :database => 'adeqo', :connect => :direct, :max_pool_size => 10)
        @db2.close()
    end
    
    
    if @db3.nil?
      # this one is for report
      # @db3 = Mongo::Client.new([ '10.215.100.15:27017' ], :database => 'adeqo', :connect => :direct , :timeout => 5, :max_pool_size => 50, :pool_timeout => 15, :socket_timeout => 5, :connect_timeout => 5)
      @db3 = Mongo::Client.new([ '10.215.100.15:27017' ], :database => 'adeqo', :connect => :direct, :max_pool_size => 10) 
      @db3.close()
    end
     
  end
    
  
  def cleanwatchdogfile
      begin
      @all_watchdog_files = Dir.glob('/home/bmg/worker/public/watchdog/*')
      
      file_year = (Time.now - 180.day).to_date.strftime("%Y")
      file_month = (Time.now - 180.day).to_date.strftime("%m")
      file_day = (Time.now - 180.day).to_date.strftime("%d")
       
      file_date = file_year + "-" + file_month + "-" + file_day
      
      @all_watchdog_files.each do |all_files_p|
          if File.mtime(all_files_p) < file_date 
              File.delete(all_files_p) if File.exist?(all_files_p)
          end
      end
      rescue Exception
      end
      
      data = {:message => "clean watchdog file", :clean_day => file_date, :status => "true", :test => @test}
      return render :json => data, :status => :ok
    
  end
  
  
  def cleaneventfile
      begin
      @all_event_files = Dir.glob('/home/bmg/worker/public/export_event/*')
      
      file_year = (Time.now - 1.day).to_date.strftime("%Y")
      file_month = (Time.now - 1.day).to_date.strftime("%m")
      file_day = (Time.now - 1.day).to_date.strftime("%d")
       
      file_date = file_year + "-" + file_month + "-" + file_day
      
      @all_event_files.each do |all_files_p|
          if all_files_p.to_s.include?(file_date)
              File.delete(all_files_p) if File.exist?(all_files_p)
          end
      end
      rescue Exception
      end
      
      data = {:message => "clean event file", :clean_day => file_date, :status => "true"}
      return render :json => data, :status => :ok
    
  end
  
  
  
  def getmissingeventfile
    
      # begin
          @logger.info "run get missing event file"
                    
          @one_hour_ago = Time.now - 1.hours
          @all_event_files = Dir.glob('/home/bmg/worker/public/export_event/*')
          name_datetime = @one_hour_ago.in_time_zone('Beijing').strftime("%Y-%m-%d-%H")
          
          
          @all_event_files.each do |all_files_p|
              begin 
                  if !all_files_p.to_s.include?(name_datetime) && !all_files_p.to_s.include?("n_") 
                    
                      @logger.info all_files_p.to_s
                      
                      # data_arr = []
                      
                      xlsx = Roo::Spreadsheet.open(all_files_p, extension: :xlsx)
                      xlsx.each_with_index do |csv, csv_index|
                          
                          begin
                              @logger.info "."
                              
                              cookies_hash = {}
                              csv_cookies_array = []
                              
                              if csv[11].to_s != "{}"
                                  csv_cookies_array = csv[11].to_s.gsub('{', '').gsub('}', '').split(",")
                                  
                                  csv_cookies_array.each do |csv_cookies_array_d|
                                      temp_arr = csv_cookies_array_d.split("=>")
                                      
                                      if !temp_arr[0].nil?
                                          name = temp_arr[0].gsub('"', '')
                                      end
                                      
                                      if !temp_arr[1].nil?
                                          value = temp_arr[1].gsub('"', '')
                                      else
                                          value = ""
                                      end
                                      
                                      if !temp_arr[0].nil?
                                          cookies_hash[name] = value
                                      end
                                      
                                      cookies_hash[name] = value
                                  end
                                  
                              end
                              
                              @db2[:events].insert_one({ 
                                                  id: csv[0].to_s, 
                                                  random_number: csv[1].to_i.to_s,
                                                  session_id: csv[2].to_s,
                                                  tag_version: csv[3].to_s,
                                                  company_id: csv[4].to_i,
                                                  referer: csv[5].to_s,
                                                  ip: csv[6],
                                                  country: csv[7].to_s,
                                                  city: csv[8].to_s,
                                                  variant: csv[9].to_s,
                                                  user_agent: csv[10].to_s,
                                                  cookies: cookies_hash,
                                                  other_param: JSON.parse(csv[12]),
                                                  date: csv[13].to_s,
                                                  check_status: csv[14].to_i
                                                })
                              @db2.close()
                              
                          rescue Exception
                              @logger.info csv
                          end
                      end
                      
                      
                      
                      # File.delete(all_files_p) if File.exist?(all_files_p)
                      
                  elsif !all_files_p.to_s.include?(name_datetime) && all_files_p.to_s.include?("n_")
                    
                      @logger.info all_files_p.to_s
                      
                      # data_arr = []
                                    
                      xlsx = Roo::Spreadsheet.open(all_files_p, extension: :xlsx)
                      xlsx.each_with_index do |csv, csv_index|
                         
                          begin
                              cookies_hash = {}
                              csv_cookies_array = []
                              
                              @logger.info csv_index.to_s
                              
                              
                              if csv[25].to_s != "{}"
                                  csv_cookies_array = csv[25].to_s.gsub('{', '').gsub('}', '').split(",")
                                  
                                  csv_cookies_array.each do |csv_cookies_array_d|
                                      temp_arr = csv_cookies_array_d.split("=>")
                                      
                                      if !temp_arr[0].nil?
                                          name = temp_arr[0].gsub('"', '')
                                      end
                                      
                                      if !temp_arr[1].nil?
                                          value = temp_arr[1].gsub('"', '')
                                      else
                                          value = ""
                                      end
                                      
                                      if !temp_arr[0].nil?
                                          cookies_hash[name] = value
                                      end
                                      
                                      cookies_hash[name] = value
                                  end
                                  
                              end
                            
                            
                              @db2[:events].insert_one({ 
                                                  type: csv[0].to_s, 
                                                  user_id: csv[1].to_s,
                                                  cookie_id: csv[2].to_s,
                                                  tag_version: csv[3].to_s,
                                                  company_id: csv[4].to_i,
                                                  host: csv[5].to_s,
                                                  referer: csv[6].to_s,
                                                  current_page: csv[7].to_s,
                                                  ip: csv[8],
                                                  country: csv[9].to_s,
                                                  city: csv[10].to_s,
                                                  variant: csv[11].to_s,
                                                  user_agent: csv[12].to_s,
                                                  
                                                  
                                                  category: csv[13].to_s,
                                                  action: csv[14].to_s,
                                                  label: csv[15].to_s,
                                                  value: csv[16].to_s,
                                                  
                                                  
                                                  order_id: csv[17].to_s,
                                                  promotecode: csv[18].to_s,
                                                  confirmation_category: csv[19].to_s,
                                                  price: csv[20].to_f,
                                                  revenue: csv[21].to_f,
                                                  confirmation_name: csv[22].to_s,
                                                  sku: csv[23].to_s,
                                                  quantity: csv[24].to_s,
                                                  
                                                  cookies: cookies_hash,
                                                  other_param: JSON.parse(csv[26]),
                                                  check_time_status: csv[27].to_i,
                                                  check_event_status: csv[28].to_i,
                                                  check_page_count_status: csv[29].to_i,
                                                  check_url_status: csv[30].to_i,
                                                  check_confirmation_status: csv[31].to_i,
                                                  
                                                  check_status: csv[32].to_i,
                                                  date: csv[33].to_s
                                                  
                                                })
                              @db2.close() 
                              
                               
                          rescue Exception
                              @logger.info csv
                          end
                      end
                    
                      # File.delete(all_files_p) if File.exist?(all_files_p)
                      
                  end
                  
              rescue Exception
                  # # File.delete(all_files_p) if File.exist?(all_files_p)
              end
          end
          
      # rescue Exception
#           
          # @logger.info "get missing event file error"
#           
      # end
      
      
      @logger.info "done get missing event file"
      data = {:message => "get missing event file", :status => "true"}
      return render :json => data, :status => :ok
  end
  
  
  
  
  
  
  
  def cleanclickfile
      begin
      @all_click_files = Dir.glob('/home/bmg/worker/public/export_click/*')
      
      file_year = (Time.now - 1.day).to_date.strftime("%Y")
      file_month = (Time.now - 1.day).to_date.strftime("%m")
      file_day = (Time.now - 1.day).to_date.strftime("%d")
       
      file_date = file_year + "-" + file_month + "-" + file_day
      
      @all_click_files.each do |all_files_p|
          if all_files_p.to_s.include?(file_date)
              File.delete(all_files_p) if File.exist?(all_files_p)
          end
      end
      rescue Exception
      end
      data = {:message => "clean click file", :clean_day => file_date, :status => "true"}
      return render :json => data, :status => :ok
  end
  
  
  
  def getmissingclickfile
      
      # begin
          
          @logger.info "run get missing click file"
          
          @one_hour_ago = Time.now - 1.hours
          @all_click_files = Dir.glob('/home/bmg/worker/public/export_click/*')
          name_datetime = @one_hour_ago.in_time_zone('Beijing').strftime("%Y-%m-%d-%H")
          
          # data_arr = []
          
          @all_click_files.each do |all_files_p|
              begin 
                  if !all_files_p.to_s.include?(name_datetime) && !all_files_p.to_s.include?("n_")
                    
                      @logger.info all_files_p
                      
                      # data_arr = []
                      
                      xlsx = Roo::Spreadsheet.open(all_files_p, extension: :xlsx)
                      xlsx.each_with_index do |csv, csv_index|
                          begin
                              @logger.info csv_index.to_s
                              
                              cookies_hash = {}
                              csv_cookies_array = []
                              
                              if csv[18].to_s != "{}"
                                  csv_cookies_array = csv[18].to_s.gsub('{', '').gsub('}', '').split(",")
                                  
                                  
                                  csv_cookies_array.each do |csv_cookies_array_d|
                                      temp_arr = csv_cookies_array_d.split("=>")
                                      
                                      if !temp_arr[0].nil?
                                          name = temp_arr[0].gsub('"', '')
                                      end
                                      
                                      if !temp_arr[1].nil?
                                          value = temp_arr[1].gsub('"', '')
                                      else
                                          value = ""
                                      end
                                      
                                      if !temp_arr[0].nil?
                                          cookies_hash[name] = value
                                      end
                                  end
                              end
                              
                              if csv[5].to_s == "sogou"
                                @type = "sogou"
                              elsif csv[5].to_s.include?("360")
                                @type = "360"
                              elsif csv[5].to_s.include?("baidu")
                                @type = "baidu"
                              elsif csv[5].to_s.include?("shenma")
                                @type = "shenma"
                              end
                              
                              
                              @db2[:clicks].insert_one({ 
                                                  id: csv[0].to_s, 
                                                  random_number: csv[1].to_i.to_s,
                                                  session_id: csv[2].to_s,
                                                  company_id: csv[3].to_i,
                                                  network_id: csv[4].to_i,
                                                  network_type: @type.to_s,
                                                  campaign_id: csv[6].to_i,
                                                  adgroup_id: csv[7].to_i,
                                                  keyword_id: csv[8].to_i,
                                                  ad_id: csv[9].to_i,
                                                  target_id: csv[10].to_s,
                                                  search_q: csv[11].to_s,
                                                  ip: csv[12],
                                                  country: csv[13].to_s,
                                                  city: csv[14].to_s,
                                                  variant: csv[15].to_s,
                                                  user_agent: csv[16].to_s,
                                                  device: csv[17].to_s,
                                                  cookies: cookies_hash,
                                                  date: csv[19].to_s,
                                                  referer: csv[20].to_s,
                                                  destination_url: csv[21].to_s
                                                })
                              @db2.close() 
                              
                              
                              
                              
                          rescue Exception
                              # @logger.info csv
                          end
                      end
                      
                      
                      
                      
                      # File.delete(all_files_p) if File.exist?(all_files_p)
                  
                  
                  
                  elsif !all_files_p.to_s.include?(name_datetime) && all_files_p.to_s.include?("n_")
                    
                    
                      # data_arr = []
                      
                      xlsx = Roo::Spreadsheet.open(all_files_p, extension: :xlsx)
                      xlsx.each_with_index do |csv, csv_index|
                          
                          begin
                              @logger.info csv_index.to_s
                              cookies_hash = {}
                              csv_cookies_array = []
                              
                              if csv[16].to_s != "{}"
                                  csv_cookies_array = csv[16].to_s.gsub('{', '').gsub('}', '').split(",")
                                  
                                  
                                  csv_cookies_array.each do |csv_cookies_array_d|
                                      temp_arr = csv_cookies_array_d.split("=>")
                                      
                                      if !temp_arr[0].nil?
                                          name = temp_arr[0].gsub('"', '')
                                      end
                                      
                                      if !temp_arr[1].nil?
                                          value = temp_arr[1].gsub('"', '')
                                      else
                                          value = ""
                                      end
                                      
                                      if !temp_arr[0].nil?
                                          cookies_hash[name] = value
                                      end
                                      
                                      cookies_hash[name] = value
                                  end
                                  
                              end
                                        
                                        
                              
                              if csv[4].to_s == "sogou"
                                @type = "sogou"
                              elsif csv[4].to_s.include?("360")
                                @type = "360"
                              elsif csv[4].to_s.include?("baidu")
                                @type = "baidu"
                              elsif csv[4].to_s.include?("shenma")
                                @type = "shenma"
                              end
                              
                             
                              @db2[:clicks].insert_one({
                                
                                            user_id: csv[0].to_s,
                                            cookie_id: csv[1].to_s,
                                            company_id: csv[2].to_i,
                                            network_id: csv[3].to_i,
                                            network_type: @type.to_s,
                                            campaign_id: csv[5].to_i,
                                            adgroup_id: csv[6].to_i,
                                            keyword_id: csv[7].to_i,
                                            ad_id: csv[8].to_i,
                                            search_q: csv[9].to_s,
                                            ip: csv[10],
                                            country: csv[11].to_s,
                                            city: csv[12].to_s,
                                            variant: csv[13].to_s,
                                            user_agent: csv[14].to_s,
                                            device: csv[15].to_s,
                                            cookies: cookies_hash,
                                            date: csv[17].to_s,
                                            referer: csv[18].to_s,
                                            destination_url: csv[19].to_s,
                                            check_time_status: csv[20].to_i,
                                            check_event_status: csv[21].to_i,
                                            check_page_count_status: csv[22].to_i,
                                            check_url_status: csv[23].to_i,
                                            check_confirmation_status: csv[24].to_i
                                            
                                          })
                                @db2.close()
                                
                            
                          rescue Exception
                              # @logger.info csv
                          end
                      end
                      
                      
                      
                      # File.delete(all_files_p) if File.exist?(all_files_p)
                      
                  end
              
              rescue Exception
                  # File.delete(all_files_p) if File.exist?(all_files_p)
              end
          end
          
      # rescue Exception
#           
          # @logger.info "get missing click file error"
#           
      # end
      
      @logger.info "done get missing click file"
      data = {:message => "get missing click file", :status => "true"}
      return render :json => data, :status => :ok
  end
  
  
  

  
  def cleanexportfile
    
      @all_export_files = Dir.glob('/home/bmg/worker/public/export_excel/*')
      
      # file_year = (Time.now - 1.day).to_date.strftime("%Y")
      # file_month = (Time.now - 1.day).to_date.strftime("%m")
      # file_day = (Time.now - 1.day).to_date.strftime("%d")
#       
      # file_date = file_year + "-" + file_month + "-" + file_day
      
      @all_export_files.each do |all_files_p|
          # if all_files_p.to_s.include?(file_date)
              File.delete(all_files_p) if File.exist?(all_files_p)
          # end
      end
      
      @all_export_files = Dir.glob('/home/bmg/worker/public/export_click/*')
      @all_export_files.each do |all_files_p|
          File.delete(all_files_p) if File.exist?(all_files_p)
      end
      
      data = {:message => "clean export", :status => "true"}
      return render :json => data, :status => :ok
  end
  
  
  
  def checktag
      @id = params[:id]
      
      
      if !@id.nil?
      
          @network = @db["network"].find('id' => @id.to_i)
          @db.close
          
          if @network.count.to_i >= 0
              @network.each do |network_d|
                  
                  db_name = "ad_" + network_d["type"].to_s + "_" + @id.to_s
                  text = ".adeqo."
                  
                  if network_d["type"].to_s == "sogou"
                      @db = @sogou_db
                  elsif network_d["type"].to_s == "baidu"
                      @db = @baidu_db
                  elsif network_d["type"].to_s == "360"
                      @db = @threesixty_db
                  elsif network_d["type"].to_s == "shenma"
                      @db = @baidu_db
                  end
                  
                  @url_ad_count = @db[db_name].find({ "$and" => [ {:visit_url => {'$regex' => '^((?!'+text+').)*$', '$options' => 'i'}}, {:visit_url => { '$ne' => "" }}] })
                  @db.close
                  @m_url_ad_count = @db[db_name].find({ "$and" => [ {:mobile_visit_url => {'$regex' => '^((?!'+text+').)*$', '$options' => 'i'}}, {:mobile_visit_url => { '$ne' => "" }} ] })
                  @db.close
                  
                  db_name = "keyword_" + network_d["type"].to_s + "_" + @id.to_s
                  
                  @url_keyword_count = @db[db_name].find({ "$and" => [ {:visit_url => {'$regex' => '^((?!'+text+').)*$', '$options' => 'i'}}, {:visit_url => { '$ne' => "" }} ] })
                  @db.close
                  @m_url_keyword_count = @db[db_name].find({ "$and" => [ {:mobile_visit_url => {'$regex' => '^((?!'+text+').)*$', '$options' => 'i'}}, {:mobile_visit_url => { '$ne' => "" }} ] })
                  @db.close
                  
                  
                  data = {:message => "done", :url_ad_count => @url_ad_count.count.to_i, :m_url_ad_count => @m_url_ad_count.count.to_i, :url_keyword_count => @url_keyword_count.count.to_i, :m_url_keyword_count => @m_url_keyword_count.count.to_i, :status => "true"}
                  return render :json => data, :status => :ok
                  
              end
          end
          
      else
          data = {:message => "no network", :status => "false"}
          return render :json => data, :status => :ok
      end            
  end
  
  def checkadtag
      @id = params[:id]
      api_login = 0
      fail_array = []
      
      if !@id.nil?
          @network = @db["network"].find('id' => @id.to_i)
          @db.close
          
          if @network.count.to_i >= 0
              @network.each do |network_d|
                  db_name = "ad_" + network_d["type"].to_s + "_" + @id.to_s
                  
                  if network_d["type"].to_s == "sogou"
                      @db = @sogou_db
                  elsif network_d["type"].to_s == "baidu"
                      @db = @baidu_db
                  elsif network_d["type"].to_s == "360"
                      @db = @threesixty_db
                  elsif network_d["type"].to_s == "shenma"
                      @db = @baidu_db
                  end
                  
                  text = ".adeqo."
                  
                  
                  # @url_ad_count = @db[db_name].find({:visit_url => {'$regex' => '^((?!'+text+').)*$', '$options' => 'i'}, 'visit_url' => { '$ne' => "" }})
                  # @db.close
                  # @m_url_ad_count = @db[db_name].find({:mobile_visit_url => {'$regex' => '^((?!'+text+').)*$', '$options' => 'i'}, 'mobile_visit_url' => { '$ne' => "" }})
                  # @db.close
                  
                  
                  
                  @url_ad_count = @db[db_name].find({ "$and" => [ {:visit_url => {'$regex' => '^((?!'+text+').)*$', '$options' => 'i'}}, {:visit_url => { '$ne' => "" }}] })
                  @db.close
                  @m_url_ad_count = @db[db_name].find({ "$and" => [ {:mobile_visit_url => {'$regex' => '^((?!'+text+').)*$', '$options' => 'i'}}, {:mobile_visit_url => { '$ne' => "" }} ] })
                  @db.close
                  
                  # data = {:all_url_ad_count => @url_ad_count.count.to_i, :test => @m_url_ad_count, :status => "false"}
                  # return render :json => data, :status => :ok
                  
                  @tracking_type = network_d["tracking_type"].to_s
                  @ad_redirect = network_d["ad_redirect"].to_s
                  @keyword_redirect = network_d["keyword_redirect"].to_s
                  @company_id = network_d["company_id"].to_s
                  @cookie_length = network_d["cookie_length"].to_s
                  
                  temp_network_name = network_d["name"]
                  
                  
                  if network_d["type"].to_s == "shenma"
                    
                      service = "account"
                      method = "getAccount"
                      
                      json = {'header' => { 
                                              'token' => network_d["api_token"].to_s,
                                              'username' => network_d["username"].to_s,
                                              'password' => network_d["password"].to_s
                                          },
                               'body'  => {
                                              'requestData' => ["account_all"]
                                          }
                              }
                              
                              
                      @account_info = shenma_api(service,method,json)
                      
                      if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                          @header = @account_info["header"]
                          @remain_quote = @header["leftQuota"]
                          
                          if @remain_quote.to_i <= 500
                              data = {:message => "<p>Shenma Account " + network_d["name"] + " doesn't have enough quota.</p>", :status => "false"}
                              return render :json => data, :status => :ok
                          end
                          
                          
                          if @url_ad_count.count.to_i > 0
                              @url_ad_count.each do |ad_d|
                                  if @remain_quote.to_i <= 500
                                      data = {:message => "<p>Shenma Account " + network_d["name"].to_s + " doesn't have enough quota.</p>", :status => "false"}
                                      return render :json => data, :status => :ok
                                  else
                                    
                                      begin
                                          @final_url = ad_d["visit_url"]
                                          
                                          if ad_d["visit_url"].to_s != ""        
                                              if !@final_url.to_s.include?(".adeqo.")
                                                  @temp_final_url = @final_url
                                                  @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+ad_d["network_id"].to_s
                                                  @final_url = @final_url + "&campaign_id="+ad_d["campaign_id"].to_s+"&adgroup_id="+ad_d["adgroup_id"].to_s+"&ad_id="+ad_d["ad_id"].to_s+"&keyword_id=0"
                                                  @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                                  @final_url = @final_url + "&device=pc"
                                                  @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                              end
                                          end
                                          
                                          requesttypearray = [] 
                                          requesttype = {}
                                          requesttype[:creativeId]    =     ad_d["ad_id"].to_i
                                          requesttype[:destinationUrl]    =     @final_url
                                          
                                          @logger.info requesttype
                                           
                                          requesttypearray << requesttype
                                          
                                          service = "creative"
                                          method = "updateCreative"
                                          
                                          json = {'header' => { 
                                                      'token' => network_d["api_token"].to_s,
                                                      'username' => network_d["username"].to_s,
                                                      'password' => network_d["password"].to_s 
                                                    },
                                               'body'  => {
                                                      'creativeTypes' => requesttypearray
                                                    }
                                              }       
                                              
                                          @update_info = shenma_api(service,method,json)
                                                                                                               
                                          @logger.info @update_info 
                                          
                                          @header = @update_info["header"]
                                          @remain_quote = @header["leftQuota"]
                                          
                                          # if @msg.to_s.downcase == "success"
                                          if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                                                  
                                              @db[db_name].find('ad_id' => ad_d['ad_id'].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s})
                                              @db.close
                                              
                                          # else
                                              # fail_array << ad_d["cpc_idea_id"]
                                          # end
                                          end
                                      rescue Exception
                                          fail_array << ad_d["ad_id"]
                                      end
                                  end
                              end
                          end
                          
                      else
                      
                          data = {:message => "<p>Shenma Account " + network_d["name"].to_s + "" + @account_info["header"]["failures"][0]["message"].to_s, :status => "false"}
                          return render :json => data, :status => :ok
                      end
                    
                  elsif network_d["type"].to_s == "sogou"
                    
                      sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                      sogou_result = @sogou_api.call(:get_account_info)
                      
                      if sogou_result.header[:res_header][:desc].to_s != "success"
                          data = {:message => "<p>Sogou Account " + network_d["name"].to_s + "" + sogou_result.header[:res_header][:failures][:message].to_s, :status => "false"}
                          return render :json => data, :status => :ok
                      end
                      
                      @remain_quote = sogou_result.header[:res_header][:rquota].to_i
                      if @remain_quote.to_i <= 500
                          data = {:message => "<p>Sogou Account " + network_d["name"].to_s + " doesn't have enough quota.</p>", :status => "false"}
                          return render :json => data, :status => :ok
                      end
                      
                      sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcIdeaService")
                      
                      
                      if @url_ad_count.count.to_i > 0
                          @url_ad_count.each do |ad_d|
                              if @remain_quote.to_i <= 500
                                  data = {:message => "<p>Sogou Account " + network_d["name"].to_s + " doesn't have enough quota.</p>", :status => "false"}
                                  return render :json => data, :status => :ok
                              else
                                
                                  begin
                                      @final_url = ad_d["visit_url"]
                                      
                                      if ad_d["visit_url"].to_s != ""        
                                          if !@final_url.to_s.include?(".adeqo.")
                                              @temp_final_url = @final_url
                                              @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+ad_d["network_id"].to_s
                                              @final_url = @final_url + "&campaign_id="+ad_d["cpc_plan_id"].to_s+"&adgroup_id="+ad_d["cpc_grp_id"].to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                              @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                              @final_url = @final_url + "&device=pc"
                                              @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                          end
                                      end
                                      
          
                                      requesttypearray = [] 
                                      requesttype = {}
                                      requesttype[:cpcIdeaId]    =     ad_d['cpc_idea_id'].to_i
                                      requesttype[:cpcGrpId]    =     0
                                      requesttype[:visitUrl]    =     @final_url
                                      
                                      requesttypearray << requesttype
                                      
                                      @update_status = @sogou_api.call(:update_cpc_idea, message: { cpcIdeaTypes: requesttypearray })
                                                                                                             
                                      @header = @update_status.header.to_hash
                                      @msg = @header[:res_header][:desc]
                                      @remain_quote = @header[:res_header][:rquota]
                                      
                                      @logger.info requesttypearray
                                      @logger.info @header
                                      @logger.info @msg
                                      
                                      # if @msg.to_s.downcase == "success"
                                              
                                          @db[db_name].find('cpc_idea_id' => ad_d['cpc_idea_id'].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s})
                                          @db.close
                                          
                                      # else
                                          # fail_array << ad_d["cpc_idea_id"]
                                      # end
                                  rescue Exception
                                      fail_array << ad_d["cpc_idea_id"]
                                  end
                              end
                          end
                      end
                      
                      
                      if @m_url_ad_count.count.to_i > 0
                          @m_url_ad_count.each do |ad_d|
                              if @remain_quote.to_i <= 500
                                  data = {:message => "<p>Sogou Account " + network_d["name"].to_s + " doesn't have enough quota.</p>", :status => "false"}
                                  return render :json => data, :status => :ok
                              else
                                
                                  begin
                                      @m_final_url = ad_d["mobile_visit_url"]
                                      
                                      @logger.info @m_final_url
                                      
                                      if ad_d["mobile_visit_url"].to_s != ""
                                          if !@m_final_url.to_s.include?(".adeqo.")
                                              @temp_m_final_url = @m_final_url
                                              @m_final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+ad_d["network_id"].to_s
                                              @m_final_url = @m_final_url + "&campaign_id="+ad_d["cpc_plan_id"].to_s+"&adgroup_id="+ad_d["cpc_grp_id"].to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                              @m_final_url = @m_final_url + "&cookie="+@cookie_length.to_s
                                              @m_final_url = @m_final_url + "&device=mobile"
                                              @m_final_url = @m_final_url + "&tv=v1&durl="+CGI.escape(@temp_m_final_url.to_s)
                                          end
                                      end
                                      
                                      # @logger.info @m_final_url
          
                                      requesttypearray = [] 
                                      requesttype = {}
                                      requesttype[:cpcIdeaId]    =     ad_d['cpc_idea_id'].to_i
                                      requesttype[:cpcGrpId]    =     0
                                      requesttype[:mobileVisitUrl]    =     @m_final_url
                                      
                                      requesttypearray << requesttype
                                      
                                      @update_status = @sogou_api.call(:update_cpc_idea, message: { cpcIdeaTypes: requesttypearray })
                                                                                                             
                                      @header = @update_status.header.to_hash
                                      @msg = @header[:res_header][:desc]
                                      @remain_quote = @header[:res_header][:rquota]
                                      
                                      @logger.info requesttypearray
                                      @logger.info @header
                                      @logger.info @msg
                                      
                                      # if @msg.to_s.downcase == "success"
                                              
                                          @db[db_name].find('cpc_idea_id' => ad_d['cpc_idea_id'].to_i).update_one('$set'=> { 'mobile_visit_url' => @m_final_url.to_s })
                                          @db.close
                                          
                                      # else
                                          # fail_array << ad_d['cpc_idea_id']
                                      # end
                                  rescue Exception
                                      fail_array << ad_d['cpc_idea_id']
                                  end
                              end
                          end
                      end
                      
                      
                  elsif network_d["type"].to_s == "360"
                    
                    
                      @username = network_d["username"]
                      @password = network_d["password"]
                      @apitoken = network_d["api_token"]
                      @apisecret = network_d["api_secret"]
                                           
                      login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                      @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                      
                      if @refresh_token.nil?
                          data = {:message => "API Info not correct", :status => "false"}
                          return render :json => data, :status => :ok
                      end
                      
                      @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "account", "getInfo")
                      @remain_quote = @response.headers["quotaremain"].to_i
                      
                      if @remain_quote.to_i <= 500
                          data = {:message => "<p>360 Account " + network_d["name"] + " doesn't have enough quota.</p>", :status => "false"}
                          return render :json => data, :status => :ok
                      end
                      
                      
                      if @url_ad_count.count.to_i > 0
                          @url_ad_count.each do |ad_d|
                                  
                                  if @remain_quote.to_i <= 500
                                      data = {:message => "<p>360 Account " + network_d["name"] + " doesn't have enough quota.</p>", :status => "false"}
                                      return render :json => data, :status => :ok
                                  else
                                      
                                      begin
                                          requesttypearray = []
                                          
                                          @final_url = ad_d["visit_url"]
                                              
                                          if ad_d["visit_url"].to_s != ""
                                              if !@final_url.to_s.include?(".adeqo.")
                                                   @temp_m_final_url = @final_url
                                                    
                                                   @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+network_d["id"].to_s
                                                   @final_url = @final_url + "&campaign_id={planid}&adgroup_id={groupid}&ad_id={creativeid}&keyword_id={wordid}"
                                                   @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                                   @final_url = @final_url + "&device=pc"
                                                   @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_m_final_url.to_s)
                                              end
                                          end      
                                          
                                          
                                          request_str = '{"id":'+ad_d["ad_id"].to_s+',"destinationUrl":"'+@final_url+'"}'
                                      
                                          requesttypearray << request_str
                                          request = '['+requesttypearray.join(",")+']'
                                          
                                          body = { 
                                              'creatives' => request
                                          }
                                          @logger.info request
                                          
                                          @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "creative", "update", body)
                                          @affectedRecords = @update_res["creative_update_response"]["affectedRecords"]
                                          @remain_quote = @response.headers["quotaremain"].to_i
                                          
                                          @logger.info @update_res["creative_update_response"]
                                          @logger.info @remain_quote.to_s
                                          
                                          if !@update_res["creative_update_response"]["failures"].nil?
                                              fail_array << ad_d["ad_id"]
                                          else
                                              @db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s  })
                                              @db.close
                                          end
                                      
                                      rescue Exception
                                          fail_array << ad_d["ad_id"]
                                      end
                                  end
                          end
                      end
                      
                      
                      
                      if @m_url_ad_count.count.to_i > 0
                          @m_url_ad_count.each do |ad_d|
                                  
                                  if @remain_quote.to_i <= 500
                                      data = {:message => "<p>360 Account " + network_d["name"] + " doesn't have enough quota.</p>", :status => "false"}
                                      return render :json => data, :status => :ok
                                  else
                                      
                                      begin
                                          requesttypearray = []
                                          
                                          @m_final_url = ad_d["mobile_visit_url"]
                                          
                                          # @logger.info @m_final_url
                                              
                                          if ad_d["mobile_visit_url"].to_s != ""
                                              if !@m_final_url.to_s.include?(".adeqo.")
                                                   @temp_final_url = @m_final_url
                                                    
                                                   @m_final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+network_d["id"].to_s
                                                   @m_final_url = @m_final_url + "&campaign_id={planid}&adgroup_id={groupid}&ad_id={creativeid}&keyword_id={wordid}"
                                                   @m_final_url = @m_final_url + "&cookie="+@cookie_length.to_s
                                                   @m_final_url = @m_final_url + "&device=mobile"
                                                   @m_final_url = @m_final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                              end
                                          end      
                                          
                                          
                                          request_str = '{"id":'+ad_d["ad_id"].to_s+',"mobileDestinationUrl":"'+@m_final_url+'"}'
                                      
                                          requesttypearray << request_str
                                          request = '['+requesttypearray.join(",")+']'
                                          
                                          body = { 
                                              'creatives' => request
                                          }
                                          @logger.info request
                                          
                                          @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "creative", "update", body)
                                          @affectedRecords = @update_res["creative_update_response"]["affectedRecords"]
                                          @remain_quote = @response.headers["quotaremain"].to_i
                                          
                                          @logger.info @update_res["creative_update_response"]
                                          @logger.info @remain_quote.to_s
                                          
                                          if !@update_res["creative_update_response"]["failures"].nil?
                                              fail_array << ad_d["ad_id"]
                                          else
                                              @db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'mobile_visit_url' => @m_final_url.to_s  })
                                              @db.close
                                          end
                                      
                                      rescue Exception
                                          fail_array << ad_d["ad_id"]
                                      end
                                  end
                          end
                      end
                      
                      
                      
                  end
                  
              end
          end
      end
      
      
      data = {:message => "done", :fail_array => fail_array.count.to_i, :url_ad_count => @url_ad_count.count.to_i, :m_url_ad_count => @m_url_ad_count.count.to_i, :url_ad_count_first => @m_url_ad_count.first, :m_url_ad_count_first => @m_url_ad_count.first, :status => "true"}
      return render :json => data, :status => :ok
  end
  
  
  def checkkeywordtag
    
      @id = params[:id]
      api_login = 0
      fail_array = []
      
      
      if !@id.nil?
          @network = @db["network"].find('id' => @id.to_i)
          @db.close
          
          if @network.count.to_i >= 0
            
              @network.each do |network_d|
                
                  db_name = "keyword_" + network_d["type"].to_s + "_" + @id.to_s
                  
                  if network_d["type"].to_s == "sogou"
                      @db = @sogou_db
                  elsif network_d["type"].to_s == "baidu"
                      @db = @baidu_db
                  elsif network_d["type"].to_s == "360"
                      @db = @threesixty_db
                  elsif network_d["type"].to_s == "shenma"
                      @db = @baidu_db
                  end
                  
                  text = ".adeqo."
                  
                  
                  
                  # @url_keyword_count = @db[db_name].find({:visit_url => {'$regex' => '^((?!'+text+').)*$', '$options' => 'i'}, 'visit_url' => { '$ne' => "" }})
                  # @db.close
                  # @m_url_keyword_count = @db[db_name].find({:mobile_visit_url => {'$regex' => '^((?!'+text+').)*$', '$options' => 'i'}, 'mobile_visit_url' => { '$ne' => "" }})
                  # @db.close
                  
                  
                  
                  @url_keyword_count = @db[db_name].find({ "$and" => [ {:visit_url => {'$regex' => '^((?!'+text+').)*$', '$options' => 'i'}}, {:visit_url => { '$ne' => "" }} ] })
                  @db.close
                  @m_url_keyword_count = @db[db_name].find({ "$and" => [ {:mobile_visit_url => {'$regex' => '^((?!'+text+').)*$', '$options' => 'i'}}, {:mobile_visit_url => { '$ne' => "" }} ] })
                  @db.close
                  
                  # data = {:all_url_keyword_count => @all_url_keyword_count.count.to_i, :test => @all_url_keyword_count, :status => "false"}
                  # return render :json => data, :status => :ok
                  
                
                  @tracking_type = network_d["tracking_type"].to_s
                  @ad_redirect = network_d["ad_redirect"].to_s
                  @keyword_redirect = network_d["keyword_redirect"].to_s
                  @company_id = network_d["company_id"].to_s
                  @cookie_length = network_d["cookie_length"].to_s
                  
                  temp_network_name = network_d["name"]
                  
                  
                  
                  if network_d["type"].to_s == "shenma"
                      
                      service = "account"
                      method = "getAccount"
                      
                      json = {'header' => { 
                                              'token' => network_d["api_token"].to_s,
                                              'username' => network_d["username"].to_s,
                                              'password' => network_d["password"].to_s
                                          },
                               'body'  => {
                                              'requestData' => ["account_all"]
                                          }
                              }
                              
                              
                      @account_info = shenma_api(service,method,json)
                    
                      if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                          @header = @account_info["header"]
                          @remain_quote = @header["leftQuota"]
                          
                          
                          if @remain_quote.to_i <= 500  
                              data = {:message => "<p>Shenma Account " + network_d["name"].to_s + " doesn't have enough quota.</p>", :status => "false"}
                              return render :json => data, :status => :ok
                          end
                          
                          
                          if @url_keyword_count.count.to_i > 0
                              @url_keyword_count.each do |keyword_d|
                                  if @remain_quote.to_i <= 500
                                      data = {:message => "<p>Shenma Account " + network_d["name"].to_s + " doesn't have enough quota.</p>", :status => "false"}
                                      return render :json => data, :status => :ok
                                  else
                                    
                                      begin
                                          @final_url = keyword_d["visit_url"]
                                          
                                          if keyword_d["visit_url"].to_s != ""        
                                              if !@final_url.to_s.include?(".adeqo.")
                                                  @temp_final_url = @final_url
                                                  @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+keyword_d["network_id"].to_s
                                                  @final_url = @final_url + "&campaign_id="+keyword_d["campaign_id"].to_s+"&adgroup_id="+keyword_d["adgroup_id"].to_s+"&ad_id=0&keyword_id="+keyword_d["keyword_id"].to_s
                                                  @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                                  @final_url = @final_url + "&device=pc"
                                                  @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                              end
                                          end
                                          
              
                                          requesttypearray = [] 
                                          requesttype = {}
                                          requesttype[:keywordId]    =     keyword_d['keyword_id'].to_i
                                          requesttype[:destinationUrl]    =     @final_url
                                          
                                          requesttypearray << requesttype
                                          
                                          service = "keyword"
                                          method = "updateKeyword"
                                          
                                          json = {'header' => { 
                                                      'token' => network_d["api_token"].to_s,
                                                      'username' => network_d["username"].to_s,
                                                      'password' => network_d["password"].to_s 
                                                    },
                                               'body'  => {
                                                      'keywordTypes' => requesttypearray
                                                    }
                                              }       
                                              
                                          @update_info = shenma_api(service,method,json)
                                                                    
                                          @logger.info @update_info
                                          
                                          @header = @update_info["header"]
                                          @remain_quote = @header["leftQuota"] 
                                          
                                          if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                                                  
                                              @db[db_name].find('keyword_id' => keyword_d['keyword_id'].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s})
                                              @db.close
                                              
                                          else
                                              fail_array << keyword_d["keyword_id"]
                                          end
                                      rescue Exception
                                          fail_array << keyword_d["keyword_id"]
                                      end
                                  end
                              end
                          end
                          
                          
                          
                      else
                          data = {:message => "<p>Shenma Account " + network_d["name"].to_s + "" + @account_info["header"]["failures"][0]["message"].to_s, :status => "false"}
                          return render :json => data, :status => :ok
                      end
                    
                    
                  elsif network_d["type"].to_s == "sogou"
                    
                      sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                      sogou_result = @sogou_api.call(:get_account_info)
                      
                      if sogou_result.header[:res_header][:desc].to_s != "success"
                          data = {:message => "<p>Sogou Account " + network_d["name"].to_s + "" + sogou_result.header[:res_header][:failures][:message].to_s, :status => "false"}
                          return render :json => data, :status => :ok
                      end
                      
                      @remain_quote = sogou_result.header[:res_header][:rquota].to_i
                      if @remain_quote.to_i <= 500
                          data = {:message => "<p>Sogou Account " + network_d["name"].to_s + " doesn't have enough quota.</p>", :status => "false"}
                          return render :json => data, :status => :ok
                      end
                      
                      sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcService")
                      
                      
                      
                      
                      if @url_keyword_count.count.to_i > 0
                          @url_keyword_count.each do |keyword_d|
                              if @remain_quote.to_i <= 500
                                  data = {:message => "<p>Sogou Account " + network_d["name"].to_s + " doesn't have enough quota.</p>", :status => "false"}
                                  return render :json => data, :status => :ok
                              else
                                
                                  begin
                                      @final_url = keyword_d["visit_url"]
                                      
                                      if keyword_d["visit_url"].to_s != ""        
                                          if !@final_url.to_s.include?(".adeqo.")
                                              @temp_final_url = @final_url
                                              @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+keyword_d["network_id"].to_s
                                              @final_url = @final_url + "&campaign_id="+keyword_d["cpc_plan_id"].to_s+"&adgroup_id="+keyword_d["cpc_grp_id"].to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                              @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                              @final_url = @final_url + "&device=pc"
                                              @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                          end
                                      end
                                      
          
                                      requesttypearray = [] 
                                      requesttype = {}
                                      requesttype[:cpcId]    =     keyword_d['keyword_id'].to_i
                                      requesttype[:visitUrl]    =     @final_url
                                      
                                      requesttypearray << requesttype
                                      
                                      @update_status = @sogou_api.call(:update_cpc, message: { cpcTypes: requesttypearray })
                                                                                                             
                                      @header = @update_status.header.to_hash
                                      @msg = @header[:res_header][:desc]
                                      @remain_quote = @header[:res_header][:rquota]
                                                                                                           
                                      @logger.info @header
                                      @logger.info @msg
                                      
                                      if @msg.to_s.downcase == "success"
                                              
                                          @db[db_name].find('keyword_id' => keyword_d['keyword_id'].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s})
                                          @db.close
                                          
                                      else
                                          fail_array << keyword_d["keyword_id"]
                                      end
                                  rescue Exception
                                      fail_array << keyword_d["keyword_id"]
                                  end
                              end
                          end
                      end
                      
                      
                      if @m_url_keyword_count.count.to_i > 0
                          @m_url_keyword_count.each do |keyword_d|
                              if @remain_quote.to_i <= 500
                                  data = {:message => "<p>Sogou Account " + network_d["name"].to_s + " doesn't have enough quota.</p>", :status => "false"}
                                  return render :json => data, :status => :ok
                              else
                                
                                  begin
                                      @m_final_url = keyword_d["mobile_visit_url"]
                                      
                                      if keyword_d["mobile_visit_url"].to_s != ""
                                          if !@m_final_url.to_s.include?(".adeqo.")
                                              @temp_m_final_url = @m_final_url
                                              @m_final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+keyword_d["network_id"].to_s
                                              @m_final_url = @m_final_url + "&campaign_id="+keyword_d["cpc_plan_id"].to_s+"&adgroup_id="+keyword_d["cpc_grp_id"].to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                              @m_final_url = @m_final_url + "&cookie="+@cookie_length.to_s
                                              @m_final_url = @m_final_url + "&device=pc"
                                              @m_final_url = @m_final_url + "&tv=v1&durl="+CGI.escape(@temp_m_final_url.to_s)
                                          end
                                      end
          
                                      requesttypearray = [] 
                                      requesttype = {}
                                      requesttype[:cpcId]    =     keyword_d['keyword_id'].to_i
                                      requesttype[:mobileVisitUrl] =  @m_final_url
                                      
                                      requesttypearray << requesttype
                                      
                                      @update_status = @sogou_api.call(:update_cpc, message: { cpcTypes: requesttypearray })
                                                                                                             
                                      @header = @update_status.header.to_hash
                                      @msg = @header[:res_header][:desc]
                                      @remain_quote = @header[:res_header][:rquota]
                                                                                                           
                                      @logger.info @header
                                      @logger.info @msg
                                      
                                      if @msg.to_s.downcase == "success"
                                              
                                          @db[db_name].find('keyword_id' => keyword_d['keyword_id'].to_i).update_one('$set'=> { 'mobile_visit_url' => @m_final_url.to_s })
                                          @db.close
                                          
                                      else
                                          fail_array << keyword_d["keyword_id"]
                                      end
                                  rescue Exception
                                      fail_array << keyword_d["keyword_id"]
                                  end
                              end
                          end
                      end
                      
                  elsif network_d["type"].to_s == "360"
                    
                      @username = network_d["username"]
                      @password = network_d["password"]
                      @apitoken = network_d["api_token"]
                      @apisecret = network_d["api_secret"]
                                           
                      login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                      @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                      
                      if @refresh_token.nil?
                          data = {:message => "API Info not correct", :status => "false"}
                          return render :json => data, :status => :ok
                      end
                      
                      @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "account", "getInfo")
                      @remain_quote = @response.headers["quotaremain"].to_i
                      
                      if @remain_quote.to_i <= 500
                          data = {:message => "<p>360 Account " + network_d["name"] + " doesn't have enough quota.</p>", :status => "false"}
                          return render :json => data, :status => :ok
                      end
                      
                      
                      if @url_keyword_count.count.to_i > 0
                          @url_keyword_count.each do |keyword_d|
                                  
                                  if @remain_quote.to_i <= 500
                                      data = {:message => "<p>360 Account " + network_d["name"] + " doesn't have enough quota.</p>", :status => "false"}
                                      return render :json => data, :status => :ok
                                  else
                                      
                                      begin
                                          requesttypearray = []
                                          
                                          @final_url = keyword_d["visit_url"]
                                              
                                          if keyword_d["visit_url"].to_s != ""
                                              if !@final_url.to_s.include?(".adeqo.")
                                                   @temp_final_url = @final_url
                                                    
                                                   @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+network_d["id"].to_s
                                                   @final_url = @final_url + "&campaign_id={planid}&adgroup_id={groupid}&ad_id={creativeid}&keyword_id="+keyword_d["keyword_id"].to_s
                                                   @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                                   @final_url = @final_url + "&device=pc"
                                                   @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                              end
                                          end      
                                          
                                          
                                          request_str = '{"id":'+keyword_d["keyword_id"].to_s+',"url":"'+@final_url+'"}'
                                      
                                          requesttypearray << request_str
                                          request = '['+requesttypearray.join(",")+']'
                                          
                                          body = { 
                                              'keywords' => request
                                          }
                                          @logger.info request
                                          
                                          @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "keyword", "update", body)
                                          @affectedRecords = @update_res["keyword_update_response"]["affectedRecords"]
                                          @remain_quote = @response.headers["quotaremain"].to_i
                                          
                                          @logger.info @update_res
                                          @logger.info @remain_quote.to_s
                                          
                                          if !@update_res["keyword_update_response"]["failures"].nil?
                                              fail_array << keyword_d["keyword_id"]
                                          else
                                              @db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s  })
                                              @db.close
                                          end
                                      
                                      rescue Exception
                                          fail_array << keyword_d["keyword_id"]
                                      end
                                  end
                          end
                      end
                      
                      if @m_url_keyword_count.count.to_i > 0
                          @m_url_keyword_count.each do |keyword_d|
                                  
                                  if @remain_quote.to_i <= 500
                                      data = {:message => "<p>360 Account " + network_d["name"] + " doesn't have enough quota.</p>", :status => "false"}
                                      return render :json => data, :status => :ok
                                  else
                                      
                                      begin
                                          requesttypearray = []
                                          
                                          @m_final_url = keyword_d["mobile_visit_url"]
                                          
                                          if keyword_d["mobile_visit_url"].to_s != ""                
                                              if !@m_final_url.to_s.include?(".adeqo.")
                                                  @temp_m_final_url = @m_final_url
                                                  
                                                  @m_final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+network_d["id"].to_s
                                                  @m_final_url = @m_final_url + "&campaign_id={planid}&adgroup_id={groupid}&ad_id={creativeid}&keyword_id="+keyword_d["keyword_id"].to_s
                                                  @m_final_url = @m_final_url + "&cookie="+@cookie_length.to_s
                                                  @m_final_url = @m_final_url + "&device=mobile"
                                                  @m_final_url = @m_final_url + "&tv=v1&durl="+CGI.escape(@temp_m_final_url.to_s)
                                              end
                                          end
                                          
                                          request_str = '{"id":'+keyword_d["keyword_id"].to_s+',"mobileUrl":"'+@m_final_url+'"}'
                                      
                                          requesttypearray << request_str
                                          request = '['+requesttypearray.join(",")+']'
                                          
                                          body = { 
                                              'keywords' => request
                                          }
                                          @logger.info request
                                          
                                          @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "keyword", "update", body)
                                          @affectedRecords = @update_res["keyword_update_response"]["affectedRecords"]
                                          @remain_quote = @response.headers["quotaremain"].to_i
                                          
                                          @logger.info @update_res
                                          @logger.info @remain_quote.to_s
                                          
                                          if !@update_res["keyword_update_response"]["failures"].nil?
                                              fail_array << keyword_d["keyword_id"]
                                          else
                                              @db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> {'mobile_visit_url' => @m_final_url.to_s  })
                                              @db.close
                                          end
                                      
                                      rescue Exception
                                          fail_array << keyword_d["keyword_id"]
                                      end
                                  end
                          end
                      end
                  end
              end
              
              
              
          end
      end
      
      
      data = {:message => "done", :fail_array => fail_array.count.to_i, :url_keyword_count => @url_keyword_count.count.to_i, :m_url_keyword_count => @m_url_keyword_count.count.to_i, :url_keyword_count_first => @url_keyword_count.first, :m_url_keyword_count_first => @m_url_keyword_count.first, :status => "true"}
      return render :json => data, :status => :ok
  end
  
  def cleanadvancedsearchfile
      @all_files = Dir.glob('/home/bmg/worker/public/advancedsearch/download/*')
      
      file_year = (Time.now - 14.day).to_date.strftime("%Y")
      file_month = (Time.now - 14.day).to_date.strftime("%m")
      file_day = (Time.now - 14.day).to_date.strftime("%d")
      
      file_date = file_year + "-" + file_month + "-" + file_day 
      
      @all_files.each do |all_files_p|
          if all_files_p.to_s.include?(file_date)
              File.delete(all_files_p) if File.exist?(all_files_p)
          end
      end
      
      data = {:message => "clean advancedsearch",:cleanday => file_date, :status => "true"}
      return render :json => data, :status => :ok
  end
  
  def cleanlogfile
      @all_log_files = Dir.glob('/datadrive/*')
      
      file_year = (Time.now - 1.month).to_date.strftime("%Y")
      file_month = (Time.now - 1.month).to_date.strftime("%m")
      
      file_date = file_year + "-" + file_month 
      
      @all_log_files.each do |all_files_p|
          if all_files_p.to_s.include?(file_date) && all_files_p.to_s.include?("logfile")
              File.delete(all_files_p) if File.exist?(all_files_p)
          end
      end
      
      data = {:message => "clean log", :status => "true"}
      return render :json => data, :status => :ok
  end
  
  
  def cleanbulkfile
      
      @onhold_file= @db2["bulkjob"].find({ "$or" => [{:status => 3}, {:status => 5}] })
      @db2.close()
      
      if @onhold_file.count.to_i > 0
          @onhold_file.each do |onhold_file_p|
            
              range = (@now.to_date - onhold_file_p["request_date"].to_date).to_i
              
              if range >= 7
                  deladdbulkfile(onhold_file_p["file_id"])
                  deleditbulkfile(onhold_file_p["file_id"])
                  
                  @db2["bulkjob"].find('_id' => BSON::ObjectId.from_string(onhold_file_p["_id"])).update_one('$set'=> { 'msg' => "Errors occurred during the processing. Error report is no longer available."})
                  @db2.close()
              end  
              
          end
      end
      
      @all_files = Dir.glob('/home/bmg/worker/public/bulk/download/*')
      @all_files.each do |all_files_p|
        
          file_id_array = all_files_p.split("/")
          last_file_array = file_id_array.last.split(".")
          file_id = last_file_array.first
          
          range = (@now.to_date - File.mtime(all_files_p).to_date).to_i
          
          if range >= 7
              
              File.delete(all_files_p) if File.exist?(all_files_p)
              
              @db2["bulkjob"].find('file_id' => file_id.to_s).update_one('$set'=> { 'msg' => "Errors occurred during the processing. Error report is no longer available."})
              @db2.close()
          end
      end
      
      data = {:message => "clean bulk file", :status => "true"}
      return render :json => data, :status => :ok
  end
  
  
  def movebulkfile(current_filepath,filename)
    
      destiny_file = "/home/bmg/worker/public/bulk/download/"+ filename + ".xlsx"
      FileUtils.move current_filepath, destiny_file
      
  end
  
  def deladdbulkfile(fileid)
      @all_files = Dir.glob('/datadrive/tmp/bulk/add/*')
      @all_files.each do |all_files_p|
          if all_files_p.to_s.include?(fileid)
              File.delete(all_files_p) if File.exist?(all_files_p)
          end
      end
  end
  
  def deleditbulkfile(fileid)
      @all_files = Dir.glob('/datadrive/tmp/bulk/edit/*')
      @all_files.each do |all_files_p|
          if all_files_p.to_s.include?(fileid)
              File.delete(all_files_p) if File.exist?(all_files_p)
          end
      end
  end
  
  
  def bulkreset(objectid, type)
    
      bulk_job = @db2["bulkjob"].find('_id' => BSON::ObjectId.from_string(objectid))
      
      
          
      if bulk_job.count.to_i == 1
        
          bulk_job.each do |bulk_job_d|
              if bulk_job_d['run_time'].to_i >= 3
                  
                  download_path = "http://china.adeqo.com:"+@port.to_s+"/bulk/download/"
                  
                  if type.to_s == "add"
                      move_download_path = "/datadrive/tmp/bulk/add/"+ bulk_job_d['file_id'] + ".xlsx"
                  else
                      move_download_path = "/datadrive/tmp/bulk/edit/"+ bulk_job_d['file_id'] + ".xlsx"
                  end
      
                  exact_file_path = "/home/bmg/worker/public/bulk/download/"+bulk_job_d['file_id'].to_s+"/.xlsx"
                  if File.exist?(exact_file_path)
                      bulkerror(bulk_job_d['_id'],"API current not available. Please reupload later. <a target='_blank' href='"+download_path +""+ bulk_job_d['file_id']+".xlsx'> Download</a>")
                      movebulkfile(move_download_path,bulk_job_d['file_id'])
                  else
                      bulkerror(bulk_job_d['_id'],"Excel file damaged, please chcek and reupload.")
                  end
                  
              else
                  run_time = bulk_job_d['run_time'].to_i
                  run_time = run_time.to_i + 1
                  
                  @db2["bulkjob"].find('_id' => BSON::ObjectId.from_string(objectid)).update_one('$set'=> { 'status' => 0, 'run_time' => run_time.to_i, 'last_update' => @now})
                  @db2.close()
              end
          end
      end
  end
  
  
  def bulkdone(objectid, msg)
      @db2["bulkjob"].find('_id' => BSON::ObjectId.from_string(objectid)).update_one('$set'=> { 'status' => 2, 'msg' => msg.to_s, 'last_update' => @now})
      @db2.close()
  end
  
  def bulkerror(objectid, msg)
      @db2["bulkjob"].find('_id' => BSON::ObjectId.from_string(objectid)).update_one('$set'=> { 'status' => 4, 'msg' => msg.to_s, 'last_update' => @now })
      @db2.close()
  end
  
  
  def runbulkjob
          
      @logger.info "called run bulkjob"
      p = Axlsx::Package.new
      wb = p.workbook
      
      
      # @current_bulk = @db2["bulkjob"].find('status' => 1, 'file_id' => { '$ne' => "" }, 'worker' => @port.to_i)
      # @db2.close()
      
      
      @current_bulk = @db2["bulkjob"].find({ "$and" => [ {:status => 1}, {:file_id => { '$ne' => "" }}, {:worker => @port.to_i} ] })
      @db2.close()
    
      if @current_bulk.count.to_i >= 1
          data = {:message => "too many working", :status => "true"}
          return render :json => data, :status => :ok
      end
    
    
      # @all_bulk = @db2["bulkjob"].find('status' => 0, 'file_id' => { '$ne' => "" }, 'worker' => @port.to_i).sort({ request_date: 1 }).limit(1)
      # @db2.close()
    
      
    
      @all_bulk = @db2["bulkjob"].find({ "$and" => [ {:status => 0}, {:file_id => { '$ne' => "" }}, {:worker => @port.to_i} ] }).sort({ request_date: 1 }).limit(1)
      @db2.close()
      
      api_login = 0
      error_csv_array = []
      final_return_msg = ""
      
      temp_network_name = ""
      temp_360_account_id = ""
      
      if @all_bulk.count.to_i > 0
        
          download_path = "http://china.adeqo.com:"+@port.to_s+"/bulk/download/"
          
          
          @all_bulk.each do |all_bulk_d|
              
              @db2["bulkjob"].find('_id' => BSON::ObjectId.from_string(all_bulk_d['_id'])).update_one('$set'=> { 'status' => 1, 'last_update' => @now})
              @db2.close()
              
              if all_bulk_d['bulk_type'] == "add"
                    
                    move_download_path = "/datadrive/tmp/bulk/add/"              
                    tmp_file_path = "/datadrive/tmp/bulk/add/"+ all_bulk_d['file_id'] + ".xlsx"
                    
                    begin
                        xlsx = Roo::Spreadsheet.open(tmp_file_path, extension: :xlsx)
                    rescue Exception
                        
                        bulkerror(all_bulk_d['_id'],"Excel file upload error/File type incorrect.")
                        deladdbulkfile(all_bulk_d['file_id'])
                        
                        data = {:message => "excel file doesnt exist on server/file type error, first", :status => "true"}
                        return render :json => data, :status => :ok
                    end
                    
                    
                    begin
                        @network = @db["network"].find('id' => all_bulk_d['network_id'].to_i)
                        @db.close
                        
                        if @network.count.to_i <= 0 
                            bulkerror(all_bulk_d['_id'], "Network not Found. Please reupload again. <a target='_blank' href='"+download_path +""+ all_bulk_d['file_id']+".xlsx'> Download</a>")
                            movebulkfile(move_download_path,all_bulk_d['file_id'])
                            
                            data = {:message => "network id not found", :status => "true"}
                            return render :json => data, :status => :ok
                        else
                            
                            @network.each do |network_d|
                                
                                @tracking_type = network_d["tracking_type"].to_s
                                @ad_redirect = network_d["ad_redirect"].to_s
                                @keyword_redirect = network_d["keyword_redirect"].to_s
                                @company_id = network_d["company_id"].to_s
                                @cookie_length = network_d["cookie_length"].to_s
                                
                                temp_network_name = network_d["name"]
                              
                              
                                if all_bulk_d['network_type'].to_s == 'shenma'
                                  
                                    @username = network_d["username"]
                                    @password = network_d["password"]
                                    @apitoken = network_d["api_token"]
                                    
                                    
                                    service = "account"
                                    method = "getAccount"
                                    
                                    json = {'header' => { 
                                                            'token' => network_d["api_token"].to_s,
                                                            'username' => network_d["username"].to_s,
                                                            'password' => network_d["password"].to_s 
                                                        },
                                             'body'  => {
                                                            'requestData' => ["account_all"]
                                                        }
                                            }
                                            
                                            
                                    @account_info = shenma_api(service,method,json)
                                    
                                    
                                    
                                    if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                                        @header = @account_info["header"]
                                        @remain_quote = @header["leftQuota"]
                                        
                                        
                                        
                                        if @remain_quote.to_i <= 500  
                                          
                                            bulkerror(all_bulk_d['_id'],"Api error: Not enough quota on channel. Please check and reupload later. <a target='_blank' href='"+download_path +""+ all_bulk_d['file_id']+".xlsx'> Download</a>")
                                            movebulkfile(move_download_path,all_bulk_d['file_id'])
                                            
                                            data = {:message => "Not enough quota on channel.", :status => "true"}
                                            return render :json => data, :status => :ok
                                            
                                        else
                                            api_login = 1
                                        end
                                    else
                                        @remain_quote = 0
                                        
                                        
                                        bulkerror(all_bulk_d['_id'],"Api error: "+@account_info["header"]["failures"][0]["message"].to_s+". Please check and reupload later. <a target='_blank' href='"+download_path +""+ all_bulk_d['file_id']+".xlsx'> Download</a>")
                                        movebulkfile(move_download_path,all_bulk_d['file_id'])
                                        
                                        data = {:message => @account_info["header"]["failures"][0]["message"].to_s, :status => "true"}
                                        return render :json => data, :status => :ok
      
                                    end
                                    
                                  
                                elsif all_bulk_d['network_type'].to_s == 'baidu'
                                  
                                    @username = network_d["username"]
                                    @password = network_d["password"]
                                    @apitoken = network_d["api_token"]
                                    
                                    service = "AccountService"
                                    method = "getAccountInfo"
                                    
                                    json = {'header' => { 
                                                'token' => network_d["api_token"].to_s,
                                                'username' => network_d["username"].to_s,
                                                'password' => network_d["password"].to_s 
                                              },
                                            'body'  => {
                                                'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                                              }
                                        }       
                                        
                                    @account_info = baidu_api(service,method,json)
                                    # @logger.info @account_info
                                    
                                    if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                                        @header = @account_info["header"]
                                        @remain_quote = @header["rquota"]
                                        
                                        if @remain_quote.to_i <= 500
                                            bulkerror(all_bulk_d['_id'],"Api error: Not enough quota on channel. Please check and reupload later. <a target='_blank' href='"+download_path +""+ all_bulk_d['file_id']+".xlsx'> Download</a>")
                                            movebulkfile(move_download_path,all_bulk_d['file_id'])
                                            
                                            data = {:message => "Not enough quota on channel.", :status => "true"}
                                            return render :json => data, :status => :ok
                                        else
                                            api_login = 1
                                        end
                                    else
                                      
                                        bulkerror(all_bulk_d['_id'],"Api error: "+@account_info["header"]["failures"][0]["message"].to_s+". Please check and reupload later. <a target='_blank' href='"+download_path +""+ all_bulk_d['file_id']+".xlsx'> Download</a>")
                                        movebulkfile(move_download_path,all_bulk_d['file_id'])
                                        
                                        data = {:message => @account_info["header"]["failures"][0]["message"].to_s, :status => "true"}
                                        return render :json => data, :status => :ok
                                      
                                    end
                                  
                                elsif all_bulk_d['network_type'].to_s == 'sogou'
                                  
                                    sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                                    sogou_result = @sogou_api.call(:get_account_info)
                                    
                                    if sogou_result.header[:res_header][:desc].to_s == "success"
                                        @remain_quote = sogou_result.header[:res_header][:rquota].to_i
                                        if @remain_quote.to_i <= 500
                                            bulkerror(all_bulk_d['_id'],"Api error: Not enough quota on channel. Please check and reupload later. <a target='_blank' href='"+download_path +""+ all_bulk_d['file_id']+".xlsx'> Download</a>")
                                            movebulkfile(move_download_path,all_bulk_d['file_id'])
                                            
                                            data = {:message => "Not enough quota on channel.", :status => "true"}
                                            return render :json => data, :status => :ok
                                        else
                                            api_login = 1
                                            
                                            if all_bulk_d['upload_type'] == "campaigns"
                                                sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcPlanService")
                                            elsif all_bulk_d['upload_type'] == "adgroup"
                                                sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcGrpService")
                                            elsif all_bulk_d['upload_type'] == "ad"
                                                sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcIdeaService")
                                            elsif all_bulk_d['upload_type'] == "keyword"
                                                sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcService")
                                            end
                                            
                                        end
                                    else
                                        
                                        bulkerror(all_bulk_d['_id'],"Api error: "+sogou_result.header[:res_header][:failures][:message].to_s+". Please check and reupload later. <a target='_blank' href='"+download_path +""+ all_bulk_d['file_id']+".xlsx'> Download</a>")
                                        movebulkfile(move_download_path,all_bulk_d['file_id'])
                                        
                                        data = {:message => sogou_result.header[:res_header][:failures][:message].to_s, :status => "true"}
                                        return render :json => data, :status => :ok
                                        
                                    end
                                  
                                elsif all_bulk_d['network_type'].to_s == '360'
                                
                                    @username = network_d["username"]
                                    @password = network_d["password"]
                                    @apitoken = network_d["api_token"]
                                    @apisecret = network_d["api_secret"]
                                    
                                    temp_360_account_id = network_d["accountid"]
                                    
                                    login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                                    @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                                    
                                    if !@refresh_token.nil?
                                        api_login = 1
                                        @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "account", "getInfo")
                                        
                                        @remain_quote = @response.headers["quotaremain"].to_i
                                        if @remain_quote.to_i <= 500
                                            
                                            api_login = 0
                                            bulkerror(all_bulk_d['_id'],"Api error: Not enough quota on channel. Please check and reupload later. <a target='_blank' href='"+download_path +""+ all_bulk_d['file_id']+".xlsx'> Download</a>")
                                            movebulkfile(move_download_path,all_bulk_d['file_id'])
                                            
                                            data = {:message => "Not enough quota on channel.", :status => "true"}
                                            return render :json => data, :status => :ok
                                        end
                                    else
                                        bulkerror(all_bulk_d['_id'],"Api error: "+login_info["account_clientLogin_response"]["failures"]["item"]["message"].to_s+". Please check and reupload later. <a target='_blank' href='"+download_path +""+ all_bulk_d['file_id']+".xlsx'> Download</a>")
                                        movebulkfile(move_download_path,all_bulk_d['file_id'])
                                        
                                        data = {:message => login_info["account_clientLogin_response"]["failures"]["item"]["message"].to_s, :status => "true"}
                                        return render :json => data, :status => :ok
                                        
                                    end
                                end
                            end
                        end
                            
                    rescue Exception
                        bulkreset(all_bulk_d['_id'], "add")
                        
                        data = {:message => "api connect error, reset", :status => "true"}
                        return render :json => data, :status => :ok
                    end    
                    
                    
                    
                    begin        
                        # start to work on loop the excel
                        
                        if api_login == 1
                            
                            # this temp is for lazy catch
                            @temp_csv_campaign_name = ""
                            @temp_csv_adgroup_name = ""
                            # this temp is for lazy catch
                            
                            if all_bulk_d['upload_type'] == "campaigns"
                                @logger.info "worker bulkaddcampaign start" 
                                
                                data_arr = []
                                
                                if all_bulk_d['network_type'].to_s == 'shenma'
                                  
                                    xlsx.each_with_index do |csv, csv_index|
                                        if csv_index.to_i == 0
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Daily Budget") && 
                                                csv[2].to_s.include?("Negative Words") && 
                                                csv[3].to_s.include?("Exact Negative Words") && 
                                                csv[4].to_s.include?("Status") &&
                                                csv[5].to_s.include?("Start Date") && 
                                                csv[6].to_s.include?("End Date")
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                            
                                        elsif csv_index.to_i != 0
                                            row = csv_index.to_i + 1
                                            
                                            if csv[0].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Campaign Name"
                                                temp_csv[6] = "Missing Campaign Name"
                                                
                                                error_csv_array << temp_csv
                                            else
                                                if @remain_quote.to_i <= 500
                                                # keep the error row here and form a new one excel       
                                                    temp_csv = csv
                                                    # temp_csv << "not enough quota on the channel"
                                                    temp_csv[6] = "not enough quota on the channel"
                                                    
                                                    error_csv_array << temp_csv                                   
                                                else
                                                    
                                                    requesttypearray = []
                                                    requesttype = {}
                                                                  
                                                    requesttype[:campaignName]    =  csv[0].to_s
                                                    
                                                    if csv[1].to_f > 0
                                                        requesttype[:budget]    =  csv[1].to_f
                                                    end
#                                                     
                                                    if csv[2].to_s != ""
                                                        requesttype[:negativeWords]    =  csv[2].to_s.split(",")
                                                    end
                                                    
                                                    if csv[3].to_s != ""
                                                        requesttype[:exactNegativeWords]    =  csv[3].to_s.split(",")
                                                    end
#                                                     
                                                    if csv[4].to_s != ""
                                                        if csv[4].to_s.downcase == "active"
                                                            pause = "false"
                                                        else
                                                            pause = "true"
                                                        end
                                                        
                                                        requesttype[:pause]    =  pause.to_s.downcase
                                                    else
                                                        pause = "true"
                                                        requesttype[:pause]    =  "true"
                                                    end
                                                    # requesttype[:status]    =     0
                                                    # requesttype[:campaignType]    =     0
                                                    
                                                    requesttypearray << requesttype
                                                    
                                                    service = "campaign"
                                                    method = "addCampaign"
                                                    
                                                    json = {'header' => { 
                                                                'token' => @apitoken.to_s,
                                                                'username' => @username.to_s,
                                                                'password' => @password.to_s 
                                                              },
                                                         'body'  => {
                                                                'campaignTypes' => requesttypearray
                                                              }
                                                        }       
                                                        
                                                    @update_info = shenma_api(service,method,json)
                                                    @logger.info @update_info
                                                    # @logger.info "||||||||||||||||||||||||||||||||||||||"
                                                    # @logger.info json
                                                    
                                                    @header = @update_info["header"]
                                                    @remain_quote = @header["leftQuota"]
                                                    
                                                    if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                                                        # update_msg_array << "Row " + row.to_s + " campaign add to "+temp_network_name.to_s+" Success." 
                                    
                                                        
                                                        data_hash = {}
                                                        insert_hash = {}
                                                      
                                                        insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                        insert_hash[:network_type] = "shenma"
                                                        insert_hash[:account_name] = csv[0].to_s
                                                        insert_hash[:campaign_id] = @update_info["body"]["campaignTypes"][0]["campaignId"].to_i
                                                        insert_hash[:campaign_name] = @update_info["body"]["campaignTypes"][0]["campaignName"].to_s
                                                        insert_hash[:budget] = csv[1].to_f
                                                        insert_hash[:regions] = @update_info["body"]["campaignTypes"][0]["regionTarget"]
                                                        insert_hash[:exclude_ips] = @update_info["body"]["campaignTypes"][0]["excludeIp"]
                                                        insert_hash[:negative_words] = csv[2].to_s.gsub('"', '').to_s
                                                        insert_hash[:exact_negative_words] = csv[3].to_s.gsub('"', '').to_s
                                                        insert_hash[:schedule] = @update_info["body"]["campaignTypes"][0]["schedule"]
                                                        insert_hash[:show_prob] = @update_info["body"]["campaignTypes"][0]["showProb"].to_i
                                                        insert_hash[:pause] = pause.to_s
                                                        insert_hash[:status] = @update_info["body"]["campaignTypes"][0]["status"].to_i
                                                        insert_hash[:create_date] = @now
                                                        insert_hash[:update_date] = @now
                                                        
                                                        
                                                            
                                                        data_hash[:insert_one] = insert_hash
                                                        data_arr << data_hash
                                                      
                                                        if data_arr.count.to_i > 1000
                                                            @db["all_campaign"].bulk_write(data_arr)
                                                            @db.close
                                                            
                                                            data_arr = []
                                                        end
                                                    else  
                                                        temp_csv = csv
                                                        # temp_csv << @header[:res_header][:failures][:message].to_s
                                                        temp_csv[7] = @update_info["header"]["failures"][0]["message"].to_s
                                                        error_csv_array << temp_csv    
                                                    end
                                                    
                                                end
                                            end
                                            
                                            
                                            
                                        end
                                    end
                                    
                                    
                                    if data_arr.count.to_i > 0
                                        @db["all_campaign"].bulk_write(data_arr)
                                        @db.close
                                    end
                                  
                                  
                                
                                elsif all_bulk_d['network_type'].to_s == 'baidu'
                                    
                                    xlsx.each_with_index do |csv, csv_index|
                                        if csv_index.to_i == 0
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Daily Budget") && 
                                                csv[2].to_s.include?("Negative Words") && 
                                                csv[3].to_s.include?("Exact Negative Words") && 
                                                csv[4].to_s.include?("Status") &&
                                                csv[5].to_s.include?("Start Date") && 
                                                csv[6].to_s.include?("End Date")
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                            
                                        elsif csv_index.to_i != 0
                                            row = csv_index.to_i + 1
                                            
                                            if csv[0].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Campaign Name"
                                                temp_csv[6] = "Missing Campaign Name"
                                                
                                                error_csv_array << temp_csv
                                            else
                                                if @remain_quote.to_i <= 500
                                                # keep the error row here and form a new one excel       
                                                    temp_csv = csv
                                                    # temp_csv << "not enough quota on the channel"
                                                    temp_csv[6] = "not enough quota on the channel"
                                                    
                                                    error_csv_array << temp_csv                                   
                                                else
                                                    
                                                    requesttypearray = []
                                                    requesttype = {}
                                                                  
                                                    requesttype[:campaignName]    =  csv[0].to_s
                                                    
                                                    if csv[1].to_f > 0
                                                        requesttype[:budget]    =  csv[1].to_f
                                                    end
#                                                     
                                                    # if csv[2].to_s != ""
                                                        # requesttype[:negativeWords]    =  csv[2].to_s.gsub('"', '').gsub(',', ' ')
                                                    # end
#                                                     
                                                    # if csv[3].to_s != ""
                                                        # requesttype[:exactNegativeWords]    =  csv[3].to_s.gsub('"', '').gsub(',', ' ')
                                                    # end
#                                                     
                                                    if csv[4].to_s != ""
                                                        if csv[4].to_s.downcase == "active"
                                                            pause = "false"
                                                        else
                                                            pause = "true"
                                                        end
                                                        
                                                        requesttype[:pause]    =  pause.to_s.downcase
                                                    else
                                                        pause = "true"
                                                        requesttype[:pause]    =  "true"
                                                    end
                                                    # requesttype[:status]    =     0
                                                    # requesttype[:campaignType]    =     0
                                                    
                                                    requesttypearray << requesttype
                                                    
                                                    service = "CampaignService"
                                                    method = "addCampaign"
                                                    
                                                    json = {'header' => { 
                                                                'token' => @apitoken.to_s,
                                                                'username' => @username.to_s,
                                                                'password' => @password.to_s 
                                                              },
                                                         'body'  => {
                                                                'campaignTypes' => requesttypearray
                                                              }
                                                        }       
                                                        
                                                    @update_info = baidu_api(service,method,json)
                                                    # @logger.info @update_info
                                                    # @logger.info "||||||||||||||||||||||||||||||||||||||"
                                                    # @logger.info json
                                                    
                                                    @header = @update_info["header"]
                                                    @remain_quote = @header["rquota"]
                                                    
                                                    if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                                                        # update_msg_array << "Row " + row.to_s + " campaign add to "+temp_network_name.to_s+" Success." 
                                    
                                                        # @db["all_campaign"].insert_one({ 
                                                                                        # network_id: all_bulk_d['network_id'].to_i,
                                                                                        # network_type: "baidu",
                                                                                        # account_name: csv[0].to_s,
                                                                                        # campaign_id: @update_info["body"]["data"][0]["campaignId"].to_i,
                                                                                        # campaign_name: @update_info["body"]["data"][0]["campaignName"].to_s, 
                                                                                        # budget: csv[1].to_f, 
                                                                                        # regions: @update_info["body"]["data"][0]["regionTarget"], 
                                                                                        # exclude_ips: "",
                                                                                        # negative_words: csv[2].to_s.gsub('"', '').to_s,
                                                                                        # exact_negative_words: csv[3].to_s.gsub('"', '').to_s,
                                                                                        # schedule: @update_info["body"]["data"][0]["schedule"],
                                                                                        # budget_offline_time: "",
                                                                                        # show_prob: @update_info["body"]["data"][0]["showProb"].to_i,
                                                                                        # device: 0,
                                                                                        # pause: pause.to_s,
                                                                                        # priceRatio: @update_info["body"]["data"][0]["priceRatio"].to_f,
                                                                                        # status: @update_info["body"]["data"][0]["status"].to_i,
                                                                                        # isDynamicCreative: @update_info["body"]["data"][0]["isDynamicCreative"].to_s,
                                                                                        # dynCreativeExclusion: "",
                                                                                        # campaignType: @update_info["body"]["data"][0]["campaignType"],
                                                                                        # isDynamicTagSublink: "true",
                                                                                        # isDynamicTitle: "true",
                                                                                        # isDynamicHotRedirect: "true",
                                                                                        # rmktStatus: "",
                                                                                        # rmktPriceRatio: 0,
                                                                                        # update_date: @now,                                            
                                                                                        # create_date: @now })
                                                        # @db.close
                                                        
                                                        
                                                        
                                                        data_hash = {}
                                                        insert_hash = {}
                                                      
                                                        insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                        insert_hash[:network_type] = "baidu"
                                                        insert_hash[:account_name] = csv[0].to_s
                                                        insert_hash[:campaign_id] = @update_info["body"]["data"][0]["campaignId"].to_i
                                                        insert_hash[:campaign_name] = @update_info["body"]["data"][0]["campaignName"].to_s
                                                        insert_hash[:budget] = csv[1].to_f
                                                        insert_hash[:regions] = @update_info["body"]["data"][0]["regionTarget"]
                                                        insert_hash[:exclude_ips] = ""
                                                        insert_hash[:negative_words] = csv[2].to_s.gsub('"', '').to_s
                                                        insert_hash[:exact_negative_words] = csv[3].to_s.gsub('"', '').to_s
                                                        insert_hash[:schedule] = @update_info["body"]["data"][0]["schedule"]
                                                        insert_hash[:budget_offline_time] = ""
                                                        insert_hash[:show_prob] = @update_info["body"]["data"][0]["showProb"].to_i
                                                        insert_hash[:device] = 0
                                                        insert_hash[:pause] = pause.to_s
                                                        insert_hash[:priceRatio] = @update_info["body"]["data"][0]["priceRatio"].to_f
                                                        insert_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                                                        insert_hash[:isDynamicCreative] = @update_info["body"]["data"][0]["isDynamicCreative"].to_s
                                                        insert_hash[:dynCreativeExclusion] = ""
                                                        insert_hash[:campaignType] = @update_info["body"]["data"][0]["campaignType"]
                                                        insert_hash[:isDynamicTagSublink] = "true"
                                                        insert_hash[:isDynamicTitle] = "true"
                                                        insert_hash[:isDynamicHotRedirect] = "true"
                                                        insert_hash[:rmktStatus] = ""
                                                        insert_hash[:rmktPriceRatio] = 0
                                                        insert_hash[:create_date] = @now
                                                        insert_hash[:update_date] = @now
                                                        
                                                        
                                                            
                                                        data_hash[:insert_one] = insert_hash
                                                        data_arr << data_hash
                                                      
                                                        if data_arr.count.to_i > 1000
                                                            @db["all_campaign"].bulk_write(data_arr)
                                                            @db.close
                                                            
                                                            data_arr = []
                                                        end
                                                    else  
                                                        temp_csv = csv
                                                        # temp_csv << @header[:res_header][:failures][:message].to_s
                                                        temp_csv[7] = @update_info["header"]["failures"][0]["message"].to_s
                                                        error_csv_array << temp_csv    
                                                    end
                                                    
                                                end
                                            end
                                            
                                            
                                            
                                        end
                                    end
                                    
                                    
                                    if data_arr.count.to_i > 0
                                        @db["all_campaign"].bulk_write(data_arr)
                                        @db.close
                                    end
                                    
                                    
                                    
                                elsif all_bulk_d['network_type'].to_s == 'sogou'
                                  
                                    xlsx.each_with_index do |csv, csv_index|
                                        
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Daily Budget") && 
                                                csv[2].to_s.include?("Negative Words") && 
                                                csv[3].to_s.include?("Exact Negative Words") && 
                                                csv[4].to_s.include?("Status") &&
                                                csv[5].to_s.include?("Start Date") && 
                                                csv[6].to_s.include?("End Date")
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                      
                                        elsif csv_index.to_i != 0
                                            row = csv_index.to_i + 1
                                            if csv[0].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Campaign Name"
                                                temp_csv[6] = "Missing Campaign Name"
                                                
                                                error_csv_array << temp_csv
                                            else
                                                if @remain_quote.to_i <= 500
                                                # keep the error row here and form a new one excel       
                                                    temp_csv = csv
                                                    # temp_csv << "not enough quota on the channel"
                                                    temp_csv[6] = "not enough quota on the channel"
                                                    
                                                    error_csv_array << temp_csv                                   
                                                else
                                                    
                                                    requesttypearray = []
                                                    requesttype = {}
                                                                  
                                                    requesttype[:cpcPlanName]    =  csv[0].to_s
                                                    
                                                    if csv[1].to_f > 0
                                                        requesttype[:budget]    =  csv[1].to_f
                                                    end
                                                    
                                                    if csv[2].to_s != ""
                                                        requesttype[:negativeWords]    =  csv[2].to_s.gsub('"', '').gsub(',', ' ')
                                                    end
                                                    
                                                    if csv[3].to_s != ""
                                                        requesttype[:exactNegativeWords]    =  csv[3].to_s.gsub('"', '').gsub(',', ' ')
                                                    end
                                                    
                                                    if csv[4].to_s != ""
                                                        if csv[4].to_s.downcase == "active"
                                                            pause = "false"
                                                        else
                                                            pause = "true"
                                                        end
                                                        
                                                        requesttype[:pause]    =  pause.to_s.downcase
                                                    else
                                                        pause = "true"
                                                        requesttype[:pause]    =  "true"
                                                    end
                                                    
                                                    requesttypearray << requesttype
                                                    
                                                    @update_status = @sogou_api.call(:add_cpc_plan, message: { cpcPlanTypes: requesttypearray })
                                      
                                                    @header = @update_status.header.to_hash
                                                    @msg = @header[:res_header][:desc]
                                                    @remain_quote = @header[:res_header][:rquota]
                                                    @logger.info @header
                                                    
                                                    @update_status_body = @update_status.body.to_hash
                                                    # @logger.info @update_status_body
                                                    
                                                    if @msg.to_s.downcase == "success"
                                                        # update_msg_array << "Row " + row.to_s + " campaign add to "+temp_network_name.to_s+" Success." 
                                                        
                                                        # @db["all_campaign"].insert_one({ 
                                                                                        # network_id: all_bulk_d['network_id'].to_i,
                                                                                        # network_type: "sogou", 
                                                                                        # cpc_plan_id: @update_status_body[:add_cpc_plan_response][:cpc_plan_types][:cpc_plan_id].to_i,
                                                                                        # campaign_name: @update_status_body[:add_cpc_plan_response][:cpc_plan_types][:cpc_plan_name].to_s, 
                                                                                        # budget: csv[1].to_f, 
                                                                                        # regions: nil, 
                                                                                        # exclude_ips: "",
                                                                                        # negative_words: csv[2].to_s.gsub('"', '').to_s,
                                                                                        # exact_negative_words: csv[3].to_s.gsub('"', '').to_s,
                                                                                        # schedule: "",
                                                                                        # budget_offline_time: "",
                                                                                        # show_prob: "",
                                                                                        # pause: pause.to_s,
                                                                                        # join_union: @update_status_body[:add_cpc_plan_response][:cpc_plan_types][:join_union].to_s,
                                                                                        # union_price: nil,
                                                                                        # status: @update_status_body[:add_cpc_plan_response][:cpc_plan_types][:status].to_i,
                                                                                        # mobile_price_rate: @update_status_body[:add_cpc_plan_response][:cpc_plan_types][:mobile_price_rate].to_s,
                                                                                        # opt: nil,
                                                                                        # update_date: @now,                                            
                                                                                        # create_date: @now })
                                                        # @db.close
                                                        
                                                        
                                                        data_hash = {}
                                                        insert_hash = {}
                                                      
                                                        insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                        insert_hash[:network_type] = "sogou"
                                                        insert_hash[:cpc_plan_id] = @update_status_body[:add_cpc_plan_response][:cpc_plan_types][:cpc_plan_id].to_i
                                                        insert_hash[:campaign_name] = @update_status_body[:add_cpc_plan_response][:cpc_plan_types][:cpc_plan_name].to_s
                                                        insert_hash[:budget] = csv[1].to_f
                                                        insert_hash[:regions] = nil
                                                        insert_hash[:exclude_ips] = ""
                                                        insert_hash[:negative_words] = csv[2].to_s.gsub('"', '').to_s
                                                        insert_hash[:exact_negative_words] = csv[3].to_s.gsub('"', '').to_s
                                                        insert_hash[:schedule] = ""
                                                        insert_hash[:budget_offline_time] = ""
                                                        insert_hash[:show_prob] = ""
                                                        insert_hash[:pause] = pause.to_s
                                                        insert_hash[:join_union] = 0
                                                        insert_hash[:union_price] = @update_status_body[:add_cpc_plan_response][:cpc_plan_types][:join_union].to_s
                                                        insert_hash[:status] = @update_status_body[:add_cpc_plan_response][:cpc_plan_types][:status].to_i
                                                        insert_hash[:mobile_price_rate] = @update_status_body[:add_cpc_plan_response][:cpc_plan_types][:mobile_price_rate].to_s
                                                        insert_hash[:opt] = nil
                                                        insert_hash[:create_date] = @now
                                                        insert_hash[:update_date] = @now
                                                        
                                                        
                                                            
                                                        data_hash[:insert_one] = insert_hash
                                                        data_arr << data_hash
                                                      
                                                        if data_arr.count.to_i > 1000
                                                            @db["all_campaign"].bulk_write(data_arr)
                                                            @db.close
                                                            
                                                            data_arr = []
                                                        end
                                                        
                                                        
                                                    else  
                                                        temp_csv = csv
                                                        # temp_csv << @header[:res_header][:failures][:message].to_s
                                                        temp_csv[7] = @header[:res_header][:failures][:message].to_s
                                                        error_csv_array << temp_csv    
                                                    end
                                                    
                                                end
                                            end
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        @db["all_campaign"].bulk_write(data_arr)
                                        @db.close
                                    end
                                    
                                elsif all_bulk_d['network_type'].to_s == '360'  
                                    
                                    xlsx.each_with_index do |csv, csv_index|
                                        
                                        if csv_index.to_i == 0
                                        
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Daily Budget") && 
                                                csv[2].to_s.include?("Negative Words") && 
                                                csv[3].to_s.include?("Exact Negative Words") && 
                                                csv[4].to_s.include?("Status") &&
                                                csv[5].to_s.include?("Start Date") && 
                                                csv[6].to_s.include?("End Date")
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                      
                                        elsif csv_index.to_i != 0
                                            row = csv_index.to_i + 1
                                            
                                            if csv[0].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Campaign Name"
                                                temp_csv[6] = "Missing Campaign Name"
                                                
                                                error_csv_array << temp_csv
                                            else
                                              
                                                if @remain_quote.to_i <= 500
                                                    temp_csv = csv
                                                    # temp_csv << "not enough quota on the channel"
                                                    temp_csv[6] = "not enough quota on the channel"
                                                    
                                                    error_csv_array << temp_csv
                                                else
                                                    body = {}
                                                    body[:name] = csv[0].to_s
    #                                                 
                                                    if csv[1].to_f > 0
                                                        body[:budget] =  csv[1].to_i
                                                    end
    #                                                      
                                                    body[:negativeWords] = '{"phrase":['+csv[2].to_s+'],"exact":['+csv[3].to_s+']}'                              
    #                                                 
                                                    db_status = "暂停"
                                                                                                                                                                             
                                                    if csv[4].to_s != ""
                                                        if csv[4].to_s.downcase == "active"
                                                            status_360 = "enable"
                                                            db_status = "启用"
                                                        else
                                                            status_360 = "pause"
                                                            db_status = "暂停"
                                                        end
                                                      
                                                        body[:status] =  status_360
                                                    else
                                                      
                                                        status_360 = "pause"
                                                        db_status = "暂停"
                                                        
                                                        body[:status] =  status_360
                                                    end
    #                                                  
                                                    if csv[5].to_s != ""
                                                        body[:startDate] =  csv[5].to_s
                                                    end
                                                    
                                                    if csv[6].to_s != ""
                                                        body[:endDate] =  csv[6].to_s
                                                    end
                                                    
                                                    @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "campaign", "add", body)
                                                    @affectedRecords = @update_res["campaign_add_response"]
                                                    
                                                    @remain_quote = @response.headers["quotaremain"].to_i
                                                    
                                                    @logger.info "---"
                                                    @logger.info body
                                                    # @logger.info @affectedRecords
                                                    @logger.info @update_res
    #                                                 
    #                                                 
                                                    if @update_res["campaign_add_response"]["failures"].nil?
                                                        # update_msg_array << "Row " + row.to_s + " campaign add to "+temp_network_name.to_s+" Success."
                                                        
                                                        data_hash = {}
                                                        insert_hash = {}
                                                      
                                                        insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                        insert_hash[:network_type] = "360"
                                                        insert_hash[:account_id] = temp_360_account_id.to_i
                                                        insert_hash[:account_name] = temp_network_name.to_s
                                                        insert_hash[:campaign_id] = @update_res["campaign_add_response"]["id"].to_i
                                                        insert_hash[:campaign_name] = csv[0].to_s
                                                        insert_hash[:budget] = csv[1].to_f
                                                        insert_hash[:regions] = "全国"
                                                        insert_hash[:schedule] = ""
                                                        insert_hash[:start_date] = csv[5].to_s
                                                        insert_hash[:end_date] = csv[6].to_s
                                                        insert_hash[:status] = db_status.to_s
                                                        insert_hash[:sys_status] = "有效"
                                                        insert_hash[:extend_ad_type] = 1
                                                        insert_hash[:mobile_price_rate] = 100
                                                        insert_hash[:negative_words] = csv[2].to_s.gsub('"', '').to_s
                                                        insert_hash[:exact_negative_words] = csv[3].to_s.gsub('"', '').to_s
                                                        insert_hash[:create_date] = @now
                                                        insert_hash[:update_date] = @now
                                                            
                                                        data_hash[:insert_one] = insert_hash
                                                        data_arr << data_hash
                                                      
                                                        if data_arr.count.to_i > 1000
                                                            @db["all_campaign"].bulk_write(data_arr)
                                                            @db.close
                                                            
                                                            data_arr = []
                                                        end
                                                        
                                                        # @db["all_campaign"].insert_one({ 
                                                                            # network_id: all_bulk_d['network_id'].to_i,
                                                                            # network_type: "360", 
                                                                            # account_id: temp_360_account_id.to_i,
                                                                            # account_name: temp_network_name.to_s,
                                                                            # campaign_id: @update_res["campaign_add_response"]["id"].to_i,
                                                                            # campaign_name: csv[0].to_s, 
                                                                            # budget: csv[1].to_f, 
                                                                            # regions: "全国", 
                                                                            # schedule: "",
                                                                            # start_date: csv[5].to_s,
                                                                            # end_date: csv[6].to_s,
                                                                            # status: db_status.to_s,
                                                                            # sys_status: "有效",
                                                                            # extend_ad_type: 1,
                                                                            # mobile_price_rate: 100,
#                                                                             
                                                                            # negative_words: csv[2].to_s.gsub('"', '').to_s,
                                                                            # exact_negative_words: csv[3].to_s.gsub('"', '').to_s,
#                                                                             
                                                                            # update_date: @now.to_s,                                            
                                                                            # create_date: @now.to_s 
                                                                          # })
                                                        # @db.close 
                                                        
                                                    else
                                                        temp_csv = csv
                                                        # temp_csv << @update_res["campaign_add_response"]["failures"]["item"]["message"].to_s
                                                        temp_csv[7] = @update_res["campaign_add_response"]["failures"]["item"]["message"].to_s
                                                        error_csv_array << temp_csv
                                                        
                                                        # update_msg_array << "Row " + row.to_s + " is not added." + @update_res["campaign_add_response"]["failures"]["item"]["message"].to_s
                                                    end
                                                end  
                                            end
                                        end
                                    end
                                    
                                    
                                    if data_arr.count.to_i > 0
                                        @db["all_campaign"].bulk_write(data_arr)
                                        @db.close
                                    end
                                    
                                    
                                end
                            
                            elsif all_bulk_d['upload_type'] == "adgroup"
                              
                                @logger.info "worker bulkaddadgroup start"
                                
                                data_arr = []
                                
                                
                                if all_bulk_d['network_type'].to_s == 'shenma'
                                  
                                    
                                    xlsx.each_with_index do |csv, csv_index|
                                      
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Adgroup Name") && 
                                                csv[2].to_s.include?("Status") && 
                                                csv[3].to_s.include?("Max. CPC Bid") 
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                          
                                        elsif csv_index.to_i != 0
                                          
                                          
                                            row = csv_index.to_i + 1
#                                             
                                            if csv[0].to_s == "" || csv[1].to_s == "" || csv[3].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Require Field."
                                                temp_csv[4] = "Missing Require Field."
                                                
                                                error_csv_array << temp_csv
                                            else
                                              
                                                # lazy catch
                                                if @temp_csv_campaign_name.to_s != csv[0].to_s
#                                                     
                                                    @campaign = @db["all_campaign"].find('campaign_name' => csv[0].to_s, 'network_type' => all_bulk_d['network_type'].to_s, 'network_id' => all_bulk_d['network_id'].to_i)
                                                    @db.close
#                                                     
                                                    if @campaign.count.to_i == 1
#                                                         
                                                        @temp_csv_campaign_name = csv[0].to_s
                                                        @campaign.each_with_index do |campaign_d, adgroup_index|
                                                            @temp_campaign_id = campaign_d["campaign_id"]
                                                        end
                                                    end
                                                end
                                                # lazy catch
                                              
                                              
                                                if @campaign.count.to_i == 1 && @temp_campaign_id.to_s != ""
                                                    if @remain_quote.to_i <= 500
#                                                             
                                                          temp_csv = csv
                                                          # temp_csv << "not enough quota on the channel"
                                                          temp_csv[4] = "not enough quota on the channel"
                                                          
                                                          error_csv_array << temp_csv
#                                                                      
                                                    else
#                                                                                                                   
                                                          requesttypearray = []
                                                          requesttype = {}
                                                          
                                                          requesttype[:campaignId]    =  @temp_campaign_id
                                                          requesttype[:adgroupName]    =  csv[1].to_s
                                                          requesttype[:maxPrice]    =  csv[3].to_f
                                                          requesttype[:adPlatformOS]    =     3
#                                                           
                                                          if csv[2].to_s != ""
                                                              if csv[2].to_s.downcase == "paused"
                                                                  pause = "true"
                                                              else
                                                                  pause = "false"
                                                              end
                                                              
                                                              requesttype[:pause]    =  pause.to_s.downcase
                                                          else
                                                              pause = "false"
                                                              requesttype[:pause]    =  pause.to_s.downcase
                                                          end
#                                                           
                                                          requesttypearray << requesttype
                                                          
                                                          
                                                          service = "adgroup"
                                                          method = "addAdgroup"
                                    
                                                          json = {'header' => { 
                                                                          'token' => @apitoken.to_s,
                                                                          'username' => @username.to_s,
                                                                          'password' => @password.to_s 
                                                                        },
                                                                   'body'  => {
                                                                          'adgroupTypes' => requesttypearray
                                                                        }
                                                                  }       
                                                              
                                                          @update_info = shenma_api(service,method,json)
                                                          @logger.info @update_info
                                    
                                                          
                                                          @header = @update_info["header"]
                                                          @remain_quote = @header["leftQuota"]
                                                          
                                                          if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                                                            
                                                              
                                                              data_hash = {}
                                                              insert_hash = {}
                                                            
                                                              insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                              insert_hash[:campaign_id] = @temp_campaign_id.to_i
                                                              insert_hash[:adgroup_id] = @update_info["body"]["adgroupTypes"][0]["adgroupId"].to_i
                                                              insert_hash[:name] = @update_info["body"]["adgroupTypes"][0]["adgroupName"].to_s
                                                              insert_hash[:max_price] = @update_info["body"]["adgroupTypes"][0]["maxPrice"].to_f
                                                              insert_hash[:negative_words] = ""
                                                              insert_hash[:exact_negative_words] = ""
                                                              insert_hash[:pause] = @update_info["body"]["adgroupTypes"][0]["pause"].to_s
                                                              insert_hash[:status] = @update_info["body"]["adgroupTypes"][0]["status"].to_i
                                                              insert_hash[:create_date] = @now
                                                              insert_hash[:update_date] = @now
                                                                  
                                                              data_hash[:insert_one] = insert_hash
                                                              data_arr << data_hash
                                                            
                                                              if data_arr.count.to_i > 1000
                                                                  db_name = "adgroup_shenma_"+all_bulk_d['network_id'].to_s
                                                                  @baidu_db[db_name].bulk_write(data_arr)
                                                                  @baidu_db.close()
                                                                  
                                                                  data_arr = []
                                                              end
                                                                                        
                                                          else  
                                                              temp_csv = csv
                                                              temp_csv[4] = @update_info["header"]["failures"][0]["message"].to_s
                                                              
                                                              error_csv_array << temp_csv
                                                          end
                                                    end
                                                else
                                                    temp_csv = csv
                                                    # temp_csv << "Campaign not found."
                                                    temp_csv[4] = "Campaign not found."
                                                    
                                                    error_csv_array << temp_csv
                                                end
                                              
                                              
                                            end
                                          
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        db_name = "adgroup_shenma_"+all_bulk_d['network_id'].to_s
                                        @baidu_db[db_name].bulk_write(data_arr)
                                        @baidu_db.close()
                                    end
                                  
                                  
                                  
                                elsif all_bulk_d['network_type'].to_s == 'baidu'
                                
                                    xlsx.each_with_index do |csv, csv_index|
                                      
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Adgroup Name") && 
                                                csv[2].to_s.include?("Status") && 
                                                csv[3].to_s.include?("Max. CPC Bid") 
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                          
                                        elsif csv_index.to_i != 0
                                          
                                          
                                            row = csv_index.to_i + 1
#                                             
                                            if csv[0].to_s == "" || csv[1].to_s == "" || csv[3].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Require Field."
                                                temp_csv[4] = "Missing Require Field."
                                                
                                                error_csv_array << temp_csv
                                            else
                                              
                                                # lazy catch
                                                if @temp_csv_campaign_name.to_s != csv[0].to_s
#                                                     
                                                    @campaign = @db["all_campaign"].find('campaign_name' => csv[0].to_s, 'network_type' => all_bulk_d['network_type'].to_s, 'network_id' => all_bulk_d['network_id'].to_i)
                                                    @db.close
#                                                     
                                                    if @campaign.count.to_i == 1
#                                                         
                                                        @temp_csv_campaign_name = csv[0].to_s
                                                        @campaign.each_with_index do |campaign_d, adgroup_index|
                                                            @temp_campaign_id = campaign_d["campaign_id"]
                                                        end
                                                    end
                                                end
                                                # lazy catch
                                              
                                              
                                                if @campaign.count.to_i == 1 && @temp_campaign_id.to_s != ""
                                                    if @remain_quote.to_i <= 500
#                                                             
                                                          temp_csv = csv
                                                          # temp_csv << "not enough quota on the channel"
                                                          temp_csv[4] = "not enough quota on the channel"
                                                          
                                                          error_csv_array << temp_csv
#                                                                      
                                                    else
#                                                                                                                   
                                                          requesttypearray = []
                                                          requesttype = {}
                                                          
                                                          requesttype[:campaignId]    =  @temp_campaign_id
                                                          requesttype[:adgroupName]    =  csv[1].to_s
                                                          requesttype[:maxPrice]    =  csv[3].to_f
                                                          requesttype[:status]    =     0
#                                                           
                                                          if csv[2].to_s != ""
                                                              if csv[2].to_s.downcase == "paused"
                                                                  pause = "true"
                                                              else
                                                                  pause = "false"
                                                              end
                                                              
                                                              requesttype[:pause]    =  pause.to_s.downcase
                                                          else
                                                              pause = "false"
                                                              requesttype[:pause]    =  pause.to_s.downcase
                                                          end
#                                                           
                                                          requesttypearray << requesttype
                                                          
                                                          
                                                          service = "AdgroupService"
                                                          method = "addAdgroup"
                                    
                                                          json = {'header' => { 
                                                                          'token' => @apitoken.to_s,
                                                                          'username' => @username.to_s,
                                                                          'password' => @password.to_s 
                                                                        },
                                                                   'body'  => {
                                                                          'adgroupTypes' => requesttypearray
                                                                        }
                                                                  }       
                                                              
                                                          @update_info = baidu_api(service,method,json)
                                                          @logger.info @update_info
                                    
                                                          
                                                          @header = @update_info["header"]
                                                          @remain_quote = @header["rquota"]
                                                          
                                                          if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                                                            
                                                              
                                                            
                                                              # db_name = "adgroup_baidu_"+all_bulk_d['network_id'].to_s 
                                                              
                                                              
                                                              # @baidu_db[db_name].insert_one({ 
                                                                                              # network_id: all_bulk_d['network_id'].to_i,
                                                                                              # campaign_id: @temp_campaign_id.to_i,
                                                                                              # adgroup_id: @update_info["body"]["data"][0]["adgroupId"].to_i,
                                                                                              # name: @update_info["body"]["data"][0]["adgroupName"].to_s,
                                                                                              # max_price: @update_info["body"]["data"][0]["maxPrice"].to_f,
                                                                                              # negative_words: "",
                                                                                              # exact_negative_words: "",
                                                                                              # pause: @update_info["body"]["data"][0]["pause"].to_s,
                                                                                              # status: @update_info["body"]["data"][0]["status"].to_i,
                                                                                              # accuPriceFactor: @update_info["body"]["data"][0]["accuPriceFactor"].to_i,
                                                                                              # wordPriceFactor: @update_info["body"]["data"][0]["wordPriceFactor"].to_i,
                                                                                              # widePriceFactor: @update_info["body"]["data"][0]["widePriceFactor"].to_i,
                                                                                              # matchPriceFactorStatus: @update_info["body"]["data"][0]["matchPriceStatus"].to_i,
                                                                                              # priceRatio: @update_info["body"]["data"][0]["priceRatio"].to_i,
                                                                                              # update_date: @now,                                            
                                                                                              # create_date: @now })
                                                              # @baidu_db.close()
                                                              
                                                              
                                                              data_hash = {}
                                                              insert_hash = {}
                                                            
                                                              insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                              insert_hash[:campaign_id] = @temp_campaign_id.to_i
                                                              insert_hash[:adgroup_id] = @update_info["body"]["data"][0]["adgroupId"].to_i
                                                              insert_hash[:name] = @update_info["body"]["data"][0]["adgroupName"].to_s
                                                              insert_hash[:max_price] = @update_info["body"]["data"][0]["maxPrice"].to_f
                                                              insert_hash[:negative_words] = ""
                                                              insert_hash[:exact_negative_words] = ""
                                                              insert_hash[:pause] = @update_info["body"]["data"][0]["pause"].to_s
                                                              insert_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                                                              insert_hash[:accuPriceFactor] = @update_info["body"]["data"][0]["accuPriceFactor"].to_i
                                                              insert_hash[:wordPriceFactor] = @update_info["body"]["data"][0]["wordPriceFactor"].to_i
                                                              insert_hash[:widePriceFactor] = @update_info["body"]["data"][0]["widePriceFactor"].to_i
                                                              insert_hash[:matchPriceFactorStatus] = @update_info["body"]["data"][0]["matchPriceStatus"].to_i
                                                              insert_hash[:priceRatio] = @update_info["body"]["data"][0]["priceRatio"].to_i
                                                              insert_hash[:create_date] = @now
                                                              insert_hash[:update_date] = @now
                                                                  
                                                              data_hash[:insert_one] = insert_hash
                                                              data_arr << data_hash
                                                            
                                                              if data_arr.count.to_i > 1000
                                                                  db_name = "adgroup_baidu_"+all_bulk_d['network_id'].to_s
                                                                  @baidu_db[db_name].bulk_write(data_arr)
                                                                  @baidu_db.close()
                                                                  
                                                                  data_arr = []
                                                              end
                                                                                        
                                                          else  
                                                              temp_csv = csv
                                                              temp_csv[4] = @update_info["header"]["failures"][0]["message"].to_s
                                                              
                                                              error_csv_array << temp_csv
                                                          end
                                                    end
                                                else
                                                    temp_csv = csv
                                                    # temp_csv << "Campaign not found."
                                                    temp_csv[4] = "Campaign not found."
                                                    
                                                    error_csv_array << temp_csv
                                                end
                                              
                                              
                                            end
                                          
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        db_name = "adgroup_baidu_"+all_bulk_d['network_id'].to_s
                                        @baidu_db[db_name].bulk_write(data_arr)
                                        @baidu_db.close()
                                    end
                                                              
                                elsif all_bulk_d['network_type'].to_s == 'sogou'
                                    
                                    xlsx.each_with_index do |csv, csv_index|
                                      
                                      
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Adgroup Name") && 
                                                csv[2].to_s.include?("Status") && 
                                                csv[3].to_s.include?("Max. CPC Bid") 
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                      
                                      
                                        elsif csv_index.to_i != 0
                                            row = csv_index.to_i + 1
#                                             
                                            if csv[0].to_s == "" || csv[1].to_s == "" || csv[3].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Require Field."
                                                temp_csv[4] = "Missing Require Field."
                                                
                                                error_csv_array << temp_csv
                                            else
                                              
                                                # lazy catch
                                                if @temp_csv_campaign_name.to_s != csv[0].to_s
#                                                     
                                                    @campaign = @db["all_campaign"].find('campaign_name' => csv[0].to_s, 'network_type' => all_bulk_d['network_type'].to_s, 'network_id' => all_bulk_d['network_id'].to_i)
                                                    @db.close
#                                                     
                                                    if @campaign.count.to_i == 1
#                                                         
                                                        @temp_csv_campaign_name = csv[0].to_s
                                                        
                                                        @campaign.each_with_index do |campaign_d, adgroup_index|
                                                            @temp_campaign_id = campaign_d["cpc_plan_id"]
                                                        end
                                                        
                                                    end
                                                end
                                                # lazy catch
#                                               
#                                                 
                                                if @campaign.count.to_i == 1 && @temp_campaign_id.to_s != ""
                                                    if @remain_quote.to_i <= 500
#                                                             
                                                          temp_csv = csv
                                                          # temp_csv << "not enough quota on the channel"
                                                          temp_csv[4] = "not enough quota on the channel"
                                                          
                                                          error_csv_array << temp_csv
#                                                                      
                                                    else
#                                                                                                                   
                                                          requesttypearray = []
                                                          requesttype = {}
                                                          
                                                          requesttype[:cpcPlanId]    =  @temp_campaign_id
                                                          requesttype[:cpcGrpName]    =  csv[1].to_s
                                                          requesttype[:maxPrice]    =  csv[3].to_f
#                                                           
                                                          if csv[2].to_s != ""
                                                              if csv[2].to_s.downcase == "paused"
                                                                  pause = "true"
                                                              else
                                                                  pause = "false"
                                                              end
                                                              
                                                              requesttype[:pause]    =  pause.to_s.downcase
                                                          else
                                                              pause = "false"
                                                              requesttype[:pause]    =  pause.to_s.downcase
                                                          end
#                                                           
                                                          requesttypearray << requesttype
                                                          
                                                          @update_status = @sogou_api.call(:add_cpc_grp, message: { cpcGrpTypes: requesttypearray })
                                                          @header = @update_status.header.to_hash
                          
                                                          @msg = @header[:res_header][:desc]
                                                          @remain_quote = @header[:res_header][:rquota]
                                                          @logger.info @header
                                                            
                                                          @update_status_body = @update_status.body.to_hash
                                                          # @logger.info @update_status_body
#                                                           
#                                                           
                                                          if @msg.to_s.downcase == "success"
                                                              # db_name = "adgroup_sogou_"+all_bulk_d['network_id'].to_s 
                                                              # @sogou_db[db_name].insert_one({ 
                                                                                        # network_id: all_bulk_d['network_id'].to_i,
                                                                                        # cpc_plan_id: @temp_campaign_id.to_i,
                                                                                        # cpc_grp_id: @update_status_body[:add_cpc_grp_response][:cpc_grp_types][:cpc_grp_id].to_i,
                                                                                        # name: @update_status_body[:add_cpc_grp_response][:cpc_grp_types][:cpc_grp_name].to_s,
                                                                                        # max_price: csv[3].to_f,
                                                                                        # negative_words: "",
                                                                                        # exact_negative_words: "",
                                                                                        # pause: @update_status_body[:add_cpc_grp_response][:cpc_grp_types][:pause].to_s,
                                                                                        # status: @update_status_body[:add_cpc_grp_response][:cpc_grp_types][:status].to_i,
                                                                                        # opt: "",
                                                                                        # update_date: @now,                                            
                                                                                        # create_date: @now })
#                                                                                         
                                                              # @sogou_db.close()
                                                              
                                                              data_hash = {}
                                                              insert_hash = {}
                                                            
                                                              insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                              insert_hash[:cpc_plan_id] = @temp_campaign_id.to_i
                                                              insert_hash[:cpc_grp_id] = @update_status_body[:add_cpc_grp_response][:cpc_grp_types][:cpc_grp_id].to_i
                                                              insert_hash[:name] = @update_status_body[:add_cpc_grp_response][:cpc_grp_types][:cpc_grp_name].to_s
                                                              insert_hash[:max_price] = csv[3].to_f
                                                              insert_hash[:negative_words] = ""
                                                              insert_hash[:exact_negative_words] = ""
                                                              insert_hash[:pause] = @update_status_body[:add_cpc_grp_response][:cpc_grp_types][:pause].to_s
                                                              insert_hash[:status] = @update_status_body[:add_cpc_grp_response][:cpc_grp_types][:status].to_i
                                                              insert_hash[:opt] = ""
                                                              insert_hash[:create_date] = @now
                                                              insert_hash[:update_date] = @now
                                                                  
                                                              data_hash[:insert_one] = insert_hash
                                                              data_arr << data_hash
                                                            
                                                              if data_arr.count.to_i > 1000
                                                                  db_name = "adgroup_sogou_"+all_bulk_d['network_id'].to_s
                                                                  @sogou_db[db_name].bulk_write(data_arr)
                                                                  @sogou_db.close()
                                                                  
                                                                  data_arr = []
                                                              end
                                                              
                                                                                        
                                                          else  
                                                              temp_csv = csv
                                                              if @header[:res_header][:failures][:message].to_s == "Group name already exists in the plan"
                                                                  # temp_csv << "Ad Group name already exists in this campaign"
                                                                  temp_csv[4] = "Ad Group name already exists in this campaign"
                                                              else
                                                                  # temp_csv << @header[:res_header][:failures][:message].to_s
                                                                  temp_csv[4] = @header[:res_header][:failures][:message].to_s
                                                              end
                                                              
                                                              error_csv_array << temp_csv
                                                          end
                                                    end
                                                else
                                                    temp_csv = csv
                                                    # temp_csv << "Campaign not found."
                                                    temp_csv[4] = "Campaign not found."
                                                    
                                                    error_csv_array << temp_csv
                                                end
#                                                 
                                            end
#                                           
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        db_name = "adgroup_sogou_"+all_bulk_d['network_id'].to_s
                                        @sogou_db[db_name].bulk_write(data_arr)
                                        @sogou_db.close()
                                    end
                                    
                                elsif all_bulk_d['network_type'].to_s == '360'
                                    xlsx.each_with_index do |csv, csv_index|
#                                       
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Adgroup Name") && 
                                                csv[2].to_s.include?("Status") && 
                                                csv[3].to_s.include?("Max. CPC Bid") 
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                            
                                        elsif csv_index.to_i != 0
                                            row = csv_index.to_i + 1
    # #                                         
                                            if csv[0].to_s == "" || csv[1].to_s == "" || csv[3].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Require Field."
                                                temp_csv[4] = "Missing Require Field."
                                                
                                                error_csv_array << temp_csv
                                            else
                                                # lazy catch
                                                if @temp_csv_campaign_name.to_s != csv[0].to_s
                                                    
                                                    @campaign = @db["all_campaign"].find('campaign_name' => csv[0].to_s, 'network_type' => all_bulk_d['network_type'].to_s, 'network_id' => all_bulk_d['network_id'].to_i)
                                                    @db.close
                                                    
                                                    if @campaign.count.to_i == 1
                                                        
                                                        @temp_csv_campaign_name = csv[0].to_s
                                                        
                                                        @campaign.each_with_index do |campaign_d, adgroup_index|
                                                            @temp_campaign_id = campaign_d["campaign_id"]
                                                        end
                                                    end
                                                end
                                                # lazy catch
    #                                             
                                                if @campaign.count.to_i == 1 && @temp_campaign_id.to_s != ""
                                                    if @remain_quote.to_i <= 500
                                                          
                                                          temp_csv = csv
                                                          # temp_csv << "not enough quota on the channel"
                                                          temp_csv[4] = "not enough quota on the channel"
                                                          
                                                          error_csv_array << temp_csv
                                                          
                                                    else
    #                                                   
                                                          requesttypearray = []
                                                          request_str = '{"campaignId":'+@temp_campaign_id.to_s+',"name":"'+csv[1].to_s+'","price":'+csv[3].to_s+'}'
                                                          requesttypearray << request_str
                                                           
                                                          #request = '[{"campaignId":868451104,"name":"测试组","price":1,"negativeWords":"{"phrase":["广泛"],"exact":["精确"]}"}]'
                                                          
                                                          request = '['+requesttypearray.join(",")+']'
                                                          @logger.info request
                                                                       
                                                          body = { 
                                                              'groups' => request
                                                          }
                                                          
                                                          @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "group", "batchAdd", body)
                                                          @affectedRecords = @update_res["group_batchAdd_response"]
                                                          
                                                          @logger.info @affectedRecords
                                                          @logger.info @update_res
                                                          @remain_quote = @response.headers["quotaremain"].to_i
                                                          
                                                          if @update_res["group_batchAdd_response"]["failures"].nil?
                                                              # update_msg_array << "Row " + row.to_s + " adgroup add to "+temp_network_name.to_s+" Success."
                                                              
                                                              
                                                              # adgroup_db_name = "adgroup_360_"+all_bulk_d['network_id'].to_s
                                                              # @threesixty_db[adgroup_db_name].insert_one({ 
                                                                                      # network_id: all_bulk_d['network_id'].to_i,
                                                                                      # account_id: temp_360_account_id.to_i,
                                                                                      # account_name: temp_network_name.to_s,
                                                                                      # campaign_id: @temp_campaign_id.to_i,
                                                                                      # campaign_name: csv[0].to_s,
                                                                                      # adgroup_id: @update_res["group_batchAdd_response"]["groupIdList"]["item"].to_i,
                                                                                      # adgroup_name: csv[1].to_s,
                                                                                      # price: csv[3].to_f,
                                                                                      # negative_words: "",
                                                                                      # negative_words_mode: "",
                                                                                      # status: "启用",
                                                                                      # sys_status: "有效",
                                                                                      # update_date: @now,                                            
                                                                                      # create_date: @now 
                                                                                      # })
                                                              # @threesixty_db.close() 
                                                              
                                                              
                                                              data_hash = {}
                                                              insert_hash = {}
                                                            
                                                              insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                              insert_hash[:account_id] = temp_360_account_id.to_i
                                                              insert_hash[:account_name] = temp_network_name.to_s
                                                              insert_hash[:campaign_id] = @temp_campaign_id.to_i
                                                              insert_hash[:campaign_name] = csv[0].to_s
                                                              insert_hash[:adgroup_id] = @update_res["group_batchAdd_response"]["groupIdList"]["item"].to_i
                                                              insert_hash[:adgroup_name] = csv[1].to_s
                                                              insert_hash[:price] = csv[3].to_f
                                                              insert_hash[:negative_words] = ""
                                                              insert_hash[:negative_words_mode] = ""
                                                              insert_hash[:status] = "启用"
                                                              insert_hash[:sys_status] = "有效",
                                                              insert_hash[:create_date] = @now
                                                              insert_hash[:update_date] = @now
                                                                  
                                                              data_hash[:insert_one] = insert_hash
                                                              data_arr << data_hash
                                                            
                                                              if data_arr.count.to_i > 1000
                                                                  db_name = "adgroup_360_"+all_bulk_d['network_id'].to_s
                                                                  @threesixty_db[db_name].bulk_write(data_arr)
                                                                  @threesixty_db.close()
                                                                  
                                                                  data_arr = []
                                                              end
                                                              
                                                          else
                                                              temp_csv = csv
                                                              if @update_res["group_batchAdd_response"]["failures"]["item"]["message"].to_s == "Group name already exists in the plan" 
                                                                  # temp_csv << "Ad Group name already exists in this campaign"
                                                                  temp_csv[4] = "Ad Group name already exists in this campaign"
                                                              else
                                                                  # temp_csv << @update_res["group_batchAdd_response"]["failures"]["item"]["message"].to_s
                                                                  temp_csv[4] = @update_res["group_batchAdd_response"]["failures"]["item"]["message"].to_s
                                                              end
                                                              
                                                              error_csv_array << temp_csv
                                                          end
                                                    end
                                                else
                                                    temp_csv = csv
                                                    # temp_csv << "Campaign not found."
                                                    temp_csv[4] = "Campaign not found."
                                                    
                                                    error_csv_array << temp_csv
                                                end  
                                            end
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        db_name = "adgroup_360_"+all_bulk_d['network_id'].to_s
                                        @threesixty_db[db_name].bulk_write(data_arr)
                                        @threesixty_db.close()
                                    end
                                    
                                    
                                end
                            
                            elsif all_bulk_d['upload_type'] == "ad"
                              
                                @logger.info "worker bulkadd ad start" 
                                
                                data_arr = []
                                
                                if all_bulk_d['network_type'].to_s == 'shenma'
                                  
                                    xlsx.each_with_index do |csv, csv_index|
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Adgroup Name") && 
                                                csv[2].to_s.include?("Title") &&
                                                csv[3].to_s.include?("Description 1") && 
                                                csv[4].to_s.include?("Description 2") && 
                                                csv[5].to_s.include?("Landing Page URL") &&
                                                csv[6].to_s.include?("Display URL") && 
                                                csv[7].to_s.include?("Mobile Landing Page URL") && 
                                                csv[8].to_s.include?("Mobile Display URL (Optional)") &&
                                                csv[9].to_s.include?("Status") 
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                      
                                        elsif csv_index.to_i != 0
                                          
                                            
                                            
                                            row = csv_index.to_i + 1
                                            if csv[0].to_s == "" || csv[1].to_s == "" || csv[2].to_s == "" || csv[3].to_s == "" || csv[4].to_s == "" || csv[5].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Require field."
                                                temp_csv[10] << "Missing Require field."
                                                
                                                error_csv_array << temp_csv
                                                
                                            elsif csv[2].to_s.bytes.count.to_i < 15
                                                temp_csv = csv
                                                # temp_csv << "Title is too short."
                                                temp_csv[10] = "Title is too short."
                                                
                                                error_csv_array << temp_csv
                                            else
                                                
                                                # lazy catch
                                                # first case, campaign name not match 
                                                if @temp_csv_campaign_name.to_s != csv[0].to_s
                                                    
                                                    @campaign = @db["all_campaign"].find('campaign_name' => csv[0].to_s, 'network_type' => all_bulk_d['network_type'].to_s, 'network_id' => all_bulk_d['network_id'].to_i)
                                                    @db.close     
                                                    
                                                    if @campaign.count.to_i == 1
                                                        
                                                        @campaign.each_with_index do |campaign_d|
                                                            @temp_campaign_id = campaign_d["campaign_id"]
                                                        end
                                                        
                                                        db_name = "adgroup_shenma_"+all_bulk_d['network_id'].to_s
                                                        @adgroup = @baidu_db[db_name].find('campaign_id' => @temp_campaign_id.to_i, 'adgroup_name'=> csv[1].to_s)
                                                        @baidu_db.close()
                                                        
                                                        if @adgroup.count.to_i == 1
                                                            
                                                            @temp_csv_campaign_name = csv[0].to_s
                                                            @temp_csv_adgroup_name = csv[1].to_s
                                                            
                                                            @adgroup.each_with_index do |adgroup, adgroup_index|
                                                                @temp_adgroup_id = adgroup["adgroup_id"]
                                                            end
                                                        end
                                                        
                                                    end
                                                
                                                # second case, campaign name match but adgroup not match
                                                elsif @temp_csv_campaign_name.to_s == csv[0].to_s && @temp_csv_adgroup_name.to_s != csv[1].to_s 
                                                  
                                                    db_name = "adgroup_shenma_"+all_bulk_d['network_id'].to_s
                                                    @adgroup = @baidu_db[db_name].find('campaign_id' => @temp_campaign_id.to_i, 'adgroup_name'=> csv[1].to_s)
                                                    @baidu_db.close()
                                                    
                                                    if @adgroup.count.to_i == 1
                                                        
                                                        @temp_csv_adgroup_name = csv[1].to_s
                                                        
                                                        @adgroup.each_with_index do |adgroup, adgroup_index|
                                                            @temp_adgroup_id = adgroup["adgroup_id"]
                                                        end
                                                    end
                                                end 
                                                # lazy catch
                                                
                                                
                                                
                                                if @campaign.count.to_i == 1
                                                    
                                                    if @adgroup.count.to_i == 1
                                                        
                                                        if @remain_quote.to_i <= 500
                                                            temp_csv = csv
                                                            # temp_csv << "not enough quota on the channel"
                                                            temp_csv[10] = "not enough quota on the channel"
                                                            
                                                            error_csv_array << temp_csv
                                                        else
                                                            
                                                            
                                                            requesttypearray = []
                                                            requesttype = {}
                                                                
                                                            requesttype[:adgroupId]    =  @temp_adgroup_id
                                                            requesttype[:title]    =  csv[2].to_s
                                                            requesttype[:description1]    =  csv[3].to_s
                                                            
                                                            visiturl = csv[5].to_s
                                                            if !visiturl.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes" && visiturl.to_s != ""
                                                                visiturl = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                visiturl = visiturl + "&campaign_id="+@temp_campaign_id.to_s+"&adgroup_id="+@temp_adgroup_id.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                                visiturl = visiturl + "&cookie="+@cookie_length.to_s
                                                                visiturl = visiturl + "&device=pc"
                                                                visiturl = visiturl + "&tv=v1&durl="+CGI.escape(csv[5].to_s)
                                                            end
                                                            requesttype[:destinationUrl]    =  visiturl.to_s
                                                            
                                                            if csv[9].to_s != ""
                                                                if csv[9].to_s.downcase == "paused"
                                                                    pause = "true"
                                                                else
                                                                    pause = "false"
                                                                end
                                                                
                                                                requesttype[:pause]    =  pause.to_s.downcase
                                                            else
                                                                pause = "false"
                                                                requesttype[:pause]    =  pause.to_s.downcase
                                                            end
                                                            
                                                            if csv[6].to_s != ""
                                                                requesttype[:displayUrl]    =  csv[6].to_s
                                                            end
                                                            
                                                            requesttypearray << requesttype
                                                            
                                                            service = "creative"
                                                            method = "addCreative"
                                                            
                                                            json = {'header' => { 
                                                                        'token' => @apitoken.to_s,
                                                                        'username' => @username.to_s,
                                                                        'password' => @password.to_s 
                                                                      },
                                                                 'body'  => {
                                                                        'creativeTypes' => requesttypearray
                                                                      }
                                                                }       
                                                                
                                                            @update_info = shenma_api(service,method,json)
                                                            @logger.info @update_info
                                                            
                                                            @header = @update_info["header"]
                                                            @remain_quote = @header["leftQuota"]
                                                                
                                                            if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                                                                
                                                                data_hash = {}
                                                                insert_hash = {}
                                                              
                                                                insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                                insert_hash[:campaign_id] = @temp_campaign_id.to_i
                                                                insert_hash[:adgroup_id] = @update_info["body"]["creativeTypes"][0]["adgroupId"].to_i
                                                                insert_hash[:ad_id] = @update_info["body"]["creativeTypes"][0]["creativeId"].to_i
                                                                insert_hash[:title] = @update_info["body"]["creativeTypes"][0]["title"].to_s
                                                                insert_hash[:description] = @update_info["body"]["creativeTypes"][0]["description1"].to_s
                                                                insert_hash[:visit_url] = @update_info["body"]["creativeTypes"][0]["destinationUrl"].to_i
                                                                insert_hash[:show_url] = @update_info["body"]["creativeTypes"][0]["displayUrl"].to_i
                                                                insert_hash[:pause] = @update_info["body"]["creativeTypes"][0]["pause"].to_s
                                                                insert_hash[:status] = @update_info["body"]["creativeTypes"][0]["status"].to_i
                                                                insert_hash[:create_date] = @now
                                                                insert_hash[:update_date] = @now
                                                                    
                                                                data_hash[:insert_one] = insert_hash
                                                                data_arr << data_hash
                                                              
                                                                if data_arr.count.to_i > 1000
                                                                    db_name = "ad_shenma_"+all_bulk_d['network_id'].to_s
                                                                    @baidu_db[db_name].bulk_write(data_arr)
                                                                    @baidu_db.close()
                                                                    
                                                                    data_arr = []
                                                                end
                                                                
                                                            else  
                                                              
                                                                temp_csv = csv
                                                                # temp_csv << @header[:res_header][:failures][:message].to_s
                                                                temp_csv[10] = @update_info["header"]["failures"][0]["message"].to_s
                                                                
                                                                error_csv_array << temp_csv
                                                              
                                                                # update_msg_array << "Row " + row.to_s + " is not added. " + @header[:res_header][:failures][:message].to_s
                                                            end
                                                        
                                                        end
                                                      
                                                    else
                                                        temp_csv = csv
                                                        # temp_csv << "Adgroud not found."
                                                        temp_csv[10] = "Adgroud not found."
                                                        
                                                        error_csv_array << temp_csv
                                                    end  
                                                  
                                                else
                                                    temp_csv = csv
                                                    # temp_csv << "Campaign not found."
                                                    temp_csv[10] = "Campaign not found."
                                                    
                                                    error_csv_array << temp_csv
                                                end
                                                
                                              
                                            end
                                          
                                          
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        db_name = "ad_shenma_"+all_bulk_d['network_id'].to_s
                                        @baidu_db[db_name].bulk_write(data_arr)
                                        @baidu_db.close()
                                    end
                                  
                                  
                                elsif all_bulk_d['network_type'].to_s == 'baidu'
                                  
                                    xlsx.each_with_index do |csv, csv_index|
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Adgroup Name") && 
                                                csv[2].to_s.include?("Title") &&
                                                csv[3].to_s.include?("Description 1") && 
                                                csv[4].to_s.include?("Description 2") && 
                                                csv[5].to_s.include?("Landing Page URL") &&
                                                csv[6].to_s.include?("Display URL") && 
                                                csv[7].to_s.include?("Mobile Landing Page URL") && 
                                                csv[8].to_s.include?("Mobile Display URL (Optional)") &&
                                                csv[9].to_s.include?("Status") 
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                      
                                        elsif csv_index.to_i != 0
                                          
                                            
                                            
                                            row = csv_index.to_i + 1
                                            if csv[0].to_s == "" || csv[1].to_s == "" || csv[2].to_s == "" || csv[3].to_s == "" || csv[4].to_s == "" || csv[5].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Require field."
                                                temp_csv[10] << "Missing Require field."
                                                
                                                error_csv_array << temp_csv
                                                
                                            elsif csv[2].to_s.bytes.count.to_i < 15
                                                temp_csv = csv
                                                # temp_csv << "Title is too short."
                                                temp_csv[10] = "Title is too short."
                                                
                                                error_csv_array << temp_csv
                                            else
                                                
                                                # lazy catch
                                                # first case, campaign name not match 
                                                if @temp_csv_campaign_name.to_s != csv[0].to_s
                                                    
                                                    @campaign = @db["all_campaign"].find('campaign_name' => csv[0].to_s, 'network_type' => all_bulk_d['network_type'].to_s, 'network_id' => all_bulk_d['network_id'].to_i)
                                                    @db.close     
                                                    
                                                    if @campaign.count.to_i == 1
                                                        
                                                        @campaign.each_with_index do |campaign_d|
                                                            @temp_campaign_id = campaign_d["campaign_id"]
                                                        end
                                                        
                                                        db_name = "adgroup_baidu_"+all_bulk_d['network_id'].to_s
                                                        @adgroup = @baidu_db[db_name].find('campaign_id' => @temp_campaign_id.to_i, 'name'=> csv[1].to_s)
                                                        @baidu_db.close()
                                                        
                                                        if @adgroup.count.to_i == 1
                                                            
                                                            @temp_csv_campaign_name = csv[0].to_s
                                                            @temp_csv_adgroup_name = csv[1].to_s
                                                            
                                                            @adgroup.each_with_index do |adgroup, adgroup_index|
                                                                @temp_adgroup_id = adgroup["adgroup_id"]
                                                            end
                                                        end
                                                        
                                                    end
                                                
                                                # second case, campaign name match but adgroup not match
                                                elsif @temp_csv_campaign_name.to_s == csv[0].to_s && @temp_csv_adgroup_name.to_s != csv[1].to_s 
                                                  
                                                    db_name = "adgroup_baidu_"+all_bulk_d['network_id'].to_s
                                                    @adgroup = @baidu_db[db_name].find('campaign_id' => @temp_campaign_id.to_i, 'name'=> csv[1].to_s)
                                                    @baidu_db.close()
                                                    
                                                    if @adgroup.count.to_i == 1
                                                        
                                                        @temp_csv_adgroup_name = csv[1].to_s
                                                        
                                                        @adgroup.each_with_index do |adgroup, adgroup_index|
                                                            @temp_adgroup_id = adgroup["adgroup_id"]
                                                        end
                                                    end
                                                end 
                                                # lazy catch
                                                
                                                
                                                
                                                if @campaign.count.to_i == 1
                                                    
                                                    if @adgroup.count.to_i == 1
                                                        
                                                        if @remain_quote.to_i <= 500
                                                            temp_csv = csv
                                                            # temp_csv << "not enough quota on the channel"
                                                            temp_csv[10] = "not enough quota on the channel"
                                                            
                                                            error_csv_array << temp_csv
                                                        else
                                                            
                                                            
                                                            requesttypearray = []
                                                            requesttype = {}
                                                                
                                                            requesttype[:adgroupId]    =  @temp_adgroup_id
                                                            requesttype[:title]    =  csv[2].to_s
                                                            requesttype[:description1]    =  csv[3].to_s
                                                            requesttype[:description2]    =  csv[4].to_s
                                                            requesttype[:status]    =     0
                                                            
                                                            visiturl = csv[5].to_s
                                                            if !visiturl.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes" && visiturl.to_s != ""
                                                                visiturl = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                visiturl = visiturl + "&campaign_id="+@temp_campaign_id.to_s+"&adgroup_id="+@temp_adgroup_id.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                                visiturl = visiturl + "&cookie="+@cookie_length.to_s
                                                                visiturl = visiturl + "&device=pc"
                                                                visiturl = visiturl + "&tv=v1&durl="+CGI.escape(csv[5].to_s)
                                                            end
                                                            requesttype[:pcDestinationUrl]    =  visiturl.to_s
                                                            
                                                            if csv[9].to_s != ""
                                                                if csv[9].to_s.downcase == "paused"
                                                                    pause = "true"
                                                                else
                                                                    pause = "false"
                                                                end
                                                                
                                                                requesttype[:pause]    =  pause.to_s.downcase
                                                            else
                                                                pause = "false"
                                                                requesttype[:pause]    =  pause.to_s.downcase
                                                            end
                                                            
                                                            if csv[6].to_s != ""
                                                                requesttype[:pcDisplayUrl]    =  csv[6].to_s
                                                            end
                                                            
                                                            if csv[7].to_s != ""
                                                                m_visiturl = csv[7].to_s
                                                                if !m_visiturl.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes"
                                                                    m_visiturl = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                    m_visiturl = m_visiturl + "&campaign_id="+@temp_campaign_id.to_s+"&adgroup_id="+@temp_adgroup_id.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                                    m_visiturl = m_visiturl + "&cookie="+@cookie_length.to_s
                                                                    m_visiturl = m_visiturl + "&device=mobile"
                                                                    m_visiturl = m_visiturl + "&tv=v1&durl="+CGI.escape(csv[7].to_s)
                                                                end
                                                                requesttype[:mobileDestinationUrl]    =  m_visiturl.to_s
                                                            end
                                                            
                                                            if csv[8].to_s != ""
                                                                requesttype[:mobileDisplayUrl]    =  csv[8].to_s
                                                            end
                                                            
                                                            requesttypearray << requesttype
                                                            
                                                            service = "CreativeService"
                                                            method = "addCreative"
                                                            
                                                            json = {'header' => { 
                                                                        'token' => @apitoken.to_s,
                                                                        'username' => @username.to_s,
                                                                        'password' => @password.to_s 
                                                                      },
                                                                 'body'  => {
                                                                        'creativeTypes' => requesttypearray
                                                                      }
                                                                }       
                                                                
                                                            @update_info = baidu_api(service,method,json)
                                                            @logger.info @update_info
                                                            
                                                            @header = @update_info["header"]
                                                            @remain_quote = @header["rquota"]
                                                                
                                                            if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                                        
                                                                
                                                                
                                                                # db_name = "ad_baidu_"+all_bulk_d['network_id'].to_s
#                                                                 
                                                                # @baidu_db[db_name].insert_one({ 
                                                                                                # network_id: all_bulk_d['network_id'].to_i,
                                                                                                # campaign_id: @temp_campaign_id.to_i, 
                                                                                                # adgroup_id: @update_info["body"]["data"][0]["adgroupId"].to_i,
                                                                                                # ad_id: @update_info["body"]["data"][0]["creativeId"].to_i,
                                                                                                # title: @update_info["body"]["data"][0]["title"].to_s, 
                                                                                                # description_1: @update_info["body"]["data"][0]["description1"].to_s, 
                                                                                                # description_2: @update_info["body"]["data"][0]["description2"].to_s, 
                                                                                                # visit_url: @update_info["body"]["data"][0]["pcDestinationUrl"].to_i,
                                                                                                # show_url: @update_info["body"]["data"][0]["pcDisplayUrl"].to_i,
                                                                                                # mobile_visit_url: @update_info["body"]["data"][0]["mobileDestinationUrl"].to_i,
                                                                                                # mobile_show_url: @update_info["body"]["data"][0]["mobileDisplayUrl"].to_i,
                                                                                                # pause: @update_info["body"]["data"][0]["pause"].to_s,
                                                                                                # status: @update_info["body"]["data"][0]["status"].to_i,
                                                                                                # temp: 0,
                                                                                                # devicePreference: @update_info["body"]["data"][0]["devicePreference"].to_i,
                                                                                                # tabs: 0,
                                                                                                # update_date: @now,                                            
                                                                                                # create_date: @now })
                                                                # @baidu_db.close()
                                                                
                                                                
                                                                data_hash = {}
                                                                insert_hash = {}
                                                              
                                                                insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                                insert_hash[:campaign_id] = @temp_campaign_id.to_i
                                                                insert_hash[:adgroup_id] = @update_info["body"]["data"][0]["adgroupId"].to_i
                                                                insert_hash[:ad_id] = @update_info["body"]["data"][0]["creativeId"].to_i
                                                                insert_hash[:title] = @update_info["body"]["data"][0]["title"].to_s
                                                                insert_hash[:description_1] = @update_info["body"]["data"][0]["description1"].to_s
                                                                insert_hash[:description_2] = @update_info["body"]["data"][0]["description2"].to_s
                                                                insert_hash[:visit_url] = @update_info["body"]["data"][0]["pcDestinationUrl"].to_i
                                                                insert_hash[:show_url] = @update_info["body"]["data"][0]["pcDisplayUrl"].to_i
                                                                insert_hash[:mobile_visit_url] = @update_info["body"]["data"][0]["mobileDestinationUrl"].to_i
                                                                insert_hash[:mobile_show_url] = @update_info["body"]["data"][0]["mobileDisplayUrl"].to_i
                                                                insert_hash[:pause] = @update_info["body"]["data"][0]["pause"].to_s
                                                                insert_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                                                                insert_hash[:temp] = 0
                                                                insert_hash[:devicePreference] = @update_info["body"]["data"][0]["devicePreference"].to_i
                                                                insert_hash[:tabs] = 0
                                                                insert_hash[:create_date] = @now
                                                                insert_hash[:update_date] = @now
                                                                    
                                                                data_hash[:insert_one] = insert_hash
                                                                data_arr << data_hash
                                                              
                                                                if data_arr.count.to_i > 1000
                                                                    db_name = "ad_baidu_"+all_bulk_d['network_id'].to_s
                                                                    @baidu_db[db_name].bulk_write(data_arr)
                                                                    @baidu_db.close()
                                                                    
                                                                    data_arr = []
                                                                end
                                                                
                                                            else  
                                                              
                                                                temp_csv = csv
                                                                # temp_csv << @header[:res_header][:failures][:message].to_s
                                                                temp_csv[10] = @update_info["header"]["failures"][0]["message"].to_s
                                                                
                                                                error_csv_array << temp_csv
                                                              
                                                                # update_msg_array << "Row " + row.to_s + " is not added. " + @header[:res_header][:failures][:message].to_s
                                                            end
                                                        
                                                        end
                                                      
                                                    else
                                                        temp_csv = csv
                                                        # temp_csv << "Adgroud not found."
                                                        temp_csv[10] = "Adgroud not found."
                                                        
                                                        error_csv_array << temp_csv
                                                    end  
                                                  
                                                else
                                                    temp_csv = csv
                                                    # temp_csv << "Campaign not found."
                                                    temp_csv[10] = "Campaign not found."
                                                    
                                                    error_csv_array << temp_csv
                                                end
                                                
                                              
                                            end
                                          
                                          
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        db_name = "ad_baidu_"+all_bulk_d['network_id'].to_s
                                        @baidu_db[db_name].bulk_write(data_arr)
                                        @baidu_db.close()
                                    end
                                  
                                elsif all_bulk_d['network_type'].to_s == 'sogou'
                                    xlsx.each_with_index do |csv, csv_index|
                                        
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Adgroup Name") && 
                                                csv[2].to_s.include?("Title") &&
                                                csv[3].to_s.include?("Description 1") && 
                                                csv[4].to_s.include?("Description 2") && 
                                                csv[5].to_s.include?("Landing Page URL") &&
                                                csv[6].to_s.include?("Display URL") && 
                                                csv[7].to_s.include?("Mobile Landing Page URL") && 
                                                csv[8].to_s.include?("Mobile Display URL (Optional)") &&
                                                csv[9].to_s.include?("Status") 
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                      
                                        elsif csv_index.to_i != 0
                                            row = csv_index.to_i + 1
                                            if csv[0].to_s == "" || csv[1].to_s == "" || csv[2].to_s == "" || csv[3].to_s == "" || csv[4].to_s == "" || csv[5].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Require field."
                                                temp_csv[10] << "Missing Require field."
                                                
                                                error_csv_array << temp_csv
                                                
                                            elsif csv[2].to_s.bytes.count.to_i < 15
                                                temp_csv = csv
                                                # temp_csv << "Title is too short."
                                                temp_csv[10] = "Title is too short."
                                                
                                                error_csv_array << temp_csv
                                            else
                                              
                                                # lazy catch
                                                if @temp_csv_campaign_name.to_s != csv[0].to_s
                                                  
                                                    # @campaign = @db["all_campaign"].find('campaign_name' => csv[0].to_s, 'network_type' => all_bulk_d['network_type'].to_s, 'network_id' => all_bulk_d['network_id'].to_i)
                                                    # @db.close     
                                                  
                                                    
                                                    
                                                    @campaign = @db["all_campaign"].find({ "$and" => [ {:campaign_name => csv[0].to_s}, {:network_type => all_bulk_d['network_type'].to_s}, {:network_id => all_bulk_d['network_id'].to_i} ] })
                                                    @db.close     
                                                    
                                                    if @campaign.count.to_i == 1
                                                        
                                                        @campaign.each_with_index do |campaign_d|
                                                            @temp_campaign_id = campaign_d["cpc_plan_id"]
                                                        end
                                                        
                                                        db_name = "adgroup_sogou_"+all_bulk_d['network_id'].to_s
                                                        
                                                        # @adgroup = @sogou_db[db_name].find('cpc_plan_id' => @temp_campaign_id.to_i, 'name'=> csv[1].to_s)
                                                        # @sogou_db.close()
                                                        
                                                        
                                                        
                                                        @adgroup = @sogou_db[db_name].find({ "$and" => [ {:cpc_plan_id => @temp_campaign_id.to_i}, {:name => csv[1].to_s} ] })
                                                        @sogou_db.close()
                                                        
                                                        if @adgroup.count.to_i == 1
                                                          
                                                            @temp_csv_adgroup_name = csv[1].to_s
                                                            @temp_csv_campaign_name = csv[0].to_s
                                                            
                                                            @adgroup.each_with_index do |adgroup, adgroup_index|
                                                                @temp_adgroup_id = adgroup["cpc_grp_id"]
                                                            end
                                                        end
                                                    end
                                                    
                                                elsif @temp_csv_adgroup_name.to_s != csv[1].to_s && @temp_csv_campaign_name.to_s == csv[0].to_s
                                                  
                                                    db_name = "adgroup_sogou_"+all_bulk_d['network_id'].to_s
                                                    
                                                    # @adgroup = @sogou_db[db_name].find('cpc_plan_id' => @temp_campaign_id.to_i, 'name'=> csv[1].to_s)
                                                    # @sogou_db.close()
                                                    
                                                    
                                                    @adgroup = @sogou_db[db_name].find({ "$and" => [ {:cpc_plan_id => @temp_campaign_id.to_i}, {:name => csv[1].to_s} ] })
                                                    @sogou_db.close()
                                                    
                                                    if @adgroup.count.to_i == 1
                                                      
                                                        @temp_csv_adgroup_name = csv[1].to_s
                                                        
                                                        @adgroup.each_with_index do |adgroup, adgroup_index|
                                                            @temp_adgroup_id = adgroup["cpc_grp_id"]
                                                        end
                                                    end
                                                end
                                                # lazy catch
                                                
                                              
                                                if @campaign.count.to_i == 1
                                                    
                                                    if @adgroup.count.to_i == 1
                                                        
                                                        if @remain_quote.to_i <= 500
                                                            temp_csv = csv
                                                            # temp_csv << "not enough quota on the channel"
                                                            temp_csv[10] = "not enough quota on the channel"
                                                            
                                                            error_csv_array << temp_csv
                                                        else
                                                            
                                                            requesttypearray = []
                                                            requesttype = {}
                                                                
                                                            requesttype[:cpcGrpId]    =  @temp_adgroup_id
                                                            requesttype[:title]    =  csv[2].to_s
                                                            requesttype[:description1]    =  csv[3].to_s
                                                            requesttype[:description2]    =  csv[4].to_s
                                                            
                                                            visiturl = csv[5].to_s
                                                            if !visiturl.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes" && visiturl.to_s != ""
                                                                visiturl = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                visiturl = visiturl + "&campaign_id="+@temp_campaign_id.to_s+"&adgroup_id="+@temp_adgroup_id.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                                visiturl = visiturl + "&cookie="+@cookie_length.to_s
                                                                visiturl = visiturl + "&device=pc"
                                                                visiturl = visiturl + "&tv=v1&durl="+CGI.escape(csv[5].to_s)
                                                            end
                                                            requesttype[:visitUrl]    =  visiturl.to_s
                                                            
                                                            if csv[9].to_s != ""
                                                                if csv[9].to_s.downcase == "paused"
                                                                    pause = "true"
                                                                else
                                                                    pause = "false"
                                                                end
                                                                
                                                                requesttype[:pause]    =  pause.to_s.downcase
                                                            else
                                                                pause = "false"
                                                                requesttype[:pause]    =  pause.to_s.downcase
                                                            end
                                                            
                                                            if csv[6].to_s != ""
                                                                requesttype[:showUrl]    =  csv[6].to_s
                                                            end
                                                            
                                                            if csv[7].to_s != ""
                                                                m_visiturl = csv[7].to_s
                                                                if !m_visiturl.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes"
                                                                    m_visiturl = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                    m_visiturl = m_visiturl + "&campaign_id="+@temp_campaign_id.to_s+"&adgroup_id="+@temp_adgroup_id.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                                    m_visiturl = m_visiturl + "&cookie="+@cookie_length.to_s
                                                                    m_visiturl = m_visiturl + "&device=mobile"
                                                                    m_visiturl = m_visiturl + "&tv=v1&durl="+CGI.escape(csv[7].to_s)
                                                                end
                                                                requesttype[:mobileVisitUrl]    =  m_visiturl.to_s
                                                            end
                                                            
                                                            if csv[8].to_s != ""
                                                                requesttype[:mobileShowUrl]    =  csv[8].to_s
                                                            end
                                                            
                                                            requesttypearray << requesttype
                                                            
                                                            @update_status = @sogou_api.call(:add_cpc_idea, message: { cpcIdeaTypes: requesttypearray })
                                                            @header = @update_status.header.to_hash
                                                            @msg = @header[:res_header][:desc]
                                                            @remain_quote = @header[:res_header][:rquota]
                                                            @logger.info @header
                                                              
                                                            @update_status_body = @update_status.body.to_hash
                                                            # @logger.info @update_status_body
                                                            @logger.info requesttypearray
                                                            
                                                            if @msg.to_s.downcase == "success"
                                                                # update_msg_array << "Row " + row.to_s + " ad add to "+ csv[0].to_s + " Success."
                                                                
                                                                # db_name = "ad_sogou_"+all_bulk_d['network_id'].to_s
                                                                # @sogou_db[db_name].insert_one({ 
                                                                                                # network_id: all_bulk_d['network_id'].to_i,
                                                                                                # cpc_plan_id: @temp_campaign_id.to_i, 
                                                                                                # cpc_grp_id: @update_status_body[:add_cpc_idea_response][:cpc_idea_types][:cpc_grp_id].to_i,
                                                                                                # cpc_idea_id: @update_status_body[:add_cpc_idea_response][:cpc_idea_types][:cpc_idea_id].to_i,
                                                                                                # cpc_idea_id_2: "",
                                                                                                # title: csv[2].to_s, 
                                                                                                # description_1: csv[3].to_s, 
                                                                                                # description_2: csv[4].to_s, 
                                                                                                # visit_url: visiturl.to_s,
                                                                                                # show_url: csv[6].to_s,
                                                                                                # mobile_visit_url: m_visiturl.to_s,
                                                                                                # mobile_show_url: csv[8].to_s,
                                                                                                # pause: @update_status_body[:add_cpc_idea_response][:cpc_idea_types][:pause].to_s,
                                                                                                # status: @update_status_body[:add_cpc_idea_response][:cpc_idea_types][:status].to_s,
                                                                                                # active: "0",
                                                                                                # idea_not_approve_reason: "",
                                                                                                # mobile_visit_not_approve_reason: "",
                                                                                                # update_date: @now,                                            
                                                                                                # create_date: @now })
#                                                                                           
                                                                # @sogou_db.close()        
                                                                
                                                                
                                                                data_hash = {}
                                                                insert_hash = {}
                                                                
                                                                
                                                                insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                                insert_hash[:cpc_plan_id] = @temp_campaign_id.to_i
                                                                insert_hash[:cpc_grp_id] = @update_status_body[:add_cpc_idea_response][:cpc_idea_types][:cpc_grp_id].to_i
                                                                insert_hash[:cpc_idea_id] = @update_status_body[:add_cpc_idea_response][:cpc_idea_types][:cpc_idea_id].to_i
                                                                insert_hash[:cpc_idea_id_2] = ""
                                                                insert_hash[:title] = csv[2].to_s
                                                                insert_hash[:description_1] = csv[3].to_s
                                                                insert_hash[:description_2] = csv[4].to_s
                                                                insert_hash[:visit_url] = visiturl.to_s
                                                                insert_hash[:show_url] = csv[6].to_s
                                                                insert_hash[:mobile_visit_url] = m_visiturl.to_s
                                                                insert_hash[:mobile_show_url] = csv[8].to_s
                                                                insert_hash[:pause] = @update_status_body[:add_cpc_idea_response][:cpc_idea_types][:pause].to_s
                                                                insert_hash[:status] = @update_status_body[:add_cpc_idea_response][:cpc_idea_types][:status].to_s
                                                                insert_hash[:active] = "0"
                                                                insert_hash[:idea_not_approve_reason] = ""
                                                                insert_hash[:mobile_visit_not_approve_reason] = ""
                                                                insert_hash[:create_date] = @now
                                                                insert_hash[:update_date] = @now
                                                                    
                                                                data_hash[:insert_one] = insert_hash
                                                                data_arr << data_hash
                                                              
                                                                if data_arr.count.to_i > 1000
                                                                    db_name = "ad_sogou_"+all_bulk_d['network_id'].to_s
                                                                    @sogou_db[db_name].bulk_write(data_arr)
                                                                    @sogou_db.close()
                                                                    
                                                                    data_arr = []
                                                                end                  
                                                            else  
                                                              
                                                                temp_csv = csv
                                                                # temp_csv << @header[:res_header][:failures][:message].to_s
                                                                temp_csv[10] = @header[:res_header][:failures][:message].to_s
                                                                
                                                                error_csv_array << temp_csv
                                                              
                                                                # update_msg_array << "Row " + row.to_s + " is not added. " + @header[:res_header][:failures][:message].to_s
                                                            end
                                                        
                                                        end
                                                      
                                                    else
                                                        temp_csv = csv
                                                        # temp_csv << "Adgroud not found."
                                                        temp_csv[10] = "Adgroud not found."
                                                        
                                                        error_csv_array << temp_csv
                                                    end  
                                                  
                                                else
                                                    temp_csv = csv
                                                    # temp_csv << "Campaign not found."
                                                    temp_csv[10] = "Campaign not found."
                                                    
                                                    error_csv_array << temp_csv
                                                end
                                              
                                            end
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        db_name = "ad_sogou_"+all_bulk_d['network_id'].to_s
                                        @sogou_db[db_name].bulk_write(data_arr)
                                        @sogou_db.close()
                                    end
                                    
                                elsif all_bulk_d['network_type'].to_s == '360'
#                                   
                                    xlsx.each_with_index do |csv, csv_index|
                                      
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Adgroup Name") && 
                                                csv[2].to_s.include?("Title") &&
                                                csv[3].to_s.include?("Description 1") && 
                                                csv[4].to_s.include?("Description 2") && 
                                                csv[5].to_s.include?("Landing Page URL") &&
                                                csv[6].to_s.include?("Display URL") && 
                                                csv[7].to_s.include?("Mobile Landing Page URL") && 
                                                csv[8].to_s.include?("Mobile Display URL (Optional)") &&
                                                csv[9].to_s.include?("Status") 
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                      
                                        elsif csv_index.to_i != 0
                                            row = csv_index.to_i + 1
                                            if csv[0].to_s == "" || csv[1].to_s == "" || csv[2].to_s == "" || csv[3].to_s == "" || csv[5].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Require field."
                                                temp_csv[10] = "Missing Require field."
                                                
                                                error_csv_array << temp_csv
                                                
                                            elsif csv[2].to_s.bytes.count.to_i < 15
                                                temp_csv = csv
                                                # temp_csv << "Title is too short."
                                                temp_csv[10] = "Title is too short."
                                                
                                                error_csv_array << temp_csv
                                            else
                                              
                                                # lazy catch
                                                if @temp_csv_campaign_name.to_s != csv[0].to_s || @temp_csv_adgroup_name.to_s != csv[1].to_s
                                                  
                                                    db_name = "adgroup_360_"+all_bulk_d['network_id'].to_s
                                                    @adgroup = @threesixty_db[db_name].find('campaign_name' => csv[0].to_s, 'adgroup_name'=> csv[1].to_s).limit(1)
                                                    @threesixty_db.close()
                                                    
                                                    if @adgroup.count.to_i == 1
                                                        
                                                        @temp_csv_campaign_name = csv[0].to_s
                                                        @temp_csv_adgroup_name = csv[1].to_s
                                                        
                                                        @adgroup.each_with_index do |adgroup, adgroup_index|
                                                            @temp_adgroup_id = adgroup["adgroup_id"]
                                                            @temp_campaign_id = adgroup["campaign_id"]
                                                        end
                                                      
                                                    end
                                                end
                                                # lazy catch
                                                
                                                
                                                if @adgroup.count.to_i == 1
                                                    
                                                    if @remain_quote.to_i <= 500
                                                        temp_csv = csv
                                                        # temp_csv << "not enough quota on the channel"
                                                        temp_csv[10] = "not enough quota on the channel"
                                                        
                                                        error_csv_array << temp_csv
                                                    else
                                                        
                                                        visiturl = csv[5].to_s
                                                        if csv[5].to_s != ""
                                                            if !visiturl.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes"
                                                                visiturl = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                visiturl = visiturl + "&campaign_id={planid}&adgroup_id={groupid}&ad_id={creativeid}&keyword_id={wordid}"
                                                                visiturl = visiturl + "&cookie="+@cookie_length.to_s
                                                                visiturl = visiturl + "&device=pc"
                                                                visiturl = visiturl + "&tv=v1&durl="+CGI.escape(csv[5].to_s)
                                                            end
                                                        end
                                                        
                                                        m_visiturl = csv[7].to_s
                                                        if csv[7].to_s != ""
                                                            if !m_visiturl.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes"
                                                                m_visiturl = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                m_visiturl = m_visiturl + "&campaign_id={planid}&adgroup_id={groupid}&ad_id={creativeid}&keyword_id={wordid}"
                                                                m_visiturl = m_visiturl + "&cookie="+@cookie_length.to_s
                                                                m_visiturl = m_visiturl + "&device=mobile"
                                                                m_visiturl = m_visiturl + "&tv=v1&durl="+CGI.escape(csv[7].to_s)
                                                            end
                                                        end
                                                            
                                                        requesttypearray = []
                                                        request_str = '{"groupId":'+@temp_adgroup_id.to_s+',"title":"'+csv[2].to_s+'","description1":"'+csv[3].to_s+'","description2":"'+csv[4].to_s+'","destinationUrl":"'+visiturl.to_s+'","displayUrl":"'+csv[6].to_s+'","mobileDestinationUrl":"'+m_visiturl.to_s+'","mobileDisplayUrl":"'+csv[8].to_s+'"}'
                                                        requesttypearray << request_str
                                                        
                                                        request = '['+requesttypearray.join(",")+']'
                                                                     
                                                        body = { 
                                                            'creatives' => request
                                                        }
                                                        
                                                        @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "creative", "add", body)
                                                        @affectedRecords = @update_res["creative_add_response"]
                                                        
                                                        @logger.info @affectedRecords
                                                        # @logger.info request_str
                                                        @logger.info @update_res
                                                        
                                                        @remain_quote = @response.headers["quotaremain"].to_i
                                                        
                                                        if @update_res["creative_add_response"]["failures"].nil?
                                                            # update_msg_array << "Row " + row.to_s + " adgroup add to "+temp_network_name.to_s+" Success."
                                                            
                                                            # ad_db_name = "ad_360_"+all_bulk_d['network_id'].to_s
                                                            # @threesixty_db[ad_db_name].insert_one({ 
                                                                      # network_id: all_bulk_d['network_id'].to_i,
                                                                      # account_id: temp_360_account_id.to_i,
                                                                      # account_name: temp_network_name.to_s,
                                                                      # campaign_id: @temp_campaign_id.to_i,
                                                                      # campaign_name: @temp_csv_campaign_name.to_s,
                                                                      # adgroup_id: @temp_adgroup_id.to_i,
                                                                      # ad_id: @update_res["creative_add_response"]["creativeIdList"]["item"].to_i,
                                                                      # title: csv[2].to_s, 
                                                                      # description: csv[3].to_s, 
                                                                      # status: "启用",
                                                                      # sys_status: "有效",
                                                                      # show_url: csv[6].to_s,
                                                                      # visit_url: visiturl.to_s,
                                                                      # mobile_show_url: csv[8].to_s,
                                                                      # mobile_visit_url: m_visiturl.to_s,
                                                                      # extend_ad_type: 3,
                                                                      # update_date: @now,                                            
                                                                      # create_date: @now 
                                                                      # })
                                                            # @threesixty_db.close() 
                                                            
                                                            
                                                            data_hash = {}
                                                            insert_hash = {}
                                                            
                                                            insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                            insert_hash[:account_id] = temp_360_account_id.to_i
                                                            insert_hash[:account_name] = temp_network_name.to_s
                                                            insert_hash[:campaign_id] = @temp_campaign_id.to_i
                                                            insert_hash[:campaign_name] = @temp_csv_campaign_name.to_s
                                                            insert_hash[:adgroup_id] = @temp_adgroup_id.to_i
                                                            insert_hash[:ad_id] = @update_res["creative_add_response"]["creativeIdList"]["item"].to_i
                                                            insert_hash[:title] = csv[2].to_s
                                                            insert_hash[:description] = csv[3].to_s
                                                            insert_hash[:status] = "启用"
                                                            insert_hash[:sys_status] = "有效"
                                                            insert_hash[:show_url] = csv[6].to_s
                                                            insert_hash[:visit_url] = visiturl.to_s,
                                                            insert_hash[:mobile_show_url] = csv[8].to_s
                                                            insert_hash[:mobile_visit_url] = m_visiturl.to_s
                                                            insert_hash[:extend_ad_type] = 3
                                                            insert_hash[:create_date] = @now
                                                            insert_hash[:update_date] = @now
                                                                
                                                            data_hash[:insert_one] = insert_hash
                                                            data_arr << data_hash
                                                          
                                                            if data_arr.count.to_i > 1000
                                                                db_name = "ad_360_"+all_bulk_d['network_id'].to_s
                                                                @threesixty_db[db_name].bulk_write(data_arr)
                                                                @threesixty_db.close()
                                                                
                                                                data_arr = []
                                                            end
                                                            
                                                        else
                                                            temp_csv = csv
                                                            # temp_csv << @update_res["group_batchAdd_response"]["failures"]["item"]["message"].to_s
                                                            temp_csv[10] = @update_res["group_batchAdd_response"]["failures"]["item"]["message"].to_s
                                                            
                                                            error_csv_array << temp_csv
                                                        end
                                                      
                                                    end
                                                    
                                                else
                                                  
                                                    temp_csv = csv
                                                    # temp_csv << "Adgroud not found."
                                                    temp_csv[10] = "Adgroud not found."
                                                    
                                                    error_csv_array << temp_csv
                                                    
                                                end
                                              
                                              
                                              
                                            end
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        db_name = "ad_360_"+all_bulk_d['network_id'].to_s
                                        @threesixty_db[db_name].bulk_write(data_arr)
                                        @threesixty_db.close()
                                    end
                                end  
                                
                            
                            elsif all_bulk_d['upload_type'] == "keyword"
                                @logger.info "worker bulkadd keyword start" 
                                same_keyword_array = []
                                
                                data_arr = []
                                
                                
                                if all_bulk_d['network_type'].to_s == 'shenma'
                                  
                                    xlsx.each_with_index do |csv, csv_index|
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Adgroup Name") && 
                                                csv[2].to_s.include?("Keyword") &&
                                                csv[3].to_s.include?("Match Type") && 
                                                csv[4].to_s.include?("Keyword Status") && 
                                                csv[5].to_s.include?("Max. CPC ") &&
                                                csv[6].to_s.include?("Landing Page URL") &&
                                                csv[7].to_s.include?("Mobile landing Page URL")
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                      
                                        elsif csv_index.to_i != 0
                                            
                                            row = csv_index.to_i + 1
                                            
                                            if csv[0].to_s == "" && csv[1].to_s == "" && csv[2].to_s == "" && csv[3].to_s == "" && csv[5].to_s == ""
                                                temp_csv = csv
                                                temp_csv[8] = "Missing Require field."
                                                # temp_csv << "Missing Require field."
                                                
                                                error_csv_array << temp_csv
                                            else
                                              
                                                if same_keyword_array.include?(csv[2].to_s)
                                                    temp_csv = csv
                                                    # temp_csv << "Duplicated words in submitted keywords"
                                                    temp_csv[8] = "Duplicated words in submitted keywords"
                                                    
                                                    error_csv_array << temp_csv
                                                else
                                                  
                                                    # lazy catch
                                                    if @temp_csv_campaign_name.to_s != csv[0].to_s
                                                      
                                                        # @campaign = @db["all_campaign"].find('campaign_name' => csv[0].to_s, 'network_type' => all_bulk_d['network_type'].to_s, 'network_id' => all_bulk_d['network_id'].to_i)
                                                        # @db.close
                                                        
                                                        
                                                      
                                                        @campaign = @db["all_campaign"].find({ "$and" => [ {:campaign_name => csv[0].to_s}, {:network_type => all_bulk_d['network_type'].to_s}, {:network_id => all_bulk_d['network_id'].to_i} ] })
                                                        @db.close     
                                                        
                                                        if @campaign.count.to_i == 1
                                                            
                                                            @campaign.each_with_index do |campaign_d|
                                                                @temp_campaign_id = campaign_d["campaign_id"]
                                                            end
                                                            
                                                            db_name = "adgroup_shenma_"+all_bulk_d['network_id'].to_s
                                                            
                                                            # @adgroup = @baidu_db[db_name].find('campaign_id' => @temp_campaign_id.to_i, 'name'=> csv[1].to_s)
                                                            # @baidu_db.close()
                                                            
                                                            
                                                            @adgroup = @baidu_db[db_name].find({ "$and" => [ {:campaign_id => @temp_campaign_id.to_i}, {:adgroup_name => csv[1].to_s} ] })
                                                            @baidu_db.close()
                                                            
                                                            if @adgroup.count.to_i == 1
                                                              
                                                                @temp_csv_adgroup_name = csv[1].to_s
                                                                @temp_csv_campaign_name = csv[0].to_s
                                                                
                                                                @adgroup.each_with_index do |adgroup, adgroup_index|
                                                                    @temp_adgroup_id = adgroup["adgroup_id"]
                                                                end
                                                            end
                                                            
                                                        end
                                                    
                                                    elsif @temp_csv_campaign_name.to_s == csv[0].to_s && @temp_csv_adgroup_name.to_s != csv[1].to_s
                                                      
                                                        db_name = "adgroup_shenma_"+all_bulk_d['network_id'].to_s
                                                        # @adgroup = @baidu_db[db_name].find('campaign_id' => @temp_campaign_id.to_i, 'name'=> csv[1].to_s)
                                                        # @baidu_db.close()
                                                        
                                                        @adgroup = @baidu_db[db_name].find({ "$and" => [ {:campaign_id => @temp_campaign_id.to_i}, {:adgroup_name => csv[1].to_s} ] })
                                                        @baidu_db.close()
                                                        
                                                        if @adgroup.count.to_i == 1
                                                          
                                                            @temp_csv_adgroup_name = csv[1].to_s
                                                            @temp_csv_campaign_name = csv[0].to_s
                                                            
                                                            @adgroup.each_with_index do |adgroup, adgroup_index|
                                                                @temp_adgroup_id = adgroup["adgroup_id"]
                                                            end
                                                        end
                                                    end
                                                    # lazy catch
                                                    
                                                    
                                                    if @campaign.count.to_i == 1
                                                        if @adgroup.count.to_i == 1
                                                          
                                                            if @remain_quote.to_i <= 500
                                                                temp_csv = csv
                                                                # temp_csv << "not enough quota on the channel"
                                                                temp_csv[8] = "not enough quota on the channel"
                                                                
                                                                error_csv_array << temp_csv
                                                            else
                                                              
                                                                requesttypearray = []
                                                                requesttype = {}
                                                                      
                                                                requesttype[:adgroupId]    =  @temp_adgroup_id
                                                                requesttype[:keyword]    =  csv[2].to_s
                                                                requesttype[:price]    =  csv[5].to_f
                                                                
                                                                if csv[4].to_s != ""
                                                                    if csv[4].to_s.downcase == "paused"
                                                                        pause = "true"
                                                                    else
                                                                        pause = "false"
                                                                    end
                                                                    
                                                                    requesttype[:pause]    =  pause.to_s.downcase
                                                                else
                                                                    pause = "false"
                                                                    requesttype[:pause]    =  pause.to_s.downcase
                                                                end
                                                                
                                                                if csv[3].to_s != ""
                                                                    if csv[3].to_s == "exact"
                                                                        matchType = 0
                                                                    elsif csv[3].to_s == "broad"
                                                                        matchType = 2
                                                                    elsif csv[3].to_s == "phrase"
                                                                        matchType = 1
                                                                    else
                                                                        matchType = 0
                                                                    end
                                                                    
                                                                    requesttype[:matchType]    =  matchType.to_i
                                                                end
                                                                
                                                                url = csv[6].to_s
                                                                if csv[6].to_s != ""
                                                                    if !url.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes"
                                                                      url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                      url = url + "&campaign_id="+@temp_campaign_id.to_s+"&adgroup_id="+@temp_adgroup_id.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                                      url = url + "&cookie="+@cookie_length.to_s
                                                                      url = url + "&device=pc"
                                                                      url = url + "&tv=v1&durl="+CGI.escape(csv[6].to_s)
                                                                    end
                                                                    requesttype[:destinationUrl]    =  url.to_s
                                                                end
                                                                
                                                                
                                                                requesttypearray << requesttype
                                                                
                                                                service = "keyword"
                                                                method = "addKeyword"
                                                                
                                                                json = {'header' => { 
                                                                            'token' => @apitoken.to_s,
                                                                            'username' => @username.to_s,
                                                                            'password' => @password.to_s  
                                                                          },
                                                                     'body'  => {
                                                                            'keywordTypes' => requesttypearray
                                                                          }
                                                                    }       
                                                                    
                                                                @update_info = shenma_api(service,method,json)
                                                                                                                                     
                                                                @logger.info @update_info 
                                                                
                                                                @header = @update_info["header"]
                                                                @remain_quote = @header["leftQuota"]
                                                                    
                                                                if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                                                                    
                                                                
                                                                    data_hash = {}
                                                                    insert_hash = {}
                                                                    
                                                                    insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                                    insert_hash[:campaign_id] = @temp_campaign_id.to_i
                                                                    insert_hash[:adgroup_id] = @update_info["body"]["keywordTypes"][0]["adgroupId"].to_i
                                                                    insert_hash[:keyword_id] = @update_info["body"]["keywordTypes"][0]["keywordId"].to_i
                                                                    insert_hash[:keyword] = @update_info["body"]["keywordTypes"][0]["keyword"].to_s
                                                                    insert_hash[:price] = @update_info["body"]["keywordTypes"][0]["price"].to_f
                                                                    insert_hash[:visit_url] = url.to_s
                                                                    insert_hash[:match_type] = @update_info["body"]["keywordTypes"][0]["matchType"].to_i
                                                                    insert_hash[:pause] = @update_info["body"]["keywordTypes"][0]["pause"].to_s
                                                                    insert_hash[:update_date] = @now
                                                                    insert_hash[:create_date] = @now
                                                                        
                                                                    data_hash[:insert_one] = insert_hash
                                                                    data_arr << data_hash
                                                                  
                                                                    if data_arr.count.to_i > 10000
                                                                        db_name = "keyword_shenma_"+all_bulk_d['network_id'].to_s
                                                                        @baidu_db[db_name].bulk_write(data_arr)
                                                                        @baidu_db.close()
                                                                        
                                                                        data_arr = []
                                                                    end
                                                                
                                                                
                                                                else
                                                                    temp_csv = csv
                                                                    # temp_csv << @header[:res_header][:failures][:message].to_s
                                                                    temp_csv[8] = @update_info["header"]["failures"][0]["message"].to_s
                                                                    
                                                                    error_csv_array << temp_csv   
                                                                    
                                                                    # if @update_info["header"]["failures"][0]["code"].to_i == 901631 || @update_info["header"]["failures"][0]["code"].to_i == 901635
                                                                        # same_keyword_array << csv[2].to_s
                                                                    # end
                                                                end
                                                              
                                                              
                                                            end
                                                            
                                                          
                                                          
                                                        else
                                                          
                                                            temp_csv = csv
                                                            temp_csv[8] = "Adgroup not found."
                                                            
                                                            error_csv_array << temp_csv
                                                          
                                                        end
                                                    else
                                                        temp_csv = csv
                                                        temp_csv[8] = "Campaign not found."
                                                        
                                                        error_csv_array << temp_csv
                                                    end
                                                  
                                                end
                                              
                                            end
                                            
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        db_name = "keyword_shenma_"+all_bulk_d['network_id'].to_s
                                        @baidu_db[db_name].bulk_write(data_arr)
                                        @baidu_db.close()
                                    end
                                  
                                  
                                  
                                  
                                elsif all_bulk_d['network_type'].to_s == 'baidu'
                                  
                                    xlsx.each_with_index do |csv, csv_index|
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Adgroup Name") && 
                                                csv[2].to_s.include?("Keyword") &&
                                                csv[3].to_s.include?("Match Type") && 
                                                csv[4].to_s.include?("Keyword Status") && 
                                                csv[5].to_s.include?("Max. CPC ") &&
                                                csv[6].to_s.include?("Landing Page URL") &&
                                                csv[7].to_s.include?("Mobile landing Page URL")
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                      
                                        elsif csv_index.to_i != 0
                                            
                                            row = csv_index.to_i + 1
                                            
                                            if csv[0].to_s == "" && csv[1].to_s == "" && csv[2].to_s == "" && csv[3].to_s == "" && csv[5].to_s == ""
                                                temp_csv = csv
                                                temp_csv[8] = "Missing Require field."
                                                # temp_csv << "Missing Require field."
                                                
                                                error_csv_array << temp_csv
                                            else
                                              
                                                if same_keyword_array.include?(csv[2].to_s)
                                                    temp_csv = csv
                                                    # temp_csv << "Duplicated words in submitted keywords"
                                                    temp_csv[8] = "Duplicated words in submitted keywords"
                                                    
                                                    error_csv_array << temp_csv
                                                else
                                                  
                                                    # lazy catch
                                                    if @temp_csv_campaign_name.to_s != csv[0].to_s
                                                      
                                                        # @campaign = @db["all_campaign"].find('campaign_name' => csv[0].to_s, 'network_type' => all_bulk_d['network_type'].to_s, 'network_id' => all_bulk_d['network_id'].to_i)
                                                        # @db.close
                                                        
                                                        
                                                      
                                                        @campaign = @db["all_campaign"].find({ "$and" => [ {:campaign_name => csv[0].to_s}, {:network_type => all_bulk_d['network_type'].to_s}, {:network_id => all_bulk_d['network_id'].to_i} ] })
                                                        @db.close     
                                                        
                                                        if @campaign.count.to_i == 1
                                                            
                                                            @campaign.each_with_index do |campaign_d|
                                                                @temp_campaign_id = campaign_d["campaign_id"]
                                                            end
                                                            
                                                            db_name = "adgroup_baidu_"+all_bulk_d['network_id'].to_s
                                                            
                                                            # @adgroup = @baidu_db[db_name].find('campaign_id' => @temp_campaign_id.to_i, 'name'=> csv[1].to_s)
                                                            # @baidu_db.close()
                                                            
                                                            
                                                            @adgroup = @baidu_db[db_name].find({ "$and" => [ {:campaign_id => @temp_campaign_id.to_i}, {:name => csv[1].to_s} ] })
                                                            @baidu_db.close()
                                                            
                                                            if @adgroup.count.to_i == 1
                                                              
                                                                @temp_csv_adgroup_name = csv[1].to_s
                                                                @temp_csv_campaign_name = csv[0].to_s
                                                                
                                                                @adgroup.each_with_index do |adgroup, adgroup_index|
                                                                    @temp_adgroup_id = adgroup["adgroup_id"]
                                                                end
                                                            end
                                                            
                                                        end
                                                    
                                                    elsif @temp_csv_campaign_name.to_s == csv[0].to_s && @temp_csv_adgroup_name.to_s != csv[1].to_s
                                                      
                                                        db_name = "adgroup_baidu_"+all_bulk_d['network_id'].to_s
                                                        # @adgroup = @baidu_db[db_name].find('campaign_id' => @temp_campaign_id.to_i, 'name'=> csv[1].to_s)
                                                        # @baidu_db.close()
                                                        
                                                        @adgroup = @baidu_db[db_name].find({ "$and" => [ {:campaign_id => @temp_campaign_id.to_i}, {:name => csv[1].to_s} ] })
                                                        @baidu_db.close()
                                                        
                                                        if @adgroup.count.to_i == 1
                                                          
                                                            @temp_csv_adgroup_name = csv[1].to_s
                                                            @temp_csv_campaign_name = csv[0].to_s
                                                            
                                                            @adgroup.each_with_index do |adgroup, adgroup_index|
                                                                @temp_adgroup_id = adgroup["adgroup_id"]
                                                            end
                                                        end
                                                    end
                                                    # lazy catch
                                                    
                                                    
                                                    if @campaign.count.to_i == 1
                                                        if @adgroup.count.to_i == 1
                                                          
                                                            if @remain_quote.to_i <= 500
                                                                temp_csv = csv
                                                                # temp_csv << "not enough quota on the channel"
                                                                temp_csv[8] = "not enough quota on the channel"
                                                                
                                                                error_csv_array << temp_csv
                                                            else
                                                              
                                                                requesttypearray = []
                                                                requesttype = {}
                                                                      
                                                                requesttype[:adgroupId]    =  @temp_adgroup_id
                                                                requesttype[:keyword]    =  csv[2].to_s
                                                                requesttype[:price]    =  csv[5].to_f
                                                                requesttype[:status]    =     0
                                                                
                                                                if csv[4].to_s != ""
                                                                    if csv[4].to_s.downcase == "paused"
                                                                        pause = "true"
                                                                    else
                                                                        pause = "false"
                                                                    end
                                                                    
                                                                    requesttype[:pause]    =  pause.to_s.downcase
                                                                else
                                                                    pause = "false"
                                                                    requesttype[:pause]    =  pause.to_s.downcase
                                                                end
                                                                
                                                                if csv[3].to_s != ""
                                                                    if csv[3].to_s == "exact"
                                                                        matchType = 1
                                                                    elsif csv[3].to_s == "broad"
                                                                        matchType = 2
                                                                    elsif csv[3].to_s == "phrase"
                                                                        matchType = 3
                                                                    else
                                                                        matchType = 3
                                                                    end
                                                                    
                                                                    requesttype[:matchType]    =  matchType.to_i
                                                                end
                                                                
                                                                url = csv[6].to_s
                                                                if csv[6].to_s != ""
                                                                    if !url.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes"
                                                                      url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                      url = url + "&campaign_id="+@temp_campaign_id.to_s+"&adgroup_id="+@temp_adgroup_id.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                                      url = url + "&cookie="+@cookie_length.to_s
                                                                      url = url + "&device=pc"
                                                                      url = url + "&tv=v1&durl="+CGI.escape(csv[6].to_s)
                                                                    end
                                                                    requesttype[:pcDestinationUrl]    =  url.to_s
                                                                end
                                                                
                                                                m_url = csv[7].to_s
                                                                if csv[7].to_s != ""
                                                                    if !m_url.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes" 
                                                                      m_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                      m_url = m_url + "&campaign_id="+@temp_campaign_id.to_s+"&adgroup_id="+@temp_adgroup_id.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                                      m_url = m_url + "&cookie="+@cookie_length.to_s
                                                                      m_url = m_url + "&device=mobile"
                                                                      m_url = m_url + "&tv=v1&durl="+CGI.escape(csv[7].to_s)
                                                                    end
                                                                    requesttype[:mobileDestinationUrl]    =  m_url.to_s
                                                                end
                                                                
                                                                requesttypearray << requesttype
                                                                
                                                                service = "KeywordService"
                                                                method = "addWord"
                                                                
                                                                json = {'header' => { 
                                                                            'token' => @apitoken.to_s,
                                                                            'username' => @username.to_s,
                                                                            'password' => @password.to_s  
                                                                          },
                                                                     'body'  => {
                                                                            'keywordTypes' => requesttypearray
                                                                          }
                                                                    }       
                                                                    
                                                                @update_info = baidu_api(service,method,json)
                                                                                                                                     
                                                                @logger.info @update_info 
                                                                
                                                                @header = @update_info["header"]
                                                                @remain_quote = @header["rquota"]
                                                                    
                                                                if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                                                                    
                                                                    # db_name = "keyword_baidu_"+all_bulk_d['network_id'].to_s
#                                                                     
                                                                    # @baidu_db[db_name].insert_one({ 
                                                                                                    # network_id: all_bulk_d['network_id'].to_i,
                                                                                                    # campaign_id: @temp_campaign_id.to_i,
                                                                                                    # adgroup_id: @update_info["body"]["data"][0]["adgroupId"].to_i,
                                                                                                    # keyword_id: @update_info["body"]["data"][0]["keywordId"].to_i,
                                                                                                    # keyword: @update_info["body"]["data"][0]["keyword"].to_s,
                                                                                                    # price: @update_info["body"]["data"][0]["price"].to_f, 
                                                                                                    # visit_url: url.to_s,
                                                                                                    # mobile_visit_url: m_url.to_s,
                                                                                                    # match_type: @update_info["body"]["data"][0]["matchType"].to_i,
                                                                                                    # pause: @update_info["body"]["data"][0]["pause"].to_s,
                                                                                                    # status: @update_info["body"]["data"][0]["status"].to_i,
                                                                                                    # cpc_quality: 0,
                                                                                                    # temp: "",
                                                                                                    # phrase_type: 1,
                                                                                                    # reliable: 0,
                                                                                                    # reason: "",
                                                                                                    # mobilequality: 0,
                                                                                                    # mobilereliable: 0,
                                                                                                    # mobilereason: 0,
                                                                                                    # wmatchprefer: 0,
                                                                                                    # tabs: 0,
                                                                                                    # update_date: @now,                                            
                                                                                                    # create_date: @now })
                                                                    # @baidu_db.close()
                                                                    
                                                                
                                                                    data_hash = {}
                                                                    insert_hash = {}
                                                                    
                                                                    insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                                    insert_hash[:campaign_id] = @temp_campaign_id.to_i
                                                                    insert_hash[:adgroup_id] = @update_info["body"]["data"][0]["adgroupId"].to_i
                                                                    insert_hash[:keyword_id] = @update_info["body"]["data"][0]["keywordId"].to_i
                                                                    insert_hash[:keyword] = @update_info["body"]["data"][0]["keyword"].to_s
                                                                    insert_hash[:price] = @update_info["body"]["data"][0]["price"].to_f
                                                                    insert_hash[:visit_url] = url.to_s
                                                                    insert_hash[:mobile_visit_url] = m_url.to_s
                                                                    insert_hash[:match_type] = @update_info["body"]["data"][0]["matchType"].to_i
                                                                    insert_hash[:pause] = @update_info["body"]["data"][0]["pause"].to_s
                                                                    insert_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                                                                    insert_hash[:cpc_quality] = 0
                                                                    insert_hash[:temp] = ""
                                                                    insert_hash[:phrase_type] = 1
                                                                    insert_hash[:reliable] = 0
                                                                    insert_hash[:reason] = ""
                                                                    insert_hash[:mobilequality] = 0
                                                                    insert_hash[:mobilereliable] = 0
                                                                    insert_hash[:mobilereason] = 0
                                                                    insert_hash[:wmatchprefer] = 0
                                                                    insert_hash[:tabs] = 0
                                                                    insert_hash[:update_date] = @now
                                                                    insert_hash[:create_date] = @now
                                                                        
                                                                    data_hash[:insert_one] = insert_hash
                                                                    data_arr << data_hash
                                                                  
                                                                    if data_arr.count.to_i > 10000
                                                                        db_name = "keyword_baidu_"+all_bulk_d['network_id'].to_s
                                                                        @baidu_db[db_name].bulk_write(data_arr)
                                                                        @baidu_db.close()
                                                                        
                                                                        data_arr = []
                                                                    end
                                                                
                                                                
                                                                else
                                                                    temp_csv = csv
                                                                    # temp_csv << @header[:res_header][:failures][:message].to_s
                                                                    temp_csv[8] = @update_info["header"]["failures"][0]["message"].to_s
                                                                    
                                                                    error_csv_array << temp_csv   
                                                                    
                                                                    if @update_info["header"]["failures"][0]["code"].to_i == 901631 || @update_info["header"]["failures"][0]["code"].to_i == 901635
                                                                        same_keyword_array << csv[2].to_s
                                                                    end
                                                                end
                                                              
                                                              
                                                            end
                                                            
                                                          
                                                          
                                                        else
                                                          
                                                            temp_csv = csv
                                                            temp_csv[8] = "Adgroup not found."
                                                            
                                                            error_csv_array << temp_csv
                                                          
                                                        end
                                                    else
                                                        temp_csv = csv
                                                        temp_csv[8] = "Campaign not found."
                                                        
                                                        error_csv_array << temp_csv
                                                    end
                                                  
                                                end
                                              
                                            end
                                            
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        db_name = "keyword_baidu_"+all_bulk_d['network_id'].to_s
                                        @baidu_db[db_name].bulk_write(data_arr)
                                        @baidu_db.close()
                                    end
                                    
                                    
                                elsif all_bulk_d['network_type'].to_s == 'sogou'
                                    xlsx.each_with_index do |csv, csv_index|
                                      
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Adgroup Name") && 
                                                csv[2].to_s.include?("Keyword") &&
                                                csv[3].to_s.include?("Match Type") && 
                                                csv[4].to_s.include?("Keyword Status") && 
                                                csv[5].to_s.include?("Max. CPC ") &&
                                                csv[6].to_s.include?("Landing Page URL") &&
                                                csv[7].to_s.include?("Mobile landing Page URL")
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                      
                                        elsif csv_index.to_i != 0
                                            row = csv_index.to_i + 1
                                            
                                            if csv[0].to_s == "" && csv[1].to_s == "" && csv[2].to_s == "" && csv[3].to_s == "" && csv[5].to_s == ""
                                                temp_csv = csv
                                                temp_csv[8] = "Missing Require field."
                                                # temp_csv << "Missing Require field."
                                                
                                                error_csv_array << temp_csv
                                            else
                                                
                                                if same_keyword_array.include?(csv[2].to_s)
                                                    temp_csv = csv
                                                    # temp_csv << "Duplicated words in submitted keywords"
                                                    temp_csv[8] = "Duplicated words in submitted keywords"
                                                    
                                                    error_csv_array << temp_csv
                                                else
                                                
                                                    # lazy catch
                                                    if @temp_csv_campaign_name.to_s != csv[0].to_s
                                                      
                                                        # @campaign = @db["all_campaign"].find('campaign_name' => csv[0].to_s, 'network_type' => all_bulk_d['network_type'].to_s, 'network_id' => all_bulk_d['network_id'].to_i)
                                                        # @db.close
                                                      
                                                        
                                                        @campaign = @db["all_campaign"].find({ "$and" => [ {:campaign_name => csv[0].to_s}, {:network_type => all_bulk_d['network_type'].to_s}, {:network_id => all_bulk_d['network_id'].to_i} ] })
                                                        @db.close     
                                                        
                                                        if @campaign.count.to_i == 1
                                                            
                                                            @campaign.each_with_index do |campaign_d|
                                                                @temp_campaign_id = campaign_d["cpc_plan_id"]
                                                            end
                                                            
                                                            db_name = "adgroup_sogou_"+all_bulk_d['network_id'].to_s
                                                            
                                                            # @adgroup = @sogou_db[db_name].find('cpc_plan_id' => @temp_campaign_id.to_i, 'name'=> csv[1].to_s)
                                                            # @sogou_db.close()
                                                            
                                                            
                                                            @adgroup = @sogou_db[db_name].find({ "$and" => [ {:cpc_plan_id => @temp_campaign_id.to_i}, {:name => csv[1].to_s} ] })
                                                            @sogou_db.close()
                                                            
                                                            if @adgroup.count.to_i == 1
                                                              
                                                                @temp_csv_adgroup_name = csv[1].to_s
                                                                @temp_csv_campaign_name = csv[0].to_s
                                                                
                                                                @adgroup.each_with_index do |adgroup, adgroup_index|
                                                                    @temp_adgroup_id = adgroup["cpc_grp_id"]
                                                                end
                                                            end
                                                            
                                                        end
                                                    
                                                    elsif @temp_csv_campaign_name.to_s == csv[0].to_s && @temp_csv_adgroup_name.to_s != csv[1].to_s
                                                      
                                                        db_name = "adgroup_sogou_"+all_bulk_d['network_id'].to_s
                                                        # @adgroup = @sogou_db[db_name].find('cpc_plan_id' => @temp_campaign_id.to_i, 'name'=> csv[1].to_s)
                                                        # @sogou_db.close()
                                                        
                                                        
                                                        @adgroup = @sogou_db[db_name].find({ "$and" => [ {:cpc_plan_id => @temp_campaign_id.to_i}, {:name => csv[1].to_s} ] })
                                                        @sogou_db.close()
                                                        
                                                        if @adgroup.count.to_i == 1
                                                          
                                                            @temp_csv_adgroup_name = csv[1].to_s
                                                            @temp_csv_campaign_name = csv[0].to_s
                                                            
                                                            @adgroup.each_with_index do |adgroup, adgroup_index|
                                                                @temp_adgroup_id = adgroup["cpc_grp_id"]
                                                            end
                                                        end
                                                    end
                                                    # lazy catch
                                                    
                                                    if @campaign.count.to_i == 1
                                                        
                                                        if @adgroup.count.to_i == 1 
                                                          
                                                            if @remain_quote.to_i <= 500
                                                                temp_csv = csv
                                                                # temp_csv << "not enough quota on the channel"
                                                                temp_csv[8] = "not enough quota on the channel"
                                                                
                                                                error_csv_array << temp_csv
                                                            else
                                                              
                                                                requesttypearray = []
                                                                requesttype = {}
                                                                      
                                                                requesttype[:cpcGrpId]    =  @temp_adgroup_id
                                                                requesttype[:cpc]    =  csv[2].to_s
                                                                requesttype[:price]    =  csv[5].to_f
                                                                # requesttype[:isShow]    =  csv[7].to_i
                                                                
                                                                if csv[4].to_s != ""
                                                                    if csv[4].to_s.downcase == "paused"
                                                                        pause = "true"
                                                                    else
                                                                        pause = "false"
                                                                    end
                                                                    
                                                                    requesttype[:pause]    =  pause.to_s.downcase
                                                                else
                                                                    pause = "false"
                                                                    requesttype[:pause]    =  pause.to_s.downcase
                                                                end
                                                                
                                                                if csv[3].to_s != ""
                                                                    if csv[3].to_s == "exact"
                                                                        matchType = 0
                                                                    elsif csv[3].to_s == "broad"
                                                                        matchType = 1
                                                                    elsif csv[3].to_s == "phrase"
                                                                        matchType = 2
                                                                    else
                                                                        matchType = 0
                                                                    end
                                                                    
                                                                    requesttype[:matchType]    =  matchType.to_i
                                                                end
                                                                
                                                                url = csv[6].to_s
                                                                if csv[6].to_s != ""
                                                                    if !url.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes"
                                                                      url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                      url = url + "&campaign_id="+@temp_campaign_id.to_s+"&adgroup_id="+@temp_adgroup_id.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                                      url = url + "&cookie="+@cookie_length.to_s
                                                                      url = url + "&device=pc"
                                                                      url = url + "&tv=v1&durl="+CGI.escape(csv[6].to_s)
                                                                    end
                                                                    requesttype[:visitUrl]    =  url.to_s
                                                                end
                                                                
                                                                m_url = csv[7].to_s
                                                                if csv[7].to_s != ""
                                                                    if !m_url.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes" 
                                                                      m_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                      m_url = m_url + "&campaign_id="+@temp_campaign_id.to_s+"&adgroup_id="+@temp_adgroup_id.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                                      m_url = m_url + "&cookie="+@cookie_length.to_s
                                                                      m_url = m_url + "&device=mobile"
                                                                      m_url = m_url + "&tv=v1&durl="+CGI.escape(csv[7].to_s)
                                                                    end
                                                                    requesttype[:mobileVisitUrl]    =  m_url.to_s
                                                                end
                                                                
                                                                requesttype[:isShow]    =  1
                                                                requesttypearray << requesttype
                                                                
                                                                # @logger.info requesttype
                                                                
                                                                @update_status = @sogou_api.call(:add_cpc, message: { cpcTypes: requesttypearray })
                                                                @header = @update_status.header.to_hash
                                                                
                                                                @msg = @header[:res_header][:desc]
                                                                @remain_quote = @header[:res_header][:rquota]
                                                                
                                                                @logger.info @header
                                                                  
                                                                @update_status_body = @update_status.body.to_hash
                                                                @logger.info @update_status_body
                                                                
                                                                
                                                                if @msg.to_s.downcase == "success"
                                                                    # update_msg_array << "Row " + row.to_s + " keyword add to "+ csv[0].to_s + " Success."
                                                                    
                                                                    # db_name = "keyword_sogou_"+all_bulk_d['network_id'].to_s
                                                                    # @sogou_db[db_name].insert_one({ 
                                                                                                    # network_id: all_bulk_d['network_id'].to_i,
                                                                                                    # cpc_plan_id: @temp_campaign_id.to_i, 
                                                                                                    # cpc_grp_id: @update_status_body[:add_cpc_response][:cpc_types][:cpc_grp_id].to_i,
                                                                                                    # keyword_id: @update_status_body[:add_cpc_response][:cpc_types][:cpc_id].to_i,
                                                                                                    # keyword: @update_status_body[:add_cpc_response][:cpc_types][:cpc].to_s,
                                                                                                    # price: @update_status_body[:add_cpc_response][:cpc_types][:price].to_f, 
                                                                                                    # visit_url: url.to_s,
                                                                                                    # mobile_visit_url: m_url.to_s,
                                                                                                    # match_type: @update_status_body[:add_cpc_response][:cpc_types][:match_type].to_i,
                                                                                                    # pause: @update_status_body[:add_cpc_response][:cpc_types][:pause].to_s,
                                                                                                    # status: @update_status_body[:add_cpc_response][:cpc_types][:status].to_i,
                                                                                                    # is_show: @update_status_body[:add_cpc_response][:cpc_types][:is_show].to_i,
                                                                                                    # cpc_quality: @update_status_body[:add_cpc_response][:cpc_types][:cpc_quality].to_f,
                                                                                                    # active: 0,
                                                                                                    # display: 0,
                                                                                                    # use_grp_price: @update_status_body[:add_cpc_response][:cpc_types][:opt][:opt_long][:value].to_i,
                                                                                                    # mobile_match_type: 3,
                                                                                                    # keyword_not_show_reason: "",
                                                                                                    # keyword_not_approve_reason: "",
                                                                                                    # update_date: @now,                                            
                                                                                                    # create_date: @now })
                                                                    # @sogou_db.close()
                                                                    
                                                                    
                                                                    
                                                                    data_hash = {}
                                                                    insert_hash = {}
                                                                    
                                                                    insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                                    insert_hash[:cpc_plan_id] = @temp_campaign_id.to_i
                                                                    insert_hash[:cpc_grp_id] = @update_status_body[:add_cpc_response][:cpc_types][:cpc_grp_id].to_i
                                                                    insert_hash[:keyword_id] = @update_status_body[:add_cpc_response][:cpc_types][:cpc_id].to_i
                                                                    insert_hash[:keyword] = @update_status_body[:add_cpc_response][:cpc_types][:cpc].to_s
                                                                    insert_hash[:price] = @update_status_body[:add_cpc_response][:cpc_types][:price].to_f
                                                                    insert_hash[:visit_url] = url.to_s
                                                                    insert_hash[:mobile_visit_url] = m_url.to_s
                                                                    insert_hash[:match_type] = @update_status_body[:add_cpc_response][:cpc_types][:match_type].to_i
                                                                    insert_hash[:pause] = @update_status_body[:add_cpc_response][:cpc_types][:pause].to_s
                                                                    insert_hash[:status] = @update_status_body[:add_cpc_response][:cpc_types][:status].to_i
                                                                    insert_hash[:is_show] = @update_status_body[:add_cpc_response][:cpc_types][:is_show].to_i
                                                                    insert_hash[:cpc_quality] = @update_status_body[:add_cpc_response][:cpc_types][:cpc_quality].to_f
                                                                    insert_hash[:active] = 0
                                                                    insert_hash[:display] = 0
                                                                    insert_hash[:use_grp_price] = @update_status_body[:add_cpc_response][:cpc_types][:opt][:opt_long][:value].to_i
                                                                    insert_hash[:mobile_match_type] = 3
                                                                    insert_hash[:keyword_not_show_reason] = ""
                                                                    insert_hash[:keyword_not_approve_reason] = ""
                                                                    insert_hash[:update_date] = @now
                                                                    insert_hash[:create_date] = @now
                                                                        
                                                                    data_hash[:insert_one] = insert_hash
                                                                    data_arr << data_hash
                                                                  
                                                                    if data_arr.count.to_i > 10000
                                                                        db_name = "keyword_sogou_"+all_bulk_d['network_id'].to_s
                                                                        @sogou_db[db_name].bulk_write(data_arr)
                                                                        @sogou_db.close()
                                                                        
                                                                        data_arr = []
                                                                    end
                                                                    
                                                                    
                                                                
                                                                else
                                                                    temp_csv = csv
                                                                    # temp_csv << @header[:res_header][:failures][:message].to_s
                                                                    temp_csv[8] = @header[:res_header][:failures][:message].to_s
                                                                    
                                                                    error_csv_array << temp_csv   
                                                                    
                                                                    if @header[:res_header][:failures][:message].to_s.downcase.include?("duplicated") && @header[:res_header][:failures][:message].to_s.downcase.include?("words")
                                                                        same_keyword_array << csv[2].to_s
                                                                    end
                                                                end
                                                              
                                                              
                                                            end
                                                          
                                                        else
                                                            temp_csv = csv
                                                            # temp_csv << "Adgroup not found."
                                                            temp_csv[8] = "Adgroup not found."
                                                            
                                                            error_csv_array << temp_csv
                                                        end
                                                        
                                                    else
                                                        temp_csv = csv
                                                        # temp_csv << "Campaign not found."
                                                        temp_csv[8] = "Campaign not found."
                                                        
                                                        error_csv_array << temp_csv
                                                    end
                                                end
                                            end
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        db_name = "keyword_sogou_"+all_bulk_d['network_id'].to_s
                                        @sogou_db[db_name].bulk_write(data_arr)
                                        @sogou_db.close()
                                    end
                                    
                                elsif all_bulk_d['network_type'].to_s == '360'
                                  
                                                                    
                                    xlsx.each_with_index do |csv, csv_index|
                                      
                                        if csv_index.to_i == 0
                                          
                                            if !(
                                                csv[0].to_s.include?("Campaign Name") && 
                                                csv[1].to_s.include?("Adgroup Name") && 
                                                csv[2].to_s.include?("Keyword") &&
                                                csv[3].to_s.include?("Match Type") && 
                                                csv[4].to_s.include?("Keyword Status") && 
                                                csv[5].to_s.include?("Max. CPC ") &&
                                                csv[6].to_s.include?("Landing Page URL") &&
                                                csv[7].to_s.include?("Mobile landing Page URL")
                                                )
                                                
                                                bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                                deladdbulkfile(all_bulk_d['file_id'])
                                                
                                                data = {:message => "excel file header error", :status => "true"}
                                                return render :json => data, :status => :ok
                                            end
                                      
                                        elsif csv_index.to_i != 0
                                            row = csv_index.to_i + 1
                                            
                                            if csv[0].to_s == "" && csv[1].to_s == "" && csv[2].to_s == "" && csv[3].to_s == "" && csv[5].to_s == ""
                                                temp_csv = csv
                                                # temp_csv << "Missing Require field."
                                                temp_csv[8] = "Missing Require field."
                                                
                                                error_csv_array << temp_csv
                                            else
                                              
                                                # lazy catch
                                                if @temp_csv_campaign_name.to_s != csv[0].to_s || @temp_csv_adgroup_name.to_s != csv[1].to_s
                                                  
                                                    db_name = "adgroup_360_"+all_bulk_d['network_id'].to_s
                                                    
                                                    # @adgroup = @threesixty_db[db_name].find('campaign_name' => csv[0].to_s, 'adgroup_name'=> csv[1].to_s).limit(1)
                                                    # @threesixty_db.close()
                                                    
                                                    @adgroup = @threesixty_db[db_name].find({ "$and" => [ {:campaign_name => csv[0].to_s}, {:adgroup_name => csv[1].to_s} ] }).limit(1)
                                                    @threesixty_db.close()
                                                    
                                                    if @adgroup.count.to_i == 1
                                                        
                                                        @temp_csv_campaign_name = csv[0].to_s
                                                        @temp_csv_adgroup_name = csv[1].to_s
                                                        
                                                        @adgroup.each_with_index do |adgroup, adgroup_index|
                                                            @temp_adgroup_id = adgroup["adgroup_id"]
                                                            @temp_campaign_id = adgroup["campaign_id"]
                                                        end
                                                      
                                                    end
                                                end
                                                # lazy catch
                                                
                                                if @adgroup.count.to_i == 1 
                                                    if @remain_quote.to_i <= 500
                                                        temp_csv = csv
                                                        # temp_csv << "not enough quota on the channel"
                                                        temp_csv[8] = "not enough quota on the channel"
                                                        
                                                        error_csv_array << temp_csv
                                                    else
                                                      
                                                        requesttypearray = []
                                                        # @logger.info csv[3].to_s
                                                        
                                                        if csv[3].to_s != ""
                                                          
                                                            if csv[3].to_s.downcase == "phrase_intelligence"
                                                                matchType = "phrase_intelligence"
                                                                dbmatchType = "智能短语"
                                                            elsif csv[3].to_s.downcase == "phrase"
                                                                matchType = "phrase"
                                                                dbmatchType = "短语"
                                                            elsif csv[3].to_s.downcase == "broad"
                                                                matchType = "broad"
                                                                dbmatchType = "广泛"
                                                            else
                                                                matchType = "exact"
                                                                dbmatchType = "精确"
                                                            end
                                                        else
                                                            matchType = "phrase_intelligence"
                                                            dbmatchType = "智能短语"
                                                        end
                                                        
                                                        
                                                        url = csv[6].to_s
                                                        m_url = csv[7].to_s

                                                        
                                                        request_str = '{"groupId":'+@temp_adgroup_id.to_s+',"word":"'+csv[2].to_s+'","price":'+csv[5].to_s+',"url":"'+url.to_s+'","mobileUrl":"'+m_url.to_s+'","matchType":"'+matchType.to_s+'"}'
                                                        requesttypearray << request_str
                                                        
                                                        
                                                        request = '['+requesttypearray.join(",")+']'
                                                        # @logger.info request
                                                                     
                                                        body = { 
                                                            'keywords' => request
                                                        }
                                                        
                                                        @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "keyword", "add", body)
                                                        @affectedRecords = @update_res["keyword_add_response"]
                                                        
                                                        # @logger.info @affectedRecords
                                                        # @logger.info @update_res
                                                        
                                                        @remain_quote = @response.headers["quotaremain"].to_i
                                                        
                                                        if @update_res["keyword_add_response"]["failures"].nil?
                                                            
                                                            update_keyword_id = @update_res["keyword_add_response"]["keywordIdList"]["item"].to_i
                                                            
                                                            if url.to_s != "" || m_url.to_s != ""
                                                                
                                                                begin
                                                                    @logger.info "360 keyword bulk add update url part"
                                                                    
                                                                    if url.to_s != "" && !url.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes"
                                                                        url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                        url = url + "&campaign_id={planid}&adgroup_id={groupid}&ad_id={creativeid}&keyword_id="+update_keyword_id.to_s
                                                                        url = url + "&cookie="+@cookie_length.to_s
                                                                        url = url + "&tv=v1&durl="+CGI.escape(csv[6].to_s)
                                                                    end
                                                                    
                                                                    if m_url.to_s != "" && !m_url.to_s.include?(".adeqo.") && @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes"
                                                                        m_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+all_bulk_d['network_id'].to_s
                                                                        m_url = m_url + "&campaign_id={planid}&adgroup_id={groupid}&ad_id={creativeid}&keyword_id="+update_keyword_id.to_s
                                                                        m_url = m_url + "&cookie="+@cookie_length.to_s
                                                                        m_url = m_url + "&tv=v1&durl="+CGI.escape(csv[7].to_s)
                                                                    end
                                                                    
                                                                    @logger.info request_str
                                                                    @logger.info request
                                                                    
                                                                    
                                                                    requesttypearray = []
                                                                    request_str = '{"id":'+update_keyword_id.to_s+',"url":"'+url.to_s+'","mobileUrl":"'+m_url.to_s+'"}'
                                                                    
                                                                    requesttypearray << request_str
                                                                    request = '['+requesttypearray.join(",")+']'
                                                                    
                                                                    body = { 
                                                                        'keywords' => request
                                                                    }
                                                                    
                                                                    @url_update_res = threesixty_api( @apitoken.to_s, @refresh_token, "keyword", "update", body)
                                                                    @url_affectedRecords = @url_update_res["keyword_update_response"]["affectedRecords"]
                                                                    @remain_quote = @response.headers["quotaremain"].to_i
                                                                    
                                                                    @logger.info @url_update_res
                                                                    @logger.info request
#                                                                     
                                                                    if !@url_update_res["keyword_update_response"]["failures"].nil?
                                                                        temp_csv = csv
                                                                        # temp_csv << "add url tracking failed, remember update later"
                                                                        temp_csv[8] = "add url tracking failed, remember update later"
                                                                        
                                                                        error_csv_array << temp_csv
                                                                    end
                                                                rescue Exception
                                                                    temp_csv = csv
                                                                    # temp_csv << "add url tracking failed, remember update later"
                                                                    temp_csv[8] = "add url tracking failed, remember update later"
                                                                    
                                                                    error_csv_array << temp_csv
                                                                end
                                                            end
                                                            
                                                            # db_name = "keyword_360_"+all_bulk_d['network_id'].to_s
                                                            # @threesixty_db[db_name].insert_one({ 
                                                                      # network_id: all_bulk_d['network_id'].to_i,
                                                                      # account_id: temp_360_account_id.to_i,
                                                                      # account_name: temp_network_name.to_s,
                                                                      # campaign_id: @temp_campaign_id.to_i,
                                                                      # campaign_name: csv[0].to_s,
                                                                      # adgroup_id: @temp_adgroup_id.to_i,
                                                                      # keyword_id: @update_res["keyword_add_response"]["keywordIdList"]["item"].to_i,
                                                                      # keyword: csv[2].to_s,
                                                                      # price: csv[5].to_f, 
                                                                      # status: "启用",
                                                                      # sys_status: "有效",
                                                                      # match_type: dbmatchType.to_s,
                                                                      # visit_url: url.to_s,
                                                                      # mobile_visit_url: m_url.to_s,
                                                                      # cpc_quality: 0,
                                                                      # extend_ad_type: 0,
                                                                      # negative_words: "",
                                                                      # update_date: @now,                                            
                                                                      # create_date: @now 
                                                                      # })
                                                            # @threesixty_db.close()
                                                            
                                                            data_hash = {}
                                                            insert_hash = {}
                                                            
                                                            insert_hash[:network_id] = all_bulk_d['network_id'].to_i
                                                            insert_hash[:account_id] = temp_360_account_id.to_i
                                                            insert_hash[:account_name] = temp_network_name.to_s
                                                            insert_hash[:campaign_id] = @temp_campaign_id.to_i
                                                            insert_hash[:campaign_name] = csv[0].to_s
                                                            insert_hash[:adgroup_id] = @temp_adgroup_id.to_i
                                                            insert_hash[:keyword_id] = @update_res["keyword_add_response"]["keywordIdList"]["item"].to_i
                                                            insert_hash[:keyword] = csv[2].to_s
                                                            insert_hash[:price] = csv[5].to_f
                                                            insert_hash[:status] = "启用"
                                                            insert_hash[:sys_status] = "有效"
                                                            insert_hash[:match_type] = dbmatchType.to_s
                                                            insert_hash[:visit_url] = url.to_s
                                                            insert_hash[:mobile_visit_url] = m_url.to_s
                                                            insert_hash[:cpc_quality] = 0
                                                            insert_hash[:extend_ad_type] = 0
                                                            insert_hash[:negative_words] = ""
                                                            insert_hash[:update_date] = @now
                                                            insert_hash[:create_date] = @now
                                                                
                                                            data_hash[:insert_one] = insert_hash
                                                            data_arr << data_hash
                                                          
                                                            if data_arr.count.to_i > 10000
                                                                db_name = "keyword_360_"+all_bulk_d['network_id'].to_s
                                                                @threesixty_db[db_name].bulk_write(data_arr)
                                                                @threesixty_db.close()
                                                                
                                                                data_arr = []
                                                            end 
                                                            
                                                        else
                                                            temp_csv = csv
                                                            # temp_csv << @update_res["keyword_add_response"]["failures"]["item"]["message"].to_s
                                                            temp_csv[8] = @update_res["keyword_add_response"]["failures"]["item"]["message"].to_s
                                                            
                                                            error_csv_array << temp_csv
                                                        end
                                                      
                                                      
                                                    end
                                                else
                                                    temp_csv = csv
                                                    # temp_csv << "Adgroup not found."
                                                    temp_csv[8] = "Adgroup not found."
                                                    
                                                    error_csv_array << temp_csv  
                                                end
                                                
                                                
                                            end
                                        end
                                    end
                                    
                                    if data_arr.count.to_i > 0
                                        db_name = "keyword_360_"+all_bulk_d['network_id'].to_s
                                        @threesixty_db[db_name].bulk_write(data_arr)
                                        @threesixty_db.close()
                                    end
                                end
                                
                               
                            else  
                            end
                            
                            
                        end
                        
                        
                    rescue Exception
                        
                        bulkreset(all_bulk_d['_id'],"add")
                        data = {:message => "excel file doesnt exist on server/file type error, last", :status => "true"}
                        return render :json => data, :status => :ok
                        
                    end
              
              elsif all_bulk_d['bulk_type'] == "edit"
                    
                    
                    tmp_file_path = "/datadrive/tmp/bulk/edit/"+ all_bulk_d['file_id'] + ".xlsx"
                    move_download_path = "/datadrive/tmp/bulk/edit/"
                    
                    begin
                        xlsx = Roo::Spreadsheet.open(tmp_file_path, extension: :xlsx)
                    rescue Exception
                        
                        bulkerror(all_bulk_d['_id'],"Excel file upload error/File type incorrect.")
                        deleditbulkfile(all_bulk_d['file_id'])
                        
                        data = {:message => "excel file doesnt exist on server/file type error, first", :status => "true"}
                        return render :json => data, :status => :ok
                    end
                    
                    
                    error_csv_array = []
                    temp_channel = ""
                    temp_channel_id = ""
                    api_login = 0
                    
                    begin
                    
                    if all_bulk_d['upload_type'] == "campaigns"
                        
                        data_arr = []
                        xlsx.each_with_index do |csv, csv_index|
                          
                            if csv_index.to_i == 0
                                    
                                if !(csv[0].to_s.include?("﻿ID") && csv[1].to_s.include?("﻿Status") && csv[2].to_s.include?("﻿Campaign") && csv[3].to_s.include?("Channel") && csv[4].to_s.include?("Channel ID") && csv[5].to_s.include?("Account Name"))
                                    bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                    deleditbulkfile(all_bulk_d['file_id'])
                                    
                                    data = {:message => "excel file header error", :status => "true"}
                                    return render :json => data, :status => :ok
                                end
                              
                            else
                                if csv[3].to_s != temp_channel || csv[4].to_s != temp_channel_id
                                  
                                    @logger.info "run login"
                                    # @logger.info csv[3].to_s
                                    # @logger.info csv[4].to_s
                                    
                                    @network = @db["network"].find('id' => csv[4].to_i)
                                    @db.close
                                    
                                    if @network.count.to_i <= 0
                                        
                                        @logger.info "run login network not found"
                                        
                                        temp_csv = csv
                                        temp_csv[6] = "Network not found"
                                         
                                        error_csv_array << temp_csv
                                        
                                        temp_channel = ""
                                        temp_channel_id = ""
                                        
                                        api_login = 0
                                    else
                                        
                                        temp_channel = csv[3].to_s
                                        temp_channel_id = csv[4].to_s
                                        
                                        @network.each do |network_d|
                        
                        
                                            if csv[3].to_s.downcase == "shenma"
                                              
                                                @username = network_d["username"]
                                                @password = network_d["password"]
                                                @apitoken = network_d["api_token"]
                                                
                                                
                                                service = "account"
                                                method = "getAccount"
                                                
                                                json = {'header' => { 
                                                                        'token' => @apitoken.to_s,
                                                                        'username' => @username.to_s,
                                                                        'password' => @password.to_s 
                                                                    },
                                                         'body'  => {
                                                                        'requestData' => ["account_all"]
                                                                    }
                                                        }
                                                        
                                                        
                                                @account_info = shenma_api(service,method,json)
                                                
                                                if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                                                    @header = @account_info["header"]
                                                    @remain_quote = @header["leftQuota"]
                                                    
                                                    
                                                    if @remain_quote.to_i <= 500  
                                                        temp_csv = csv
                                                        temp_csv[6] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                                    else
                                                        login = 1
                                                    end
                                                else
                                                    temp_csv = csv
                                                    temp_csv[6] = @account_info["header"]["failures"][0]["message"].to_s
                                                    error_csv_array << temp_csv        
                                                end
                        
                                            elsif csv[3].to_s.downcase == "baidu"
                                              
                                                @username = network_d["username"]
                                                @password = network_d["password"]
                                                @apitoken = network_d["api_token"]
                                                      
                                                service = "AccountService"
                                                method = "getAccountInfo"
                                                
                                                json = {'header' => { 
                                                                        'token' => @apitoken.to_s,
                                                                        'username' => @username.to_s,
                                                                        'password' => @password.to_s 
                                                                    },
                                                         'body'  => {
                                                                        'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                                                                    }
                                                        }       
                                                        
                                                @account_info = baidu_api(service,method,json)
                                                # @logger.info @account_info
                                                
                                                if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                                                    @header = @account_info["header"]
                                                    @remain_quote = @header["rquota"]
                                                    
                                                    if @remain_quote.to_i <= 500  
                                                        temp_csv = csv
                                                        temp_csv[6] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                                    else
                                                        api_login = 1
                                                    end
                                                else
                                                    temp_csv = csv
                                                    temp_csv[6] = @account_info["header"]["failures"][0]["message"].to_s
                                                    error_csv_array << temp_csv    
                                                end
                                              
                                              
                        
                                            elsif csv[3].to_s.downcase == "sogou"
                                                
                                                sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                                                sogou_result = @sogou_api.call(:get_account_info)
                                                
                                                # @logger.info sogou_result
                                                
                                                if sogou_result.header[:res_header][:desc].to_s == "success"
                                                    @remain_quote = sogou_result.header[:res_header][:rquota].to_i
                                                    if @remain_quote.to_i <= 500
                                                        
                                                        temp_csv = csv
                                                        temp_csv[6] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                        
                                                    else
                                                        api_login = 1
                                                        sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcPlanService")
                                                        
                                                    end
                                                else
                                                    
                                                    temp_csv = csv
                                                    # temp_csv[6] = sogou_result.header[:res_header][:failures][:message].to_s
                                                    if @header[:res_header][:failures][:message].to_s == ""
                                                        temp_csv[6] = "Publisher API server error."
                                                    else
                                                        temp_csv[6] = @header[:res_header][:failures][:message].to_s
                                                    end
                                                    error_csv_array << temp_csv
                                                    
                                                end
                                              
                                              
                                              
                                            elsif csv[3].to_i.to_s == "360" || csv[3].to_s.downcase == "threesixty" || csv[3].to_i == 360  
                                              
                                                @username = network_d["username"]
                                                @password = network_d["password"]
                                                @apitoken = network_d["api_token"]
                                                @apisecret = network_d["api_secret"]
                                                
                                                temp_360_account_id = network_d["accountid"]
                                                
                                                login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                                                @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                                                
                                                @logger.info @username
                                                
                                                if !@refresh_token.nil?
                                                    api_login = 1
                                                    @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "account", "getInfo")
                                                    
                                                    @remain_quote = @response.headers["quotaremain"].to_i
                                                    if @remain_quote.to_i <= 500
                                                        temp_csv = csv
                                                        temp_csv[6] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                                    end
                                                else
                                                  
                                                    temp_csv = csv
                                                    temp_csv[6] = login_info["account_clientLogin_response"]["failures"]["item"]["message"].to_s
                                                    error_csv_array << temp_csv
                                                    
                                                end
                                              
                                            else
                                                api_login = 0
                                                temp_channel = ""
                                                temp_channel_id = ""
                                                
                                                temp_csv = csv
                                                temp_csv[6] = "Channel Incorrect"
                                                error_csv_array << temp_csv
                                            end
                                        end
                                    end
                                end 
                                
                                if api_login == 1
                                    
                                    if csv[3].to_s.downcase == "shenma"
                                      
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[6] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            pause = nil                                
                                            if csv[1].downcase.to_s == "inactive"
                                                pause = "true"
                                            elsif csv[1].downcase.to_s == "active"
                                                pause = "false"
                                            else
                                                pause = "false"
                                            end
                                            
                                            service = "campaign"
                                            method = "updateCampaign"
                                            
                                            json = {'header' => { 
                                                                    'token' => @apitoken.to_s,
                                                                    'username' => @username.to_s,
                                                                    'password' => @password.to_s 
                                                                },
                                                     'body'  => {
                                                                    'campaignTypes' => [{"campaignId" => id_array_d_array[2].to_i,"pause" => pause}]
                                                                }
                                                    }
                                                    
                                                    
                                            @update_info = shenma_api(service,method,json)
                                            
                                            @header = @update_info["header"]
                                            @remain_quote = @header["leftQuota"]
                                            @logger.info @update_info
                                            
                                            
                                            if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                                                # @db["all_campaign"].find('campaign_id' => csv[0].to_i,'network_type' => "baidu").update_one('$set'=> { 'status' => @update_info["body"]["data"][0]["status"].to_i,'pause' => pause.to_s })
                                                # @db.close
                                                
                                                
                                                set_detail_hash = {}
                                                set_detail_hash[:pause] = pause.to_s
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:campaign_id] = csv[0].to_i
                                                filter_hash[:network_type] = "shenma"
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                  
                                                    
                                                    @db[:all_campaign].bulk_write(data_arr)
                                                    @db.close  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                                
                                                
                                            else  
                                                temp_csv = csv
                                                temp_csv[6] = @update_info["header"]["failures"][0]["message"].to_s  
                                                
                                                error_csv_array << temp_csv
                                            end
                                          
                                        end
                                      
                                    
                                    elsif csv[3].to_s.downcase == "baidu"
                                    
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[6] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            pause = nil                                
                                            if csv[1].downcase.to_s == "inactive"
                                                pause = "true"
                                            elsif csv[1].downcase.to_s == "active"
                                                pause = "false"
                                            else
                                                pause = "false"
                                            end
                                            
                                            service = "CampaignService"
                                            method = "updateCampaign"
                                            
                                            json = {'header' => { 
                                                                    'token' => @apitoken.to_s,
                                                                    'username' => @username.to_s,
                                                                    'password' => @password.to_s 
                                                                },
                                                     'body'  => {
                                                                    'campaignTypes' => [{"campaignId" => csv[0].to_i,"pause" => pause, "status" => 0}]
                                                                }
                                                    }       
                                                    
                                            @update_info = baidu_api(service,method,json)
                                            @logger.info @update_info
                                            
                                            
                                            if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                                                # @db["all_campaign"].find('campaign_id' => csv[0].to_i,'network_type' => "baidu").update_one('$set'=> { 'status' => @update_info["body"]["data"][0]["status"].to_i,'pause' => pause.to_s })
                                                # @db.close
                                                
                                                
                                                set_detail_hash = {}
                                                set_detail_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                                                set_detail_hash[:pause] = pause.to_s
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:campaign_id] = csv[0].to_i
                                                filter_hash[:network_type] = "baidu"
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                  
                                                    @db[:all_campaign].bulk_write(data_arr)
                                                    @db.close  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                                
                                                
                                            else  
                                                temp_csv = csv
                                                temp_csv[6] = @update_info["header"]["failures"][0]["message"].to_s  
                                                
                                                error_csv_array << temp_csv
                                            end
                                          
                                        end
                                    
                                    elsif csv[3].to_s.downcase == "sogou"
                                      
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[6] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            pause = nil                                
                                            if csv[1].downcase.to_s == "inactive"
                                                db_status = 12
                                                pause = "true"
                                            elsif csv[1].downcase.to_s == "active"
                                                pause = "false"
                                                db_status = 11
                                            else
                                                pause = "false"
                                                db_status = 11
                                            end
                                            
                                            requesttypearray = []
                                            requesttype = {}
                                                                           
                                            requesttype[:cpcPlanId]    =  csv[0].to_i
                                            requesttype[:pause]    =  pause
                                                 
                                            requesttypearray << requesttype
                                            
                                            @update_status = @sogou_api.call(:update_cpc_plan, message: { cpcPlanTypes: requesttypearray })
                                            @header = @update_status.header.to_hash
                                            @msg = @header[:res_header][:desc]
                                            @remain_quote = @header[:res_header][:rquota]
                                            
                                            @logger.info requesttypearray
                                            @logger.info @msg
                                            
                                            if @msg.to_s.downcase == "success"
                                                # @db["all_campaign"].find('cpc_plan_id' => csv[0].to_i,'network_type' => "sogou").update_one('$set'=> { 'status' => db_status.to_i })
                                                # @db.close
                                                
                                                
                                                
                                                set_detail_hash = {}
                                                set_detail_hash[:status] = db_status.to_i
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:cpc_plan_id] = csv[0].to_i
                                                filter_hash[:network_type] = "sogou"
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                  
                                                    @db[:all_campaign].bulk_write(data_arr)
                                                    @db.close  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                                
                                                
                                            else  
                                                temp_csv = csv
                                                if @header[:res_header][:failures][:message].to_s == ""
                                                    temp_csv[6] = "Publisher API server error."
                                                else
                                                    temp_csv[6] = @header[:res_header][:failures][:message].to_s
                                                end
                                                
                                                error_csv_array << temp_csv
                                            end
                                        end
                                      
                                    elsif csv[3].to_i.to_s == "360" || csv[3].to_s.downcase == "threesixty" || csv[3].to_i == 360
                                        
                                        if csv[1].downcase.to_s == "inactive"
                                            status_360 = "pause"
                                            db_status = "暂停"
                                            db_sys_status = "推广计划暂停"
                                        
                                        elsif csv[1].downcase.to_s == "active"
                                            status_360 = "enable"
                                            db_status = "启用"
                                            db_sys_status = "有效"
                                        else
                                            status_360 = "enable"
                                            db_status = "启用"
                                            db_sys_status = "有效"
                                        end
                                        
                                        body = {}
                                        body[:id] = csv[0].to_i
                                        body[:status] = status_360
                                        
                                        @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "campaign", "update", body)
                                        @affectedRecords = @update_res["campaign_update_response"]["id"]
                                        
                                        @logger.info body
                                        @logger.info @update_res
                                        @logger.info @affectedRecords
                                        @remain_quote = @response.headers["quotaremain"].to_i
                                        # @logger.info @remain_quote
                                        
                                        if @update_res["campaign_update_response"]["failures"].nil?
                                          
                                            if @affectedRecords.to_i == 0
                                                temp_csv = csv
                                                temp_csv[6] = "ID not found."
                                                
                                                error_csv_array << temp_csv
                                            else
                                                @db["all_campaign"].find('campaign_id' => csv[0].to_i,'network_type' => "360").update_one('$set'=> { 'status' => db_status.to_s,'sys_status' => db_sys_status.to_s})    
                                                @db.close
                                                
                                                
                                                set_detail_hash = {}
                                                set_detail_hash[:status] = db_status.to_s
                                                set_detail_hash[:sys_status] = db_sys_status.to_s
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:campaign_id] = csv[0].to_i
                                                filter_hash[:network_type] = "360"
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                  
                                                    @db[:all_campaign].bulk_write(data_arr)
                                                    @db.close  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                            end
                                        else
                                            temp_csv = csv
                                            temp_csv[6] = @update_res["campaign_update_response"]["failures"]["item"]["message"].to_s
                                            
                                            error_csv_array << temp_csv
                                        end
                                        
                                    else  
                                        temp_csv = csv
                                        temp_csv[6] = "Channel Incorrect"
                                        error_csv_array << temp_csv
                                        
                                        api_login = 0
                                        temp_channel = ""
                                        temp_channel_id = ""
                                    end
                                    
                                end
                              
                                
                            end
                        end
                      
                        if data_arr.count.to_i > 0
                                                  
                            @db[:all_campaign].bulk_write(data_arr)
                            @db.close  
                            
                            data_arr = []
                        end
                    
                     
                    elsif all_bulk_d['upload_type'] == "adgroup"
                      
                        data_arr = []
                      
                        xlsx.each_with_index do |csv, csv_index|
                            if csv_index.to_i == 0
                                    
                                if !(
                                    csv[0].to_s.include?("﻿Ad Group ID") && 
                                    csv[1].to_s.include?("﻿Status") && 
                                    csv[2].to_s.include?("﻿Ad Group Name") && 
                                    csv[3].to_s.include?("﻿Campaign ID") &&
                                    csv[4].to_s.include?("﻿Campaign Name") && 
                                    csv[5].to_s.include?("﻿Channel Type") && 
                                    csv[6].to_s.include?("﻿Channel ID") &&
                                    csv[7].to_s.include?("﻿Channel Name") &&  
                                    csv[8].to_s.include?("﻿Default Max. CPC")
                                    )
                                    bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                    deleditbulkfile(all_bulk_d['file_id'])
                                    
                                    data = {:message => "excel file header error", :status => "true"}
                                    return render :json => data, :status => :ok
                                end
                              
                            else
                              
                                if csv[5].to_s != temp_channel || csv[6].to_s != temp_channel_id
                                  
                                    if data_arr.count.to_i > 0
                                      
                                        if temp_channel == "shenma"
                                          
                                            db_name = "adgroup_shenma_"+temp_channel_id.to_i.to_s
                                                      
                                            @baidu_db[db_name].bulk_write(data_arr)
                                            @baidu_db.close()
                                      
                                        elsif temp_channel == "baidu"
                                            
                                            db_name = "adgroup_baidu_"+temp_channel_id.to_i.to_s
                                                      
                                            @baidu_db[db_name].bulk_write(data_arr)
                                            @baidu_db.close()  
                                        
                                        
                                        elsif temp_channel == "sogou"
                                            
                                            db_name = "adgroup_sogou_"+temp_channel_id.to_i.to_s
                                                      
                                            @sogou_db[db_name].bulk_write(data_arr)
                                            @sogou_db.close() 
                                            
                                        elsif temp_channel == "360"
                                            
                                            db_name = "adgroup_360_"+temp_channel_id.to_i.to_s
                                                      
                                            @threesixty_db[db_name].bulk_write(data_arr)
                                            @threesixty_db.close() 
                                        end
                                        
                                        data_arr = []
                                    end
                                  
                                  
                                    @logger.info "run login"
                                    # @logger.info csv[3].to_s
                                    # @logger.info csv[4].to_s
                                    
                                    @network = @db["network"].find('id' => csv[6].to_i)
                                    @db.close
                                    
                                    if @network.count.to_i <= 0
                                        
                                        @logger.info "run login network not found"
                                        
                                        temp_csv = csv
                                        temp_csv[9] = "Network not found"
                                         
                                        error_csv_array << temp_csv
                                        
                                        temp_channel = ""
                                        temp_channel_id = ""
                                        
                                        api_login = 0
                                    else
                                      
                                        temp_channel = csv[5].to_s
                                        temp_channel_id = csv[6].to_s
                                        
                                        @network.each do |network_d|
                                          
                                          
                                            if csv[5].to_s.downcase == "shenma"
                                              
                                                @username = network_d["username"]
                                                @password = network_d["password"]
                                                @apitoken = network_d["api_token"]
                                                
                                                service = "account"
                                                method = "getAccount"
                                                
                                                json = {'header' => { 
                                                                        'token' => @apitoken.to_s,
                                                                        'username' => @username.to_s,
                                                                        'password' => @password.to_s 
                                                                    },
                                                         'body'  => {
                                                                        'requestData' => ["account_all"]
                                                                    }
                                                        }
                                                        
                                                        
                                                @account_info = shenma_api(service,method,json)
                                              
                                              
                                                if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                                                    @header = @account_info["header"]
                                                    @remain_quote = @header["leftQuota"]
                                                    
                                                    if @remain_quote.to_i <= 500  
                                                        temp_csv = csv
                                                        temp_csv[6] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                                    else
                                                        login = 1
                                                    end
                                                else
                                                    temp_csv = csv
                                                    temp_csv[6] = @account_info["header"]["failures"][0]["message"].to_s
                                                    error_csv_array << temp_csv    
                                                end
                                              
                                            elsif csv[5].to_s.downcase == "baidu"
                                              
                                                @username = network_d["username"]
                                                @password = network_d["password"]
                                                @apitoken = network_d["api_token"]
                                                      
                                                service = "AccountService"
                                                method = "getAccountInfo"
                                                
                                                json = {'header' => { 
                                                                        'token' => @apitoken.to_s,
                                                                        'username' => @username.to_s,
                                                                        'password' => @password.to_s 
                                                                    },
                                                         'body'  => {
                                                                        'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                                                                    }
                                                        }       
                                                        
                                                @account_info = baidu_api(service,method,json)
                                                # @logger.info @account_info
                                                
                                                if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                                                    @header = @account_info["header"]
                                                    @remain_quote = @header["rquota"]
                                                    
                                                    if @remain_quote.to_i <= 500  
                                                        temp_csv = csv
                                                        temp_csv[6] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                                    else
                                                        api_login = 1
                                                    end
                                                else
                                                    temp_csv = csv
                                                    temp_csv[6] = @account_info["header"]["failures"][0]["message"].to_s
                                                    error_csv_array << temp_csv    
                                                end
                                                
                                            elsif csv[5].to_s.downcase == "sogou"
                                                sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                                                sogou_result = @sogou_api.call(:get_account_info)
                                                
                                                # @logger.info sogou_result
                                                
                                                if sogou_result.header[:res_header][:desc].to_s == "success"
                                                    @remain_quote = sogou_result.header[:res_header][:rquota].to_i
                                                    if @remain_quote.to_i <= 500
                                                        
                                                        temp_csv = csv
                                                        temp_csv[9] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                        
                                                    else
                                                        api_login = 1
                                                        sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcGrpService")
                                                    end
                                                else
                                                    
                                                    temp_csv = csv
                                                    # temp_csv[7] = sogou_result.header[:res_header][:failures][:message].to_s
                                                    if @header[:res_header][:failures][:message].to_s == ""
                                                        temp_csv[9] = "Publisher API server error."
                                                    else
                                                        temp_csv[9] = @header[:res_header][:failures][:message].to_s
                                                    end
                                                    error_csv_array << temp_csv
                                                    
                                                end
                                                
                                            elsif csv[5].to_i.to_s == "360" || csv[5].downcase.to_s == "threesixty" || csv[5].to_i == 360
                                              
                                                @username = network_d["username"]
                                                @password = network_d["password"]
                                                @apitoken = network_d["api_token"]
                                                @apisecret = network_d["api_secret"]
                                                
                                                temp_360_account_id = network_d["accountid"]
                                                
                                                login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                                                @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                                                
                                                @logger.info @username
                                                
                                                
                                                if !@refresh_token.nil?
                                                    api_login = 1
                                                    @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "account", "getInfo")
                                                    
                                                    @remain_quote = @response.headers["quotaremain"].to_i
                                                    @logger.info @remain_quote
                                                    
                                                    if @remain_quote.to_i <= 500
                                                        temp_csv = csv
                                                        temp_csv[9] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                                    end
                                                else
                                                  
                                                    temp_csv = csv
                                                    temp_csv[9] = login_info["account_clientLogin_response"]["failures"]["item"]["message"].to_s
                                                    error_csv_array << temp_csv
                                                    
                                                end
                                              
                                            else
                                                api_login = 0
                                                temp_channel = ""
                                                temp_channel_id = ""
                                                
                                                temp_csv = csv
                                                temp_csv[9] = "Channel Incorrect"
                                                error_csv_array << temp_csv
                                            end
                                            
                                        end
                                      
                                      
                                    end
                                end
                                
                                
                                
                                if api_login == 1
                                  
                                  
                                    if csv[5].to_s.downcase == "shenma"
                                      
                                      
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[9] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            if csv[1].downcase.to_s == "inactive"
                                                pause = "true"
                                            
                                            elsif csv[1].downcase.to_s == "active"
                                                pause = "false"
                                            else
                                                pause = "false"
                                            end
                                            
                                            
                                            requesttypearray = []
                                            requesttype = {}
                                            requesttype[:adgroupId]    =     csv[0].to_i
                                            requesttype[:adgroupName]    =     csv[2].to_s
                                            requesttype[:pause]    =     pause
                                            requesttype[:maxPrice]         =     csv[8].to_f
                                            
                                            requesttypearray << requesttype
                                            
                                            service = "adgroup"
                                            method = "updateAdgroup"
                                            
                                             
                                            json = {'header' => { 
                                                        'token' => @apitoken.to_s,
                                                        'username' => @username.to_s,
                                                        'password' => @password.to_s 
                                                      },
                                                 'body'  => {
                                                        'adgroupTypes' => requesttypearray
                                                      }
                                                }       
                                                
                                            @update_info = shenma_api(service,method,json)
                                            @logger.info @update_info
                                            
                                            @header = @update_info["header"]
                                            @remain_quote = @header["leftQuota"]
                                                
                                            if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                                                # db_name = "adgroup_baidu_"+csv[6].to_i.to_s
                                                # @baidu_db[db_name].find('adgroup_id' => csv[0].to_i).update_one('$set'=> { 'name' => csv[2].to_s,'status' => @update_info["body"]["data"][0]["status"].to_i, 'pause' => pause.to_s, 'max_price' => csv[8].to_f })
                                                # @baidu_db.close()
                                                
                                                set_detail_hash = {}
                                                set_detail_hash[:name] = csv[2].to_s
                                                set_detail_hash[:pause] = pause.to_s
                                                set_detail_hash[:max_price] = csv[8].to_f
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:adgroup_id] = csv[0].to_i
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                    db_name = "adgroup_shenma_"+csv[6].to_i.to_s
                                                    @baidu_db[db_name].bulk_write(data_arr)
                                                    @baidu_db.close()  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                                
                                            else
                                                temp_csv = csv
                                                temp_csv[9] = @update_info["header"]["failures"][0]["message"].to_s.to_s
                                                error_csv_array << temp_csv
                                            end
                                            
                                            
                                          
                                        end
                                      
                                  
                                    elsif csv[5].to_s.downcase == "baidu"
                                  
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[9] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            if csv[1].downcase.to_s == "inactive"
                                                pause = "true"
                                            
                                            elsif csv[1].downcase.to_s == "active"
                                                pause = "false"
                                            else
                                                pause = "false"
                                            end
                                            
                                            
                                            requesttypearray = []
                                            requesttype = {}
                                            requesttype[:adgroupId]    =     csv[0].to_i
                                            requesttype[:campaignId]    =     0
                                            requesttype[:adgroupName]    =     csv[2].to_s
                                            requesttype[:pause]    =     pause
                                            requesttype[:maxPrice]         =     csv[8].to_f
                                            requesttype[:status]    =     0 
                                            
                                            requesttypearray << requesttype
                                            
                                            service = "AdgroupService"
                                            method = "updateAdgroup"
                                            
                                             
                                            json = {'header' => { 
                                                        'token' => @apitoken.to_s,
                                                        'username' => @username.to_s,
                                                        'password' => @password.to_s 
                                                      },
                                                 'body'  => {
                                                        'adgroupTypes' => requesttypearray
                                                      }
                                                }       
                                                
                                            @update_info = baidu_api(service,method,json)
                                            @logger.info @update_info
                                            
                                            @header = @update_info["header"]
                                            @remain_quote = @header["rquota"]
                                                
                                            if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                                                # db_name = "adgroup_baidu_"+csv[6].to_i.to_s
                                                # @baidu_db[db_name].find('adgroup_id' => csv[0].to_i).update_one('$set'=> { 'name' => csv[2].to_s,'status' => @update_info["body"]["data"][0]["status"].to_i, 'pause' => pause.to_s, 'max_price' => csv[8].to_f })
                                                # @baidu_db.close()
                                                
                                                set_detail_hash = {}
                                                set_detail_hash[:name] = csv[2].to_s
                                                set_detail_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                                                set_detail_hash[:pause] = pause.to_s
                                                set_detail_hash[:max_price] = csv[8].to_f
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:adgroup_id] = csv[0].to_i
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                    db_name = "adgroup_baidu_"+csv[6].to_i.to_s
                                                    @baidu_db[db_name].bulk_write(data_arr)
                                                    @baidu_db.close()  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                                
                                            else
                                                temp_csv = csv
                                                temp_csv[9] = @update_info["header"]["failures"][0]["message"].to_s.to_s
                                                error_csv_array << temp_csv
                                            end
                                            
                                            
                                          
                                        end
                                        
                                        
                                    elsif csv[5].to_s.downcase == "sogou"
                                      
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[9] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            if csv[1].downcase.to_s == "inactive"
                                                pause = "true"
                                                db_status = 22
                                            
                                            elsif csv[1].downcase.to_s == "active"
                                                pause = "false"
                                                db_status = 21
                                            else
                                                pause = "false"
                                                db_status = 21
                                            end
                                            
                                            requesttypearray = []
                                            requesttype = {}
                                            requesttype[:cpcGrpId]    =     csv[0].to_i
                                            requesttype[:cpcPlanId]    =     0
                                            requesttype[:cpcGrpName]    =     csv[2].to_s
                                            requesttype[:pause]    =     pause
                                            requesttype[:maxPrice]         =     csv[8].to_f 
                                            
                                            requesttypearray << requesttype
                                            
                                            @logger.info requesttypearray
                                            @update_status = @sogou_api.call(:update_cpc_grp, message: { cpcGrpTypes: requesttypearray })
                                    
                                            @header = @update_status.header.to_hash
                                            @msg = @header[:res_header][:desc]
                                            @remain_quote = @header[:res_header][:rquota]
                                            
                                            @logger.info @header 
                                            
                                            if @msg.to_s.downcase == "success"
                                                # db_name = "adgroup_sogou_"+csv[6].to_i.to_s
                                                # @sogou_db[db_name].find('cpc_grp_id' => csv[0].to_i).update_one('$set'=> { 'name' => csv[2].to_s,'status' => db_status.to_i, 'pause' => pause.to_s, 'max_price' => csv[8].to_f })
                                                # @sogou_db.close()
                                                
                                                
                                                
                                                set_detail_hash = {}
                                                set_detail_hash[:name] = csv[2].to_s
                                                set_detail_hash[:status] = db_status.to_i
                                                set_detail_hash[:pause] = pause.to_s
                                                set_detail_hash[:max_price] = csv[8].to_f
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:cpc_grp_id] = csv[0].to_i
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                    db_name = "adgroup_sogou_"+csv[6].to_i.to_s
                                                    @sogou_db[db_name].bulk_write(data_arr)
                                                    @sogou_db.close()  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                                
                                                
                                                # @logger.info db_name
                                                # @logger.info csv[0]
                                            else
                                                temp_csv = csv
                                                # temp_csv[7] = @header[:res_header][:failures][:message].to_s
                                                if @header[:res_header][:failures][:message].to_s == ""
                                                    temp_csv[9] = "Publisher API server error."
                                                else
                                                    temp_csv[9] = @header[:res_header][:failures][:message].to_s
                                                end
                                                error_csv_array << temp_csv
                                            end
                                        end
                                      
                                      
                                    elsif csv[5].to_i.to_s == "360" || csv[5].downcase.to_s == "threesixty" || csv[5].to_i == 360
                                        
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[9] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                            
                                            # @logger.info csv[4]
                                            
                                            if csv[1].downcase.to_s == "inactive"
                                                status = "pause"
                                                db_status = "暂停"
                                            elsif csv[1].downcase.to_s == "active"
                                                status = "enable"
                                                db_status = "启用"
                                            else
                                                status = "enable"
                                                db_status = "启用"
                                            end
                                          
                                            body = {}
                                            body[:id] = csv[0].to_i
                                            body[:name] = csv[2].to_s
                                            body[:status] = status
                                            body[:price] = csv[8].to_f
                                          
                                            @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "group", "update", body)
                                            @affectedRecords = @update_res["group_update_response"]["id"]
                                            
                                            @remain_quote = @response.headers["quotaremain"].to_i
                                            
                                            @logger.info @affectedRecords
                                            @logger.info @remain_quote
                                          
                                            
                                            if !@update_res["group_update_response"]["failures"].nil?
                                                temp_csv = csv
                                                temp_csv[9] = @update_res["group_update_response"]["failures"]["item"]["message"].to_s
                                                error_csv_array << temp_csv 
                                            else
                                              
                                                if @affectedRecords.to_i == 0
                                                    temp_csv = csv
                                                    temp_csv[9] = "ID not found."
                                                    error_csv_array << temp_csv
                                                else
                                                
                                                    db_name = "adgroup_360_"+csv[6].to_i.to_s
                                                    # @threesixty_db[db_name].find('adgroup_id' => csv[0].to_i).update_one('$set'=> { 'adgroup_name' => csv[2].to_s,'status' => db_status.to_s,'price' => csv[8].to_f })
                                                    # @threesixty_db.close()
                                                    
                                                    
                                                    set_detail_hash = {}
                                                    set_detail_hash[:adgroup_name] = csv[2].to_s
                                                    set_detail_hash[:status] = db_status.to_s
                                                    set_detail_hash[:price] = csv[8].to_f
                                                    
                                                    set_hash = {}
                                                    set_hash['$set'] = set_detail_hash
                                                    
                                                    filter_hash = {}
                                                    filter_hash[:adgroup_id] = csv[0].to_i
                                                    
                                                    update_hash = {}
                                                    update_hash[:filter] = filter_hash
                                                    update_hash[:update] = set_hash
                                                    
                                                    data_hash = {}
                                                    data_hash[:update_one] = update_hash
                                                    
                                                    data_arr << data_hash
                                                    
                                                    if data_arr.count.to_i > 100
                                                        db_name = "adgroup_360_"+csv[6].to_i.to_s
                                                        @threesixty_db[db_name].bulk_write(data_arr)
                                                        @threesixty_db.close()  
                                                        
                                                        data_arr = []
                                                        
                                                        sleep 2
                                                    end
                                                    
                                                end
                                            end
                                            
                                        end
                                        
                                    else
                                        api_login = 0
                                        temp_channel = ""
                                        temp_channel_id = ""
                                        
                                        temp_csv = csv
                                        temp_csv[9] = "Channel Incorrect"
                                        error_csv_array << temp_csv
                                    end
                                end
                              
                            end
                        end
                      
                        if data_arr.count.to_i > 0
                          
                            if temp_channel == "shenma"
                              
                                db_name = "adgroup_shenma_"+temp_channel_id.to_s
                                          
                                @baidu_db[db_name].bulk_write(data_arr)
                                @baidu_db.close()
                              
                            elsif temp_channel == "baidu"
                                
                                db_name = "adgroup_baidu_"+temp_channel_id.to_s
                                          
                                @baidu_db[db_name].bulk_write(data_arr)
                                @baidu_db.close()  
                            
                            
                            elsif temp_channel == "sogou"
                                
                                db_name = "adgroup_sogou_"+temp_channel_id.to_s
                                          
                                @sogou_db[db_name].bulk_write(data_arr)
                                @sogou_db.close() 
                                
                            elsif temp_channel == "360"
                                
                                db_name = "adgroup_360_"+temp_channel_id.to_s
                                          
                                @threesixty_db[db_name].bulk_write(data_arr)
                                @threesixty_db.close() 
                            end
                            
                            data_arr = []
                        end


                    elsif all_bulk_d['upload_type'] == "ad"
                      
                        data_arr = []
                       
                        xlsx.each_with_index do |csv, csv_index|
                            if csv_index.to_i == 0
                                    
                                if !(csv[0].to_s.include?("﻿Ad ID") && 
                                    csv[1].to_s.include?("﻿Status") && 
                                    csv[2].to_s.include?("﻿Ad Group Name") && 
                                    csv[3].to_s.include?("﻿Ad Group ID") &&
                                    csv[4].to_s.include?("﻿Campaign Name") && 
                                    csv[5].to_s.include?("﻿Campaign ID") && 
                                    csv[6].to_s.include?("﻿Channel Type") && 
                                    csv[7].to_s.include?("﻿Channel ID") &&
                                    csv[8].to_s.include?("﻿Channel Name") &&
                                    csv[9].to_s.include?("﻿Headline") &&
                                    csv[10].to_s.include?("﻿Description Line1") &&
                                    csv[11].to_s.include?("﻿Description Line2") &&
                                    csv[12].to_s.include?("Display Url") &&
                                    csv[13].to_s.include?("Final Url") &&
                                    csv[14].to_s.include?("Mobile Display Url") &&
                                    csv[15].to_s.include?("Mobile Final Url")
                                    )
                                    
                                    bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                    deleditbulkfile(all_bulk_d['file_id'])
                                    
                                    data = {:message => "excel file header error", :status => "true"}
                                    return render :json => data, :status => :ok
                                end
                              
                            else
                              
                                if csv[6].to_s != temp_channel || csv[7].to_s != temp_channel_id
                                  
                                    if data_arr.count.to_i > 0
                                        if temp_channel == "shenma"
                                            
                                            db_name = "ad_shenma_"+temp_channel_id.to_s
                                                      
                                            @baidu_db[db_name].bulk_write(data_arr)
                                            @baidu_db.close()
                                            
                                        elsif temp_channel == "baidu"
                                            db_name = "ad_baidu_"+temp_channel_id.to_s
                                                      
                                            @baidu_db[db_name].bulk_write(data_arr)
                                            @baidu_db.close()  
                                        
                                        elsif temp_channel == "sogou"
                                            
                                            db_name = "ad_sogou_"+temp_channel_id.to_s
                                                      
                                            @sogou_db[db_name].bulk_write(data_arr)
                                            @sogou_db.close() 
                                            
                                        elsif temp_channel == "360"
                                            
                                            db_name = "ad_360_"+temp_channel_id.to_s
                                                      
                                            @threesixty_db[db_name].bulk_write(data_arr)
                                            @threesixty_db.close() 
                                        end
                                        
                                        data_arr = []
                                    end
                                  
                                    @logger.info "run login"
                                    # @logger.info csv[3].to_s
                                    # @logger.info csv[4].to_s
                                    
                                    @network = @db["network"].find('id' => csv[7].to_i)
                                    @db.close
                                    
                                    if @network.count.to_i <= 0
                                        @logger.info "run login network not found"
                                        
                                        temp_csv = csv
                                        temp_csv[16] = "Network not found"
                                         
                                        error_csv_array << temp_csv
                                        
                                        temp_channel = ""
                                        temp_channel_id = ""
                                        
                                        api_login = 0
                                    else
                                      
                                        temp_channel = csv[6].to_s
                                        temp_channel_id = csv[7].to_s
                                        
                                        @network.each do |network_d|
                                          
                                            @tracking_type = network_d["tracking_type"].to_s
                                            @ad_redirect = network_d["ad_redirect"].to_s
                                            @keyword_redirect = network_d["keyword_redirect"].to_s
                                            @company_id = network_d["company_id"].to_s
                                            @cookie_length = network_d["cookie_length"].to_s
                                            
                                            
                                            if csv[6].to_s.downcase == "shenma"
                                              
                                                @username = network_d["username"]
                                                @password = network_d["password"]
                                                @apitoken = network_d["api_token"]
                                                
                                                service = "account"
                                                method = "getAccount"
                                                
                                                json = {'header' => { 
                                                                        'token' => @apitoken.to_s,
                                                                        'username' => @username.to_s,
                                                                        'password' => @password.to_s 
                                                                    },
                                                         'body'  => {
                                                                        'requestData' => ["account_all"]
                                                                    }
                                                        }
                                                        
                                                        
                                                @account_info = shenma_api(service,method,json)
                                              
                                                if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                                                    @header = @account_info["header"]
                                                    @remain_quote = @header["leftQuota"]
                                                    
                                                    if @remain_quote.to_i <= 500  
                                                        temp_csv = csv
                                                        temp_csv[6] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                                    else
                                                        api_login = 1
                                                    end
                                                else
                                                    temp_csv = csv
                                                    temp_csv[6] = @account_info["header"]["failures"][0]["message"].to_s
                                                    error_csv_array << temp_csv    
                                                end
                                              
                                            elsif csv[6].to_s.downcase == "baidu"
                                                
                                                @username = network_d["username"]
                                                @password = network_d["password"]
                                                @apitoken = network_d["api_token"]
                                                      
                                                service = "AccountService"
                                                method = "getAccountInfo"
                                                
                                                json = {'header' => { 
                                                                        'token' => @apitoken.to_s,
                                                                        'username' => @username.to_s,
                                                                        'password' => @password.to_s 
                                                                    },
                                                         'body'  => {
                                                                        'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                                                                    }
                                                        }       
                                                        
                                                @account_info = baidu_api(service,method,json)
                                                # @logger.info @account_info
                                                
                                                if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                                                    @header = @account_info["header"]
                                                    @remain_quote = @header["rquota"]
                                                    
                                                    if @remain_quote.to_i <= 500  
                                                        temp_csv = csv
                                                        temp_csv[6] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                                    else
                                                        api_login = 1
                                                    end
                                                else
                                                    temp_csv = csv
                                                    temp_csv[6] = @account_info["header"]["failures"][0]["message"].to_s
                                                    error_csv_array << temp_csv    
                                                end
                                            
                                            
                        
                                            elsif csv[6].to_s.downcase == "sogou"
                                                sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                                                sogou_result = @sogou_api.call(:get_account_info)
                                                
                                                # @logger.info sogou_result
                                                
                                                if sogou_result.header[:res_header][:desc].to_s == "success"
                                                    @remain_quote = sogou_result.header[:res_header][:rquota].to_i
                                                    if @remain_quote.to_i <= 500
                                                        
                                                        temp_csv = csv
                                                        temp_csv[16] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                        
                                                    else
                                                        api_login = 1
                                                        sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcIdeaService")
                                                    end
                                                else
                                                    
                                                    temp_csv = csv
                                                    # temp_csv[14] = sogou_result.header[:res_header][:failures][:message].to_s
                                                    if @header[:res_header][:failures][:message].to_s == ""
                                                        temp_csv[16] = "Publisher API server error."
                                                    else
                                                        temp_csv[16] = @header[:res_header][:failures][:message].to_s
                                                    end
                                                    error_csv_array << temp_csv
                                                    
                                                end
                                                
                                            elsif csv[6].to_i.to_s == "360" || csv[6].downcase.to_s == "threesixty" || csv[6].to_i == 360
                                              
                                                @username = network_d["username"]
                                                @password = network_d["password"]
                                                @apitoken = network_d["api_token"]
                                                @apisecret = network_d["api_secret"]
                                                
                                                temp_360_account_id = network_d["accountid"]
                                                
                                                login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                                                @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                                                
                                                @logger.info @username
                                                
                                                
                                                if !@refresh_token.nil?
                                                    api_login = 1
                                                    @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "account", "getInfo")
                                                    
                                                    @remain_quote = @response.headers["quotaremain"].to_i
                                                    @logger.info @remain_quote
                                                    
                                                    if @remain_quote.to_i <= 500
                                                        temp_csv = csv
                                                        temp_csv[16] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                                    end
                                                else
                                                  
                                                    temp_csv = csv
                                                    temp_csv[16] = login_info["account_clientLogin_response"]["failures"]["item"]["message"].to_s
                                                    error_csv_array << temp_csv
                                                    
                                                end
                                              
                                            else
                                                api_login = 0
                                                temp_channel = ""
                                                temp_channel_id = ""
                                                
                                                temp_csv = csv
                                                temp_csv[16] = "Channel Incorrect"
                                                error_csv_array << temp_csv
                                            end
                                            
                                        end
                                      
                                    end
                                end
                                
                                
                                if api_login == 1
                                  
                                  
                                    if csv[6].to_s.downcase == "shenma"
                                      
                                        
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[16] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            if csv[1].downcase.to_s == "inactive"
                                                pause = "true"
                                            elsif csv[1].downcase.to_s == "active"
                                                pause = "false"
                                            else
                                                pause = "false"
                                            end
                                            
                                            
                                            requesttypearray = [] 
                                            requesttype = {}
                                            requesttype[:creativeId]    =     csv[0].to_i
                                            requesttype[:pause]    =     pause
                                            requesttype[:title] = csv[9].to_s
                                            requesttype[:description1] = csv[10].to_s
                                            
                                            requesttype[:displayUrl]         =     csv[12].to_s  
                                            
                                            @final_url = csv[13].to_s
                                            if @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes" && csv[13].to_s != "" 
                                                @temp_final_url = @final_url.to_s
                                                @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @final_url = @final_url + "&campaign_id="+csv[5].to_i.to_s+"&adgroup_id="+csv[3].to_i.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                                @final_url = @final_url + "&device=pc"
                                                @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                            end
                                            requesttype[:destinationUrl]    =     @final_url
                                            
                                            
                                            
                                            requesttypearray << requesttype
                                        
                                            service = "creative"
                                            method = "updateCreative"
                                            
                                            json = {'header' => { 
                                                            'token' => @apitoken.to_s,
                                                            'username' => @username.to_s,
                                                            'password' => @password.to_s 
                                                          },
                                                     'body'  => {
                                                            'creativeTypes' => requesttypearray
                                                          }
                                                    }       
                                                
                                            @update_info = shenma_api(service,method,json)
                                                                                                                 
                                            @logger.info @update_info 
                                            
                                            @header = @update_info["header"]
                                            @remain_quote = @header["leftQuota"]
                                            
                                            if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                                                
                                                # db_name = "ad_baidu_"+csv[7].to_i.to_s
                                                # @baidu_db[db_name].find('ad_id' => csv[0].to_i).update_one('$set'=> {   
                                                                                                                        # 'title' => csv[9].to_s,
                                                                                                                        # 'pause' => pause.to_s, 
                                                                                                                        # 'status' => @update_info["body"]["data"][0]["status"].to_i,
                                                                                                                        # 'description_1' => csv[10].to_s,
                                                                                                                        # 'description_2' => csv[11].to_s,
                                                                                                                        # 'visit_url' => @final_url.to_s,
                                                                                                                        # 'show_url' => csv[12].to_s,
                                                                                                                        # 'mobile_visit_url' => @m_final_url.to_s,
                                                                                                                        # 'mobile_show_url' => csv[14].to_s 
                                                                                                                      # })
                                                # @baidu_db.close()
                                              
                                              
                                                set_detail_hash = {}
                                                set_detail_hash[:title] = csv[9].to_s
                                                set_detail_hash[:pause] = pause.to_s
                                                set_detail_hash[:description] = csv[10].to_s
                                                set_detail_hash[:visit_url] = @final_url.to_s
                                                set_detail_hash[:show_url] = csv[12].to_s
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:ad_id] = csv[0].to_i
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                    db_name = "ad_shenma_"+csv[7].to_i.to_s
                                                    @baidu_db[db_name].bulk_write(data_arr)
                                                    @baidu_db.close()  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                              
                                            else
                                                temp_csv = csv
                                                # temp_csv[14] = @header[:res_header][:failures][:message].to_s
                                                temp_csv[16] = @update_info["header"]["failures"][0]["message"].to_s
                                                error_csv_array << temp_csv
                                            end
                                          
                                          
                                        end
                                      
                                      
                                      
                                    elsif csv[6].to_s.downcase == "baidu"
                                      
                                      
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[16] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            if csv[1].downcase.to_s == "inactive"
                                                pause = "true"
                                            elsif csv[1].downcase.to_s == "active"
                                                pause = "false"
                                            else
                                                pause = "false"
                                            end
                                            
                                            
                                            requesttypearray = [] 
                                            requesttype = {}
                                            requesttype[:creativeId]    =     csv[0].to_i
                                            requesttype[:adgroupId]    =     0
                                            requesttype[:pause]    =     pause
                                            requesttype[:title] = csv[9].to_s
                                            requesttype[:description1] = csv[10].to_s
                                            requesttype[:description2] = csv[11].to_s
                                            
                                            requesttype[:pcDisplayUrl]         =     csv[12].to_s  
                                            
                                            @final_url = csv[13].to_s
                                            if @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes" && csv[13].to_s != "" 
                                                @temp_final_url = @final_url.to_s
                                                @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @final_url = @final_url + "&campaign_id="+csv[5].to_i.to_s+"&adgroup_id="+csv[3].to_i.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                                @final_url = @final_url + "&device=pc"
                                                @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                            end
                                            requesttype[:pcDestinationUrl]    =     @final_url
                                            
                                            
                                            requesttype[:mobileDisplayUrl]   =  csv[14].to_s
                                            
                                            @m_final_url = csv[15].to_s    
                                            if @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes" && csv[15].to_s != ""
                                                @temp_m_final_url = @m_final_url
                                                @m_final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @m_final_url = @m_final_url + "&campaign_id="+csv[5].to_i.to_s++"&adgroup_id="+csv[3].to_i.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                @m_final_url = @m_final_url + "&cookie="+@cookie_length.to_s
                                                @m_final_url = @m_final_url + "&device=mobile"
                                                @m_final_url = @m_final_url + "&tv=v1&durl="+CGI.escape(@temp_m_final_url.to_s)
                                            end
                                            requesttype[:mobileDestinationUrl] =    @m_final_url
                                            requesttype[:status]    =     0
                                            
                                            requesttypearray << requesttype
                                        
                                            service = "CreativeService"
                                            method = "updateCreative"
                                            
                                            json = {'header' => { 
                                                            'token' => @apitoken.to_s,
                                                            'username' => @username.to_s,
                                                            'password' => @password.to_s 
                                                          },
                                                     'body'  => {
                                                            'creativeTypes' => requesttypearray
                                                          }
                                                    }       
                                                
                                            @update_info = baidu_api(service,method,json)
                                                                                                                 
                                            @logger.info @update_info 
                                            
                                            @header = @update_info["header"]
                                            @remain_quote = @header["rquota"]
                                            
                                            if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                                                
                                                # db_name = "ad_baidu_"+csv[7].to_i.to_s
                                                # @baidu_db[db_name].find('ad_id' => csv[0].to_i).update_one('$set'=> {   
                                                                                                                        # 'title' => csv[9].to_s,
                                                                                                                        # 'pause' => pause.to_s, 
                                                                                                                        # 'status' => @update_info["body"]["data"][0]["status"].to_i,
                                                                                                                        # 'description_1' => csv[10].to_s,
                                                                                                                        # 'description_2' => csv[11].to_s,
                                                                                                                        # 'visit_url' => @final_url.to_s,
                                                                                                                        # 'show_url' => csv[12].to_s,
                                                                                                                        # 'mobile_visit_url' => @m_final_url.to_s,
                                                                                                                        # 'mobile_show_url' => csv[14].to_s 
                                                                                                                      # })
                                                # @baidu_db.close()
                                              
                                              
                                                set_detail_hash = {}
                                                set_detail_hash[:title] = csv[9].to_s
                                                set_detail_hash[:pause] = pause.to_s
                                                set_detail_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                                                set_detail_hash[:description_1] = csv[10].to_s
                                                set_detail_hash[:description_2] = csv[11].to_s
                                                set_detail_hash[:visit_url] = @final_url.to_s
                                                set_detail_hash[:show_url] = csv[12].to_s
                                                set_detail_hash[:mobile_visit_url] = @m_final_url.to_s
                                                set_detail_hash[:mobile_show_url] = csv[14].to_s
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:ad_id] = csv[0].to_i
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                    db_name = "ad_baidu_"+csv[7].to_i.to_s
                                                    @baidu_db[db_name].bulk_write(data_arr)
                                                    @baidu_db.close()  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                              
                                            else
                                                temp_csv = csv
                                                # temp_csv[14] = @header[:res_header][:failures][:message].to_s
                                                temp_csv[16] = @update_info["header"]["failures"][0]["message"].to_s
                                                error_csv_array << temp_csv
                                            end
                                          
                                          
                                        end
                                      
                                      
                                       
                                  
                                    elsif csv[6].to_s.downcase == "sogou"
                                      
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[16] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            if csv[1].downcase.to_s == "inactive"
                                                pause = "true"
                                                db_status = 42
                                            
                                            elsif csv[1].downcase.to_s == "active"
                                                pause = "false"
                                                db_status = 44
                                            else
                                                pause = "false"
                                                db_status = 44    
                                            end
                                            
                                            requesttypearray = [] 
                                            requesttype = {}
                                            requesttype[:cpcIdeaId]    =     csv[0].to_i
                                            requesttype[:cpcGrpId]    =     0
                                            requesttype[:pause]    =     pause
                                            requesttype[:title] = csv[9].to_s
                                            requesttype[:description1] = csv[10].to_s
                                            requesttype[:description2] = csv[11].to_s
                                            
                                            requesttype[:showUrl]         =     csv[12].to_s  
                                            
                                            @final_url = csv[13].to_s
                                            if @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes" && csv[13].to_s != "" 
                                                @temp_final_url = @final_url.to_s
                                                @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @final_url = @final_url + "&campaign_id="+csv[5].to_i.to_s+"&adgroup_id="+csv[3].to_i.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                                @final_url = @final_url + "&device=pc"
                                                @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                            end
                                            requesttype[:visitUrl]    =     @final_url
                                            
                                            
                                            requesttype[:mobileShowUrl]   =  csv[14].to_s
                                            
                                            @m_final_url = csv[15].to_s    
                                            if @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes" && csv[15].to_s != ""
                                                @temp_m_final_url = @m_final_url
                                                @m_final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @m_final_url = @m_final_url + "&campaign_id="+csv[5].to_i.to_s++"&adgroup_id="+csv[3].to_i.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                @m_final_url = @m_final_url + "&cookie="+@cookie_length.to_s
                                                @m_final_url = @m_final_url + "&device=mobile"
                                                @m_final_url = @m_final_url + "&tv=v1&durl="+CGI.escape(@temp_m_final_url.to_s)
                                            end
                                            requesttype[:mobileVisitUrl] =    @m_final_url
                                            
                                            requesttypearray << requesttype
                                        
                                            @logger.info requesttypearray
                                            @update_status = @sogou_api.call(:update_cpc_idea, message: { cpcIdeaTypes: requesttypearray })
                                                                     
                                            @header = @update_status.header.to_hash
                                            @msg = @header[:res_header][:desc]
                                            @remain_quote = @header[:res_header][:rquota]
                                                                                                                 
                                            @logger.info @header 
                                            
                                            if @msg.to_s.downcase == "success"
                                                
                                                # db_name = "ad_sogou_"+csv[7].to_i.to_s
                                                # @sogou_db[db_name].find('cpc_idea_id' => csv[0].to_i).update_one('$set'=> {   
                                                                                                                        # 'title' => csv[9].to_s,
                                                                                                                        # 'pause' => pause.to_s, 
                                                                                                                        # 'status' => db_status.to_i,
                                                                                                                        # 'description_1' => csv[10].to_s,
                                                                                                                        # 'description_2' => csv[11].to_s,
                                                                                                                        # 'visit_url' => @final_url.to_s,
                                                                                                                        # 'show_url' => csv[12].to_s,
                                                                                                                        # 'mobile_visit_url' => @m_final_url.to_s,
                                                                                                                        # 'mobile_show_url' => csv[14].to_s 
                                                                                                                      # })
                                                # @sogou_db.close()
                                              
                                                set_detail_hash = {}
                                                set_detail_hash[:title] = csv[9].to_s
                                                set_detail_hash[:pause] = pause.to_s
                                                set_detail_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                                                set_detail_hash[:description_1] = csv[10].to_s
                                                set_detail_hash[:description_2] = csv[11].to_s
                                                set_detail_hash[:visit_url] = @final_url.to_s
                                                set_detail_hash[:show_url] = csv[12].to_s
                                                set_detail_hash[:mobile_visit_url] = @m_final_url.to_s
                                                set_detail_hash[:mobile_show_url] = csv[14].to_s
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:cpc_idea_id] = csv[0].to_i
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                    db_name = "ad_sogou_"+csv[7].to_i.to_s
                                                    @sogou_db[db_name].bulk_write(data_arr)
                                                    @sogou_db.close()  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                              
                                            else
                                                temp_csv = csv
                                                # temp_csv[14] = @header[:res_header][:failures][:message].to_s
                                                if @header[:res_header][:failures][:message].to_s == ""
                                                    temp_csv[16] = "Publisher API server error."
                                                else
                                                    temp_csv[16] = @header[:res_header][:failures][:message].to_s
                                                end
                                                error_csv_array << temp_csv
                                            end
                                        end
                                        
                                    elsif csv[6].to_i.to_s == "360" || csv[6].downcase.to_s == "threesixty" || csv[6].to_i == 360
                                      
                                        if @remain_quote.to_i <= 500
                                            # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[16] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            if csv[1].downcase.to_s == "inactive"
                                                status = "pause"
                                                db_status = "暂停"
                                            
                                            elsif csv[1].downcase.to_s == "active"
                                                status = "enable"
                                                db_status = "启用"
                                            else
                                                status = "enable"
                                                db_status = "启用"
                                            end
                                            
                                            
                                            @final_url = csv[13].downcase.to_s
                                              
                                            if @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes" && csv[13].to_s != ""
                                                @temp_final_url = @final_url
                                                
                                                @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @final_url = @final_url + "&campaign_id={planid}&adgroup_id={groupid}&ad_id={creativeid}&keyword_id={wordid}"
                                                @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                                @final_url = @final_url + "&device=pc"
                                                @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                            end
                                          
                                              
                                            
                                            @m_final_url = csv[15].downcase.to_s
                                              
                                            if @tracking_type.to_s.downcase == "adeqo" && @ad_redirect.to_s.downcase == "yes" && csv[15].to_s != ""
                                                @temp_m_final_url = @m_final_url
                                                
                                                @m_final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @m_final_url = @m_final_url + "&campaign_id={planid}&adgroup_id={groupid}&ad_id={creativeid}&keyword_id={wordid}"
                                                @m_final_url = @m_final_url + "&cookie="+@cookie_length.to_s
                                                @m_final_url = @m_final_url + "&device=pc"
                                                @m_final_url = @m_final_url + "&tv=v1&durl="+CGI.escape(@temp_m_final_url.to_s)
                                            end
                                            
                                              
                                            requesttypearray = [] 
                                            request_str = '{"id":'+csv[0].to_i.to_s+',
                                                            "title":"'+csv[9].to_s+'",
                                                            "description1":"'+csv[10].to_s+'",
                                                            "displayUrl":"'+csv[12].to_s+'",
                                                            "destinationUrl":"'+@final_url+'",
                                                            "mobileDisplayUrl":"'+csv[14].to_s+'",
                                                            "mobileDestinationUrl":"'+@m_final_url+'"}'
                                            
                                            requesttypearray << request_str
                                            request = '['+requesttypearray.join(",")+']'
                                            # @logger.info request
                                            
                                            body = { 
                                                'creatives' => request
                                            }
                                            
                                            @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "creative", "update", body)
                                            @affectedRecords = @update_res["creative_update_response"]["affectedRecords"]
                                            @remain_quote = @response.headers["quotaremain"].to_i  
                                            
                                            @logger.info @update_res["creative_update_response"]
                                            # @logger.info "sad"
                                            
                                            
                                            if !@update_res["creative_update_response"]["failures"].nil?
                                                temp_csv = csv
                                                temp_csv[16] = @update_res["creative_update_response"]["failures"]["item"]["message"]
                                                error_csv_array << temp_csv
                                            else
                                                # db_name = "ad_360_"+csv[7].to_i.to_s
#                                                 
                                                # @threesixty_db[db_name].find('ad_id' => csv[0].to_i).update_one('$set'=> { 
                                                                                                                      # 'title' => csv[9].to_s,
                                                                                                                      # 'description' => csv[10].to_s,
                                                                                                                      # 'show_url' => csv[12].to_s,
                                                                                                                      # 'visit_url' => @final_url.to_s,
                                                                                                                      # 'mobile_show_url' => csv[14].to_s,
                                                                                                                      # 'mobile_visit_url' => @m_final_url.to_s
                                                                                                                    # })
                                                # @threesixty_db.close()
                                                
                                                
                                                set_detail_hash = {}
                                                set_detail_hash[:title] = csv[9].to_s
                                                set_detail_hash[:description] = csv[10].to_s
                                                set_detail_hash[:show_url] = csv[12].to_s
                                                set_detail_hash[:visit_url] = @final_url.to_s
                                                set_detail_hash[:mobile_show_url] = csv[14].to_s
                                                set_detail_hash[:mobile_visit_url] = @m_final_url.to_s
                                                
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:ad_id] = csv[0].to_i
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                    db_name = "ad_360_"+csv[7].to_i.to_s
                                                    @threesixty_db[db_name].bulk_write(data_arr)
                                                    @threesixty_db.close()  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                                
                                                
                                            end
                                            
                                            
                                            requesttypearray = []
                                            request_str = '{"id":'+csv[0].to_i.to_s+',"status":"'+status+'"}' 
                                            
                                            requesttypearray << request_str
                                            request = '['+requesttypearray.join(",")+']'
                                            @logger.info request
                                            
                                            body = { 
                                                'creatives' => request
                                            }
                                            
                                            @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "creative", "update", body)
                                            @affectedRecords = @update_res["creative_update_response"]["affectedRecords"]
                                            @remain_quote = @response.headers["quotaremain"].to_i  
                                            
                                            @logger.info @update_res["creative_update_response"]
                                            
                                            
                                            if !@update_res["creative_update_response"]["failures"].nil?
                                                temp_csv = csv
                                                temp_csv[16] = @update_res["creative_update_response"]["failures"]["item"]["message"]
                                                error_csv_array << temp_csv
                                            else
                                              
                                                if @affectedRecords.to_i == 0
                                                  
                                                    temp_csv = csv
                                                    temp_csv[16] = "ID not found."
                                                    error_csv_array << temp_csv
                                                    
                                                else
                                                
                                                    # db_name = "ad_360_"+csv[7].to_i.to_s
                                                    # @threesixty_db[db_name].find('ad_id' => csv[0].to_i).update_one('$set'=> { 
                                                                                                                          # 'status' => db_status.to_s
                                                                                                                        # })
                                                    # @threesixty_db.close()
                                                    
                                                    set_detail_hash = {}
                                                    set_detail_hash[:status] = db_status.to_s
                                                    
                                                    
                                                    set_hash = {}
                                                    set_hash['$set'] = set_detail_hash
                                                    
                                                    filter_hash = {}
                                                    filter_hash[:ad_id] = csv[0].to_i
                                                    
                                                    update_hash = {}
                                                    update_hash[:filter] = filter_hash
                                                    update_hash[:update] = set_hash
                                                    
                                                    data_hash = {}
                                                    data_hash[:update_one] = update_hash
                                                    
                                                    data_arr << data_hash
                                                    
                                                    if data_arr.count.to_i > 100
                                                        db_name = "ad_360_"+csv[7].to_i.to_s
                                                        @threesixty_db[db_name].bulk_write(data_arr)
                                                        @threesixty_db.close()  
                                                        
                                                        data_arr = []
                                                        
                                                        sleep 2
                                                    end
                                                end
                                              
                                            end
                                            
                                            
                                        end
                                      
                                    else
                                        api_login = 0
                                        temp_channel = ""
                                        temp_channel_id = ""
                                        
                                        temp_csv = csv
                                        temp_csv[16] = "Channel Incorrect"
                                        error_csv_array << temp_csv
                                    end
                                end
                                
                              
                            end
                        end
                        
                        if data_arr.count.to_i > 0
                            
                            if temp_channel == "shenma"
                                db_name = "ad_shenma_"+temp_channel_id.to_s
                                          
                                @baidu_db[db_name].bulk_write(data_arr)
                                @baidu_db.close()
                              
                            elsif temp_channel == "baidu"
                                db_name = "ad_baidu_"+temp_channel_id.to_s
                                          
                                @baidu_db[db_name].bulk_write(data_arr)
                                @baidu_db.close()  
                            
                            elsif temp_channel == "sogou"
                                
                                db_name = "ad_sogou_"+temp_channel_id.to_s
                                          
                                @sogou_db[db_name].bulk_write(data_arr)
                                @sogou_db.close() 
                                
                            elsif temp_channel == "360"
                                
                                db_name = "ad_360_"+temp_channel_id.to_s
                                          
                                @threesixty_db[db_name].bulk_write(data_arr)
                                @threesixty_db.close() 
                            end
                            
                            data_arr = []
                        end
                        
                    elsif all_bulk_d['upload_type'] == "keyword"
                      
                        data_arr = []
                        
                        xlsx.each_with_index do |csv, csv_index|
                            if csv_index.to_i == 0
                                if !(csv[0].to_s.include?("﻿Keyword ID") && 
                                    csv[1].to_s.include?("﻿Status") && 
                                    csv[2].to_s.include?("﻿Ad Group Name") && 
                                    csv[3].to_s.include?("﻿Ad Group ID") &&
                                    csv[4].to_s.include?("﻿Campaign Name") &&  
                                    csv[5].to_s.include?("﻿Campaign ID") && 
                                    csv[6].to_s.include?("﻿Channel Type") && 
                                    csv[7].to_s.include?("﻿Channel ID") &&
                                    csv[8].to_s.include?("﻿Channel Name") &&
                                    csv[9].to_s.include?("﻿Keyword") &&
                                    csv[10].to_s.include?("Match Type") &&
                                    csv[11].to_s.include?("Landing page Url") &&
                                    csv[12].to_s.include?("Mobile Landing page Url") &&
                                    csv[13].to_s.include?("Default Max. CPC")
                                    )
                                    
                                    bulkerror(all_bulk_d['_id'],"Excel file header incorrect.")
                                    deleditbulkfile(all_bulk_d['file_id'])
                                    
                                    data = {:message => "excel file header error", :status => "true"}
                                    return render :json => data, :status => :ok
                                end
                            else
                              
                                if csv[6].to_s != temp_channel || csv[7].to_s != temp_channel_id
                                  
                                    if data_arr.count.to_i > 0
                                        if temp_channel == "shenma"
                                          
                                            db_name = "keyword_shenma_"+temp_channel_id.to_s
                                                      
                                            @baidu_db[db_name].bulk_write(data_arr)
                                            @baidu_db.close()
                                          
                                        elsif temp_channel == "baidu"
                                            db_name = "keyword_baidu_"+temp_channel_id.to_s
                                                      
                                            @baidu_db[db_name].bulk_write(data_arr)
                                            @baidu_db.close()  
                                        
                                        elsif temp_channel == "sogou"
                                            
                                            db_name = "keyword_sogou_"+temp_channel_id.to_s
                                                      
                                            @sogou_db[db_name].bulk_write(data_arr)
                                            @sogou_db.close() 
                                            
                                        elsif temp_channel == "360"
                                            
                                            db_name = "keyword_360_"+temp_channel_id.to_s
                                                      
                                            @threesixty_db[db_name].bulk_write(data_arr)
                                            @threesixty_db.close() 
                                        end
                                        
                                        data_arr = []
                                    end
                                  
                                  
                                    @logger.info "run login"
                                    # @logger.info csv[3].to_s
                                    # @logger.info csv[4].to_s
                                    
                                    @network = @db["network"].find('id' => csv[7].to_i)
                                    @db.close
                                    
                                    if @network.count.to_i <= 0
                                        @logger.info "run login network not found"
                                        
                                        temp_csv = csv
                                        temp_csv[14] = "Network not found"
                                         
                                        error_csv_array << temp_csv
                                        
                                        temp_channel = ""
                                        temp_channel_id = ""
                                        
                                        api_login = 0
                                    else
                                      
                                      
                                        temp_channel = csv[6].to_s
                                        temp_channel_id = csv[7].to_s
                                        
                                        @network.each do |network_d|
                                          
                                            @tracking_type = network_d["tracking_type"].to_s
                                            @ad_redirect = network_d["ad_redirect"].to_s
                                            @keyword_redirect = network_d["keyword_redirect"].to_s
                                            @company_id = network_d["company_id"].to_s
                                            @cookie_length = network_d["cookie_length"].to_s
                        
                        
                        
                                            if csv[6].to_s.downcase == "shenma"
                                              
                                                @username = network_d["username"]
                                                @password = network_d["password"]
                                                @apitoken = network_d["api_token"]
                                                
                                                service = "account"
                                                method = "getAccount"
                                                
                                                json = {'header' => { 
                                                                        'token' => @apitoken.to_s,
                                                                        'username' => @username.to_s,
                                                                        'password' => @password.to_s
                                                                    },
                                                         'body'  => {
                                                                        'requestData' => ["account_all"]
                                                                    }
                                                        }
                                                        
                                                        
                                                @account_info = shenma_api(service,method,json)
                                                
                                                
                                                if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                                                    @header = @account_info["header"]
                                                    @remain_quote = @header["leftQuota"]
                                                    
                                                    if @remain_quote.to_i <= 500  
                                                        temp_csv = csv
                                                        temp_csv[6] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                                    else
                                                        api_login = 1
                                                    end
                                                else
                                                    temp_csv = csv
                                                    temp_csv[6] = @account_info["header"]["failures"][0]["message"].to_s
                                                    error_csv_array << temp_csv    
                                                end
                                              
                                            elsif csv[6].to_s.downcase == "baidu"
                                              
                                                @username = network_d["username"]
                                                @password = network_d["password"]
                                                @apitoken = network_d["api_token"]
                                                      
                                                service = "AccountService"
                                                method = "getAccountInfo"
                                                
                                                json = {'header' => { 
                                                                        'token' => @apitoken.to_s,
                                                                        'username' => @username.to_s,
                                                                        'password' => @password.to_s 
                                                                    },
                                                         'body'  => {
                                                                        'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                                                                    }
                                                        }       
                                                        
                                                @account_info = baidu_api(service,method,json)
                                                # @logger.info @account_info
                                                
                                                if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                                                    @header = @account_info["header"]
                                                    @remain_quote = @header["rquota"]
                                                    
                                                    if @remain_quote.to_i <= 500  
                                                        temp_csv = csv
                                                        temp_csv[6] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                                    else
                                                        api_login = 1
                                                    end
                                                else
                                                    temp_csv = csv
                                                    temp_csv[6] = @account_info["header"]["failures"][0]["message"].to_s
                                                    error_csv_array << temp_csv    
                                                end
                                                
                                            elsif csv[6].to_s.downcase == "sogou"
                                              
                                                sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                                                sogou_result = @sogou_api.call(:get_account_info)
                                                
                                                # @logger.info sogou_result
                                                
                                                if sogou_result.header[:res_header][:desc].to_s == "success"
                                                    @remain_quote = sogou_result.header[:res_header][:rquota].to_i
                                                    if @remain_quote.to_i <= 500
                                                        
                                                        temp_csv = csv
                                                        temp_csv[14] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                        
                                                    else
                                                        api_login = 1
                                                        sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcService")
                                                    end
                                                else
                                                    
                                                    temp_csv = csv
                                                    if @header[:res_header][:failures][:message].to_s == ""
                                                        temp_csv[14] = "Publisher API server error."
                                                    else
                                                        temp_csv[14] = @header[:res_header][:failures][:message].to_s
                                                    end
                                                    error_csv_array << temp_csv
                                                    
                                                end
                                              
                                            elsif csv[6].to_i.to_s == "360" || csv[6].downcase.to_s == "threesixty" || csv[6].to_i == 360
                                              
                                                @username = network_d["username"]
                                                @password = network_d["password"]
                                                @apitoken = network_d["api_token"]
                                                @apisecret = network_d["api_secret"]
                                                
                                                temp_360_account_id = network_d["accountid"]
                                                
                                                login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                                                @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                                                
                                                @logger.info @username
                                                
                                                if !@refresh_token.nil?
                                                    api_login = 1
                                                    @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "account", "getInfo")
                                                    
                                                    @remain_quote = @response.headers["quotaremain"].to_i
                                                    if @remain_quote.to_i <= 500
                                                        temp_csv = csv
                                                        temp_csv[14] = "not enough quota on the channel"
                                                        error_csv_array << temp_csv
                                                    end
                                                else
                                                  
                                                    temp_csv = csv
                                                    temp_csv[14] = login_info["account_clientLogin_response"]["failures"]["item"]["message"].to_s
                                                    error_csv_array << temp_csv
                                                    
                                                end
                                              
                                              
                                            else
                                                api_login = 0
                                                temp_channel = ""
                                                temp_channel_id = ""
                                                
                                                temp_csv = csv
                                                temp_csv[14] = "Channel Incorrect"
                                                error_csv_array << temp_csv
                                            end
                                        end
                                    end  
                                end
                                
                                
                                if api_login == 1
                                  
                                  
                                    if csv[6].to_s.downcase == "shenma"
                                      
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[14] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            if csv[1].downcase.to_s == "inactive"
                                                pause = "true"
                                            elsif csv[1].downcase..to_s == "active"
                                                pause = "false"
                                            else
                                                pause = "false"
                                            end
                                            
                                            if csv[10].downcase.to_s.include?("exact")
                                                matchtype = 0
                                            elsif csv[10].downcase.to_s.include?("broad")
                                                matchtype = 2
                                            elsif csv[10].downcase.to_s.include?("phrase")
                                                matchtype = 1
                                            else
                                                matchtype = 2
                                            end
                                            
                                            requesttypearray = [] 
                                            requesttype = {}
                                            requesttype[:keywordId]    =     csv[0].to_i
                                            
                                            @final_url = csv[11].to_s
                                           
                                            if @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes" && @final_url.to_s != ""
                                                @temp_final_url = @final_url
                                                @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @final_url = @final_url + "&campaign_id="+csv[5].to_i.to_s+"&adgroup_id="+csv[3].to_i.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                                @final_url = @final_url + "&device=pc"
                                                @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                            end
                                            
                                            requesttype[:destinationUrl]    =     @final_url
                                           
                                            
                                            requesttype[:pause]    =     pause
                                            requesttype[:price]         =     csv[13].to_f
                                            requesttype[:matchType] =  matchtype.to_i
                                            
                                            requesttypearray << requesttype
                                    
                                            service = "keyword"
                                            method = "updateKeyword"
                                            
                                            json = {'header' => { 
                                                            'token' => @apitoken.to_s,
                                                            'username' => @username.to_s,
                                                            'password' => @password.to_s 
                                                          },
                                                     'body'  => {
                                                            'keywordTypes' => requesttypearray
                                                          }
                                                    }       
                                                
                                            @update_info = shenma_api(service,method,json)
                                                                                                                 
                                            @logger.info @update_info
                                            
                                            @header = @update_info["header"]
                                            @remain_quote = @header["leftQuota"]
                                            
                                            if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                                                # db_name = "keyword_baidu_"+csv[7].to_i.to_s
                                                # @baidu_db[db_name].find('keyword_id' => csv[0].to_i).update_one('$set'=> { 'match_type' => matchtype.to_i, 'price' => csv[13].to_f, 'visit_url' => @final_url.to_s, 'mobile_visit_url' => @m_final_url.to_s,'pause' => pause.to_s, 'status' => @update_info["body"]["data"][0]["status"].to_i })
                                                # @baidu_db.close()
                                                
                                                
                                                set_detail_hash = {}
                                                set_detail_hash[:match_type] = matchtype.to_i
                                                set_detail_hash[:price] = csv[13].to_f
                                                set_detail_hash[:visit_url] = @final_url.to_s
                                                set_detail_hash[:pause] = pause.to_s
                                                
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:keyword_id] = csv[0].to_i
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                    db_name = "keyword_shenma_"+csv[7].to_i.to_s
                                                    @baidu_db[db_name].bulk_write(data_arr)
                                                    @baidu_db.close()  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                                
                                                
                                            else
                                                temp_csv = csv
                                                temp_csv[14] = @update_info["header"]["failures"][0]["message"].to_s
                                                error_csv_array << temp_csv    
                                            end
                                          
                                        end
                                      
                                      
                                    elsif csv[6].to_s.downcase == "baidu"
                                      
                                        
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[14] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            if csv[1].downcase.to_s == "inactive"
                                                pause = "true"
                                            elsif csv[1].downcase..to_s == "active"
                                                pause = "false"
                                            else
                                                pause = "false"
                                            end
                                            
                                            if csv[10].downcase.to_s.include?("exact")
                                                matchtype = 1
                                            elsif csv[10].downcase.to_s.include?("broad")
                                                matchtype = 3
                                            elsif csv[10].downcase.to_s.include?("phrase")
                                                matchtype = 2
                                            else
                                                matchtype = 3
                                            end
                                            
                                            requesttypearray = [] 
                                            requesttype = {}
                                            requesttype[:keywordId]    =     csv[0].to_i
                                            requesttype[:keyword]    =     0
                                            requesttype[:adgroupId]    =     0
                                            
                                            @final_url = csv[11].to_s
                                           
                                            if @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes" && @final_url.to_s != ""
                                                @temp_final_url = @final_url
                                                @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @final_url = @final_url + "&campaign_id="+csv[5].to_i.to_s+"&adgroup_id="+csv[3].to_i.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                                @final_url = @final_url + "&device=pc"
                                                @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                            end
                                            
                                            requesttype[:pcDestinationUrl]    =     @final_url
                                           
                                           
                                            @m_final_url = csv[12].to_s
                                            
                                            if @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes" && @m_final_url.to_s != ""
                                                @temp_m_final_url = @m_final_url
                                                @m_final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @m_final_url = @m_final_url + "&campaign_id="+csv[5].to_i.to_s+"&adgroup_id="+csv[3].to_i.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                @m_final_url = @m_final_url + "&cookie="+@cookie_length.to_s
                                                @m_final_url = @m_final_url + "&device=mobile"
                                                @m_final_url = @m_final_url + "&tv=v1&durl="+CGI.escape(@temp_m_final_url.to_s)
                                            end
                                            
                                            requesttype[:mobileDestinationUrl] =  @m_final_url
                                            
                                            requesttype[:pause]    =     pause
                                            requesttype[:price]         =     csv[13].to_f
                                            requesttype[:matchType] =  matchtype.to_i
                                            
                                            requesttypearray << requesttype
                                    
                                            service = "KeywordService"
                                            method = "updateWord"
                                            
                                            json = {'header' => { 
                                                        'token' => @apitoken.to_s,
                                                        'username' => @username.to_s,
                                                        'password' => @password.to_s 
                                                      },
                                                 'body'  => {
                                                        'keywordTypes' => requesttypearray
                                                      }
                                                }       
                                                
                                            @update_info = baidu_api(service,method,json)
                                                                                                                 
                                            @logger.info @update_info
                                            
                                            @header = @update_info["header"]
                                            @remain_quote = @header["rquota"]
                                            
                                            if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                                                # db_name = "keyword_baidu_"+csv[7].to_i.to_s
                                                # @baidu_db[db_name].find('keyword_id' => csv[0].to_i).update_one('$set'=> { 'match_type' => matchtype.to_i, 'price' => csv[13].to_f, 'visit_url' => @final_url.to_s, 'mobile_visit_url' => @m_final_url.to_s,'pause' => pause.to_s, 'status' => @update_info["body"]["data"][0]["status"].to_i })
                                                # @baidu_db.close()
                                                
                                                
                                                set_detail_hash = {}
                                                set_detail_hash[:match_type] = matchtype.to_i
                                                set_detail_hash[:price] = csv[13].to_f
                                                set_detail_hash[:visit_url] = @final_url.to_s
                                                set_detail_hash[:mobile_visit_url] = @m_final_url.to_s
                                                set_detail_hash[:pause] = pause.to_s
                                                set_detail_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                                                
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:keyword_id] = csv[0].to_i
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                    db_name = "keyword_baidu_"+csv[7].to_i.to_s
                                                    @baidu_db[db_name].bulk_write(data_arr)
                                                    @baidu_db.close()  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                                
                                                
                                            else
                                                temp_csv = csv
                                                temp_csv[14] = @update_info["header"]["failures"][0]["message"].to_s
                                                error_csv_array << temp_csv    
                                            end
                                          
                                        end
                                        
                                      
                                      
                                  
                                  
                                    elsif csv[6].to_s.downcase == "sogou"
                                      
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[14] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            if csv[1].downcase.to_s == "inactive"
                                                pause = "true"
                                            elsif csv[1].downcase..to_s == "active"
                                                pause = "false"
                                            else
                                                pause = "false"
                                            end
                                            
                                            if csv[10].downcase.to_s.include?("exact")
                                                matchtype = 0
                                            elsif csv[10].downcase.to_s.include?("broad")
                                                matchtype = 1
                                            elsif csv[10].downcase.to_s.include?("phrase")
                                                matchtype = 2
                                            else
                                                matchtype = 0
                                            end
                                            
                                            requesttypearray = [] 
                                            requesttype = {}
                                            requesttype[:cpcId]    =     csv[0].to_i
                                            requesttype[:cpc]    =     0
                                            requesttype[:cpcGrpId]    =     0
                                            
                                            @final_url = csv[11].to_s
                                           
                                            if @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes" && @final_url.to_s != ""
                                                @temp_final_url = @final_url
                                                @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @final_url = @final_url + "&campaign_id="+csv[5].to_i.to_s+"&adgroup_id="+csv[3].to_i.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                                @final_url = @final_url + "&device=pc"
                                                @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                            end
                                            
                                            requesttype[:visitUrl]    =     @final_url
                                           
                                           
                                            @m_final_url = csv[12].to_s
                                            
                                            if @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes" && @m_final_url.to_s != ""
                                                @temp_m_final_url = @m_final_url
                                                @m_final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @m_final_url = @m_final_url + "&campaign_id="+csv[5].to_i.to_s+"&adgroup_id="+csv[3].to_i.to_s+"&ad_id={creative}&keyword_id={keywordid}"
                                                @m_final_url = @m_final_url + "&cookie="+@cookie_length.to_s
                                                @m_final_url = @m_final_url + "&device=mobile"
                                                @m_final_url = @m_final_url + "&tv=v1&durl="+CGI.escape(@temp_m_final_url.to_s)
                                            end
                                            
                                            requesttype[:mobileVisitUrl] =  @m_final_url
                                            
                                            requesttype[:pause]    =     pause
                                            requesttype[:price]         =     csv[13].to_f
                                            requesttype[:matchType] =  matchtype.to_i
                                            
                                            requesttypearray << requesttype
                                    
                                            @logger.info requesttypearray
                                            @update_status = @sogou_api.call(:update_cpc, message: { cpcTypes: requesttypearray })
                                                                                                                 
                                            @header = @update_status.header.to_hash
                                            @msg = @header[:res_header][:desc]
                                            @remain_quote = @header[:res_header][:rquota]
                                                                                                                 
                                            @logger.info @header 
                                            @update_status_body = @update_status.body.to_hash
                                            
                                            if @msg.to_s.downcase == "success"
                                                # db_name = "keyword_sogou_"+csv[7].to_i.to_s
                                                # @sogou_db[db_name].find('keyword_id' => csv[0].to_i).update_one('$set'=> { 'match_type' => matchtype.to_i, 'price' => csv[13].to_f, 'visit_url' => @final_url.to_s,'mobile_visit_url' => @m_final_url.to_s,'pause' => pause.to_s, 'status' => @update_status_body[:update_cpc_response][:cpc_types][:status].to_i })
                                                # @sogou_db.close()
                                                
                                                
                                                set_detail_hash = {}
                                                set_detail_hash[:match_type] = matchtype.to_i
                                                set_detail_hash[:price] = csv[13].to_f
                                                set_detail_hash[:visit_url] = @final_url.to_s
                                                set_detail_hash[:mobile_visit_url] = @m_final_url.to_s
                                                set_detail_hash[:pause] = pause.to_s
                                                set_detail_hash[:status] = @update_status_body[:update_cpc_response][:cpc_types][:status].to_i
                                                
                                                
                                                set_hash = {}
                                                set_hash['$set'] = set_detail_hash
                                                
                                                filter_hash = {}
                                                filter_hash[:keyword_id] = csv[0].to_i
                                                
                                                update_hash = {}
                                                update_hash[:filter] = filter_hash
                                                update_hash[:update] = set_hash
                                                
                                                data_hash = {}
                                                data_hash[:update_one] = update_hash
                                                
                                                data_arr << data_hash
                                                
                                                if data_arr.count.to_i > 100
                                                    db_name = "keyword_sogou_"+csv[7].to_i.to_s
                                                    @sogou_db[db_name].bulk_write(data_arr)
                                                    @sogou_db.close()  
                                                    
                                                    data_arr = []
                                                    
                                                    sleep 2
                                                end
                                                
                                                
                                            else
                                                temp_csv = csv
                                                
                                                if @header[:res_header][:failures][:message].to_s == ""
                                                    temp_csv[14] = "Publisher API server error."
                                                else
                                                    temp_csv[14] = @header[:res_header][:failures][:message].to_s
                                                end
                                                
                                                error_csv_array << temp_csv    
                                            end
                                          
                                        end
                                        
                                    elsif csv[6].to_i.to_s == "360" || csv[6].downcase.to_s == "threesixty" || csv[6].to_i == 360
                                      
                                      
                                        if @remain_quote.to_i <= 500
                                        # keep the error row here and form a new one excel       
                                            temp_csv = csv
                                            # temp_csv << "not enough quota on the channel"
                                            temp_csv[14] = "not enough quota on the channel"
                                            
                                            error_csv_array << temp_csv                                   
                                        else
                                          
                                            if csv[1].downcase.to_s == "inactive"
                                                status = "pause"
                                                db_status = "暂停"
                                                
                                            elsif csv[1].downcase.to_s == "active"
                                                status = "enable"
                                                db_status = "启用"
                                            else
                                                status = "pause"
                                                db_status = "暂停"
                                            end
                                            
                                            if csv[10].downcase.to_s.include?("intelligence")
                                                matchType = "phrase_intelligence"
                                                dbmatchType = "智能短语"                
                                            elsif csv[10].downcase.to_s.include?("exact")
                                                matchtype = "exact"
                                                dbmatchtype = "精确"
                                            elsif csv[10].downcase.to_s.include?("broad")
                                                matchtype = "broad"
                                                dbmatchtype = "广泛"
                                            elsif csv[10].downcase.to_s.include?("phrase")
                                                matchtype = "phrase"
                                                dbmatchtype = "短语"
                                            else
                                                matchType = "phrase_intelligence"
                                                dbmatchType = "智能短语"
                                            end
                                            
                                            
                                            @final_url = csv[11].to_s
                                             
                                            if @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes" && @final_url.to_s != ""
                                                @temp_final_url = @final_url
                                                
                                                @final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @final_url = @final_url + "&campaign_id={planid}&adgroup_id={groupid}&ad_id={creativeid}&keyword_id="+csv[0].to_i.to_s
                                                @final_url = @final_url + "&cookie="+@cookie_length.to_s
                                                @final_url = @final_url + "&device=pc"
                                                @final_url = @final_url + "&tv=v1&durl="+CGI.escape(@temp_final_url.to_s)
                                            end
                                              
                                            
                                            
                                            
                                            @m_final_url = csv[12].to_s
                                              
                                            if @tracking_type.to_s.downcase == "adeqo" && @keyword_redirect.to_s.downcase == "yes" && @m_final_url.to_s != ""
                                                @temp_m_final_url = @m_final_url
                                                
                                                @m_final_url = "http://t.adeqo.com/click?company_id="+@company_id.to_s+"&network_id="+csv[7].to_i.to_s
                                                @m_final_url = @m_final_url + "&campaign_id={planid}&adgroup_id={groupid}&ad_id={creativeid}&keyword_id="+csv[0].to_i.to_s
                                                @m_final_url = @m_final_url + "&cookie="+@cookie_length.to_s
                                                @m_final_url = @m_final_url + "&device=mobile"
                                                @m_final_url = @m_final_url + "&tv=v1&durl="+CGI.escape(@temp_m_final_url.to_s)
                                            end
                                            
                                            requesttypearray = []
                                            request_str = '{
                                                            "id":'+csv[0].to_i.to_s+',
                                                            "url":"'+@final_url+'",
                                                            "mobileUrl":"'+@m_final_url+'",
                                                            "status":"'+status+'",
                                                            "price":"'+csv[13].to_f.to_s+'",
                                                            "matchType":"'+matchtype.to_s+'"
                                                           }'
                                            
                                            
                                            # @logger.info request_str
                                            requesttypearray << request_str
                                            request = '['+requesttypearray.join(",")+']'
                                            
                                            body = { 
                                                'keywords' => request
                                            }
                                            @logger.info csv
                                            
                                            
                                            @update_res = threesixty_api( @apitoken.to_s, @refresh_token, "keyword", "update", body)
                                            @affectedRecords = @update_res["keyword_update_response"]["affectedRecords"]
                                            @remain_quote = @response.headers["quotaremain"].to_i
                                            
                                            
                                            @logger.info @update_res
                                            # @logger.info @update_res
                                            
                                            if !@update_res["keyword_update_response"]["failures"].nil?
                                                temp_csv = csv
                                                temp_csv[14] = @update_res["keyword_update_response"]["failures"]["item"]["message"]
                                                error_csv_array << temp_csv
                                            else
                                              
                                                if @affectedRecords.to_i == 0
                                                  
                                                    temp_csv = csv
                                                    temp_csv[14] = "ID not found."
                                                    error_csv_array << temp_csv 
                                                    
                                                else
                                                
                                                    # db_name = "keyword_360_"+csv[7].to_i.to_s
#                                                     
                                                    # @threesixty_db[db_name].find('keyword_id' => csv[0].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s, 'mobile_visit_url' => @m_final_url.to_s,'status' => db_status.to_s,'price' => csv[13].to_f, 'match_type' => dbmatchtype.to_s  })
                                                    # @threesixty_db.close()
                                                    
                                                    
                                                    set_detail_hash = {}
                                                    set_detail_hash[:match_type] = dbmatchtype.to_s
                                                    set_detail_hash[:price] = csv[13].to_f
                                                    set_detail_hash[:visit_url] = @final_url.to_s
                                                    set_detail_hash[:mobile_visit_url] = @m_final_url.to_s
                                                    set_detail_hash[:status] = db_status.to_s
                                                    
                                                    
                                                    set_hash = {}
                                                    set_hash['$set'] = set_detail_hash
                                                    
                                                    filter_hash = {}
                                                    filter_hash[:keyword_id] = csv[0].to_i
                                                    
                                                    update_hash = {}
                                                    update_hash[:filter] = filter_hash
                                                    update_hash[:update] = set_hash
                                                    
                                                    data_hash = {}
                                                    data_hash[:update_one] = update_hash
                                                    
                                                    data_arr << data_hash
                                                    
                                                    if data_arr.count.to_i > 100
                                                        db_name = "keyword_360_"+csv[7].to_i.to_s
                                                        @threesixty_db[db_name].bulk_write(data_arr)
                                                        @threesixty_db.close()  
                                                        
                                                        data_arr = []
                                                        
                                                        sleep 1
                                                        @logger.info "wait 1 sec"
                                                    end
                                                    
                                                end
                                                
                                            end
                                            
                                            
                                            
                                          
                                        end
                                       
                                    else
                                        api_login = 0
                                        temp_channel = ""
                                        temp_channel_id = ""
                                        
                                        temp_csv = csv
                                        temp_csv[14] = "Channel Incorrect"
                                        error_csv_array << temp_csv
                                    end
                                end
                                
                                
                                
                            end
                        end
                      
                        if data_arr.count.to_i > 0
                          
                          
                            if temp_channel == "shenma"
                              
                                db_name = "keyword_shenma_"+temp_channel_id.to_s
                                          
                                @baidu_db[db_name].bulk_write(data_arr)
                                @baidu_db.close()
                                
                            elsif temp_channel == "baidu"
                                db_name = "keyword_baidu_"+temp_channel_id.to_s
                                          
                                @baidu_db[db_name].bulk_write(data_arr)
                                @baidu_db.close()  
                            
                            elsif temp_channel == "sogou"
                                
                                db_name = "keyword_sogou_"+temp_channel_id.to_s
                                          
                                @sogou_db[db_name].bulk_write(data_arr)
                                @sogou_db.close() 
                                
                            elsif temp_channel == "360"
                                
                                db_name = "keyword_360_"+temp_channel_id.to_s
                                          
                                @threesixty_db[db_name].bulk_write(data_arr)
                                @threesixty_db.close() 
                            end
                            
                            data_arr = []
                        end
                    else
                        bulkerror(all_bulk_d['_id'],"Apply Level error.")
                        deleditbulkfile(all_bulk_d['file_id'])
                        
                        data = {:message => "excel file header error", :status => "true"}
                        return render :json => data, :status => :ok
                    end
                    
                    rescue Exception
                        bulkreset(all_bulk_d['_id'], "edit")
                        
                        data = {:message => "api connect error, reset edit", :status => "true"}
                        return render :json => data, :status => :ok
                    end
              end
              
              
              if all_bulk_d['bulk_type'] == "add"
                  deladdbulkfile(all_bulk_d['file_id'])
              elsif all_bulk_d['bulk_type'] == "edit"
                  deleditbulkfile(all_bulk_d['file_id'])
              end
              
              
              if error_csv_array.count.to_i > 0
                
                  wb.add_worksheet(:name => "Basic Worksheet") do |sheet|
                      
                      if all_bulk_d['bulk_type'] == "add"
                          if all_bulk_d['upload_type'] == "campaigns"
                              sheet.add_row ["Campaign Name(Require)", "Daily Budget(Optional)", "Negative Words", "Exact Negative Words", "Status (Optional; possible values: paused, active; if not specified will default to paused; 360 always activ)", "Start Date(Optional , 360 only)", "End Date(Optional , 360 only)", "Error"]
                          elsif all_bulk_d['upload_type'] == "adgroup"
                              sheet.add_row ["Campaign Name(Require)", "Adgroup Name(Require)", "Status (Optional, Sogou Only;  possible values: paused, active; if not specified will default to pause; 360 always active)", "Max. CPC Bid (Required)", "Error"]
                          elsif all_bulk_d['upload_type'] == "ad"
                              sheet.add_row ["Campaign Name(Require)", "Adgroup Name(Require)", "Title(Require, 5 Chinese Word Min)", "Description 1(Require)", "Description 2(Sogou: Require;  360:Optional)", "Landing Page URL (Require)", "Display URL(Optional)", "Mobile Landing Page URL(Optional)", "Mobile Display URL (Optional)", "Status (Optional; possible values: paused, active; if not specified will default to paused; 360 always active)", "Error"]
                          elsif all_bulk_d['upload_type'] == "keyword"
                              sheet.add_row ["Campaign Name(Require)", "Adgroup Name(Require)", "Keyword(Require)", "Match Type (Required, possible values: exact, phrase, broad)", "Keyword Status (Optional; possible values: paused, active; if not specified will default to paused)", "Max. CPC (Optional, must be greater than 0)", "Landing Page URL (Optional)", "Mobile landing Page URL (Optional)", "Error"]
                          else  
                              
                          end
                      elsif all_bulk_d['bulk_type'] == "edit"
                          if all_bulk_d['upload_type'] == "campaigns"
                              sheet.add_row ["﻿ID", "﻿Status", "Campaign", "﻿Channel", "﻿Channel ID", "﻿Account Name"]
                          elsif all_bulk_d['upload_type'] == "adgroup"
                              sheet.add_row ["﻿Ad Group ID", "Status", "﻿Ad Group Name", "﻿Campaign ID", "﻿Campaign Name", "﻿Channel Type", "﻿Channel ID", "﻿Channel Name", "﻿Default Max. CPC", "Error"]
                          elsif all_bulk_d['upload_type'] == "ad"
                              sheet.add_row ["﻿Ad ID", "﻿Status", "﻿Ad Group Name", "﻿Ad Group ID", "﻿Campaign Name", "﻿Campaign ID", "﻿Channel Type", "﻿Channel ID", "﻿Channel Name", "﻿Headline", "﻿Description Line1", "﻿Description Line2", "Display Url", "Final Url", "Mobile Display Url", "Mobile Final Url", "Error"]
                          elsif all_bulk_d['upload_type'] == "keyword"
                              sheet.add_row ["﻿Keyword ID", "﻿Status", "﻿Ad Group Name", "﻿Ad Group ID", "﻿Campaign Name", "﻿Campaign ID", "﻿Channel Type", "﻿Channel ID","﻿Channel Name", "﻿Keyword", "Match Type", "Landing page Url", "Mobile Landing page Url", "Default Max. CPC", "Error"]
                          else  
                              
                          end
                      end
                      
                      error_csv_array.each_with_index do |csv, csv_index|
                          sheet.add_row csv
                      end
                  end
                  
                  #direct create the new one, no need to move
                  
                  
                  create_excel_path = '/home/bmg/worker/public/bulk/download/'+all_bulk_d['file_id']+'.xlsx'
                  p.serialize(create_excel_path)
                
                  bulkdone(all_bulk_d['_id'],"Errors occurred during the processing. Please review the report <a target='_blank' href='"+download_path +""+ all_bulk_d['file_id']+".xlsx'> here</a>.")
                  # bulkdone(all_bulk_d['_id'],"Success with error. Pleas check the report <a target='_blank' href='"+download_path +""+ all_bulk_d['file_id']+".xlsx'> here</a> and reupload it again later.")
              else                  
                  bulkdone(all_bulk_d['_id'],"Success.")
              end
              
          end
      end
      
      @logger.info "done run bulkjob"
      data = {:message => "done", :status => "true", :error_csv_array => error_csv_array}
      return render :json => data, :status => :ok
      
  end
  
  
  
  
  
  def bulkjob
    
      file = params[:file]
      @upload_type = params[:upload_type]
      @account_id = params[:account]
      @status = params[:status]
      @bulk_type = params[:bulk_type]
      @user_email = params[:user_email]
      
      begin
          xlsx = Roo::Spreadsheet.open(file.path, extension: :xlsx)
      rescue Exception
          # return render :text => "File type error, Exexl File(.xlsx) only."
          
          @db2["bulkjob"].insert_one({ 
                                          user_email: @user_email.to_s,
                                          upload_type: @upload_type.to_s,
                                          bulk_type: @bulk_type.to_s,
                                          file_id: "",  
                                          status: 4,
                                          worker: "",
                                          msg: "Excel file upload error/File type incorrect.",
                                          request_date: @now                                            
                                     })
          @db2.close()
          
          data = {:message => "File type error, Exexl File(.xlsx) only.", :status => "false", :file => file.original_filename}
          return render :json => data, :status => :ok
      end
      
      @logger.info @bulk_type
      
      begin
          
          if @bulk_type.to_s == "add"
              @network = @db["network"].find('id' => @account_id.to_i)
              @db.close
              
              @logger.info @network.count.to_i.to_s
              
              if @network.count.to_i > 0
                  
                  @network.each do |network_d|
                      @network_type = network_d['type']
                  end
                  
                  # @zip_file = "/datadrive/tmp/bulk/"+file.original_filename + ".xlsx"
                  file_id = SecureRandom.hex(18)
                  destiny_file = "/datadrive/tmp/bulk/"+@bulk_type.to_s+"/"+ file_id + ".xlsx"
                                       
                  FileUtils.move file.path, destiny_file
                  FileUtils.chmod 0755, destiny_file
                  @db2["bulkjob"].insert_one({ 
                                                  network_id: @account_id.to_i,
                                                  network_type: @network_type.to_s,
                                                  user_email: @user_email.to_s,
                                                  upload_type: @upload_type.to_s,
                                                  bulk_type: @bulk_type.to_s,
                                                  file_id: file_id.to_s,  
                                                  status: @status.to_i,
                                                  worker: @port.to_i,
                                                  request_date: @now                                            
                                             })
                  @db2.close()
              end
              
          elsif @bulk_type.to_s == "edit"
              file_id = SecureRandom.hex(18)
              destiny_file = "/datadrive/tmp/bulk/"+@bulk_type.to_s+"/"+ file_id + ".xlsx"
              
                                          
              FileUtils.move file.path, destiny_file
              FileUtils.chmod 0755, destiny_file
              
              @db2["bulkjob"].insert_one({ 
                                              user_email: @user_email.to_s,
                                              upload_type: @upload_type.to_s,
                                              bulk_type: @bulk_type.to_s,
                                              file_id: file_id.to_s,  
                                              status: @status.to_i,
                                              worker: @port.to_i,
                                              request_date: @now                                            
                                         })
              @db2.close()
          end
          
      rescue Exception
          @db2["bulkjob"].insert_one({ 
                                          user_email: @user_email.to_s,
                                          upload_type: @upload_type.to_s,
                                          bulk_type: @bulk_type.to_s,
                                          file_id: "",  
                                          status: 4,
                                          worker: "",
                                          msg: "Excel file upload error/File type incorrect.",
                                          request_date: @now                                            
                                     })
          @db2.close()
      end
      
      data = {:message => "done", :status => "true"}
      return render :json => data, :status => :ok
      
  end
  
  def threemonthsevent
      
      @logger.info "360 event house keeping"
      @three_months_ago = @now.to_date - 4.months
      @three_months_ago = @three_months_ago.strftime("%Y-%m") + "-01"
      
      # @db2["events"].find('date' => { '$lt' => @three_months_ago.to_s }).delete_many
      
      total = @db2["events"].find('date' => { '$lt' => @three_months_ago.to_s }).limit(4500)
      @db2.close()
      del_array = []
      
      if total.count.to_i > 0
          total.each do |total_d|
            
              del_array << total_d["_id"]
              
              # begin
                  # @db2["events"].find('_id' => total_d["_id"]).delete_one
                  # @db2.close()
              # rescue Exception
              # end
          end 
          
          @db2["events"].find('_id' =>{ "$in" => del_array}).delete_many
          @db2.close()
      end
      
      @logger.info "360 event house keeping complete" 
      data = {:message => "done", :status => "false", :total => total.count.to_i}
      return render :json => data, :status => :ok 
  end
  
  
  def threemonthsclicks
      
      @logger.info "360 click house keeping run"
      @three_months_ago = @now.to_date - 4.months
      @three_months_ago = @three_months_ago.strftime("%Y-%m") + "-01"
      
      # @db2["clicks"].find('date' => { '$lt' => @three_months_ago.to_s }).delete_many
      
      total = @db2["clicks"].find('date' => { '$lt' => @three_months_ago.to_s }).limit(5000)
      @db2.close()
      del_array = []
      
      if total.count.to_i > 0
          total.each do |total_d|
              
              del_array << total_d["_id"]
              # begin
                  # @db2["clicks"].find('_id' => total_d["_id"]).delete_one
                  # @db2.close()
              # rescue Exception
              # end
          end 
          
          @db2["clicks"].find('_id' =>{ "$in" => del_array}).delete_many
          @db2.close()
      end
      
      
      @logger.info "360 click house keeping complete" 
      data = {:message => "done", :status => "false", :total => total.count.to_i}
      return render :json => data, :status => :ok 
  end
  
  
  
  def g_revenue
      
      @logger.info "g_revenue called"
      
      @aid = "293249"
      @sid = "751910"
      @key = "53ace42b26744d87863f27778dc046f6"
      @icode = "7cf8db467f2a4cebb94f814446a2d5ac"
      
      
      @uuid = SecureRandom.uuid.to_s
         
        
      # @db2[:clicks].find('network_id' => 0).delete_many
      
      start_date = 50000000000000000.hours.ago
      start_date = start_date.in_time_zone('Beijing').strftime("%Y-%m-%d %H:%M:%S %Z")
       
       
      end_date = 3.days.ago
      end_date = end_date.in_time_zone('Beijing').strftime("%Y-%m-%d ")+"23:59:59"
       
      # end_date = 50.hours.ago
      # end_date = end_date.in_time_zone('Beijing').strftime("%Y-%m-%d %H:%M:%S %Z")
        
       
      # start_date = "2017-01-14 00:00:00 CST"
      # end_date = "2017-01-14 23:59:59 CST"
        
       
        
      # this is the real one        
      conversion = @db2[:conversion].find({ "$and" => [ { "$or" => [ {:update_revenue_status => nil},{:update_revenue_status => 0}] }, {:date => { '$lte' => end_date }}, {:order_id => { '$ne' => "" }}, {:order_id => { '$ne' => "0" }} ] })
      
      # conversion = @db2[:conversion].find({ "$and" => [ { "$or" => [ {:update_revenue_status => nil},{:update_revenue_status => 0}] }, {:date => { '$lte' => "2017-02-01 00:00:00 CST" }}, {:date => { '$gte' => "2017-01-01 00:00:00 CST" }}, {:order_id => { '$ne' => "" }}, {:order_id => { '$ne' => "0" }} ] }).limit(1000)
      # test
      # conversion = @db2[:conversion].find('update_revenue_status' => nil, 'date' => { '$gte' => start_date, '$lte' => end_date }, 'order_id' => { '$ne' => "" } )
      
      
      # conversion = @db2[:conversion].find('date' => { '$gte' => start_date, '$lte' => end_date }, 'order_id' => { '$ne' => "" } )
      # conversion = @db2[:conversion].find('id' => "3b407b3b-2598-417e-be8c-147245e824fa")
      # test
      @db2.close()
      
      # data = {:conversion => conversion, :status => "false"}
      # return render :json => data, :status => :ok
      
      @logger.info "g_revenue has " + conversion.count.to_s + " conversion"
      
      
      total_arr = []
      
      if conversion.count.to_i > 0
        
          @access_token = ""
          @refresh_token = ""
          
                    
          take_refresh_token_api_url = "https://openserviceauth.ctrip.com/openserviceauth/authorize.ashx?AID=" + @aid + "&SID=" + @sid + "&KEY=" + @key
          uri = URI.parse(take_refresh_token_api_url)
          http = Net::HTTP.new(uri.host, uri.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE
          @refresh_response = http.get(uri.request_uri)
          @refresh_token = JSON.parse(@refresh_response.body)['Refresh_Token'].to_s   
          
          
          # this is new method ctrip wants, call this every 8 minutes and no need to call fresh token
          @access_token = JSON.parse(@refresh_response.body)['Access_Token'].to_s

          
          # @logger.info @refresh_response.to_s
          
          # take_access_token_api_url = "https://openserviceauth.ctrip.com/openserviceauth/refresh.ashx?AID=" + @aid + "&SID=" + @sid + "&refresh_token=" + @refresh_token
          # uri = URI.parse(take_access_token_api_url)
          # http = Net::HTTP.new(uri.host, uri.port)
          # http.use_ssl = true
          # http.verify_mode = OpenSSL::SSL::VERIFY_NONE
          # @access_response = http.get(uri.request_uri)
          # @access_token = JSON.parse(@access_response.body)['Access_Token'].to_s
        
          if @refresh_token.to_s != "" && @access_token.to_s != ""
            
              data_arr = []
              count_arr = []
              
            
              conversion.no_cursor_timeout.each do |conversion_d|
                  # begin
                  
                      count_arr << conversion_d['id'].to_s
                      if count_arr.count.to_i > 500
                          sleep 0.4
                          count_arr = []
                      end
                  
                      @logger.info conversion_d['id'].to_s + "call ctrip api"
                      
                      @update_revenue = 0
                  
                      if conversion_d['company_id'].to_i == 1 && conversion_d['order_id'].to_s != ""
                          
                          # @logger.info @access_response.to_s
                          
                          @order_id = conversion_d['order_id'].to_s
                          
                          take_revenue_info_api = "http://openservice.ctrip.com/OpenService/ServiceProxy.ashx?AID=" + @aid + "&SID=" + @sid + "&ICODE=" + @icode + "&UUID=" + @uuid + "&Token=" + @access_token + "&Mode=1&OrderID_MD5=" + @order_id
                          response = HTTParty.get(take_revenue_info_api,timeout: 300)
                          
                          # @update_revenue = response.parsed_response["GetOrderInfoResponse"]["OrderInfo"]["Commission"].to_f
                          # @update_revenue = response.parsed_response
                          # @logger.info response.parsed_response["GetOrderInfoResponse"]["OrderInfo"]["BusinessType"].to_s
                          
                          
                          if !response.parsed_response["GetOrderInfoResponse"].nil?
                              
                              # data_arr << conversion_d['id'].to_s
                              
                              if !response.parsed_response["GetOrderInfoResponse"]["OrderInfo"].nil? && !response.parsed_response["GetOrderInfoResponse"]["OrderInfo"]["Commission"].nil?
                                  
                                  @update_revenue = response.parsed_response["GetOrderInfoResponse"]["OrderInfo"]["Commission"]
                                  @business_type = response.parsed_response["GetOrderInfoResponse"]["OrderInfo"]["BusinessType"].to_s
                                  
                                  # @db2[:conversion].find('_id' => conversion_d['_id']).update_one({ '$set' => {
                                                                                                                  # revenue: @update_revenue.to_f,
                                                                                                                  # business_type: @business_type.to_s,
                                                                                                                  # update_revenue_status: 1
                                                                                                              # }
                                                                                                  # })
                                  # @db2.close()
                                  
                                  
                                  set_detail_hash = {}
                                  set_detail_hash[:update_revenue_status] = 1
                                  set_detail_hash[:revenue] = @update_revenue.to_f
                                  set_detail_hash[:business_type] = @business_type.to_s
                                  
                                  set_hash = {}
                                  set_hash['$set'] = set_detail_hash
                                  
                                  filter_hash = {}
                                  filter_hash[:_id] = conversion_d['_id']
                                  
                                  update_hash = {}
                                  update_hash[:filter] = filter_hash
                                  update_hash[:update] = set_hash
                                  
                                  data_hash = {}
                                  data_hash[:update_one] = update_hash
                                  
                                  data_arr << data_hash
                                  
                                  total_arr << @order_id.to_s
                                  
                              else
                                
                                  # @db2[:conversion].find('_id' => conversion_d['_id']).update_one({ '$set' => {
                                                                                                                  # last_update: @now
                                                                                                              # }
                                                                                                  # })
                                  # @db2.close()
                                  
                                  
                                  
                              end
                              
                              
                              
                          elsif !response.parsed_response["ErrCode"].nil? && response.parsed_response["ErrCode"].to_i == 232
                          else
                              # @db2[:conversion].find('_id' => conversion_d['_id']).update_one({ '$set' => {
                                                                                                              # update_revenue_status: 0
                                                                                                          # }
                                                                                              # })
                              # @db2.close()
#                               
                              # set_detail_hash = {}
                              # set_detail_hash[:update_revenue_status] = 0
#                               
                              # set_hash = {}
                              # set_hash['$set'] = set_detail_hash
#                               
                              # filter_hash = {}
                              # filter_hash[:_id] = conversion_d['_id']
#                               
                              # update_hash = {}
                              # update_hash[:filter] = filter_hash
                              # update_hash[:update] = set_hash
#                               
                              # data_hash = {}
                              # data_hash[:update_one] = update_hash
#                               
                              # data_arr << data_hash
                              
                          end 
        
                          @logger.info "g_revenue order_id:" + conversion_d['order_id'].to_s + " :" + response.parsed_response.to_s
                              
                          
                      end
                      
                      if data_arr.count.to_i > 500
                           
                          @logger.info "insert 500 conversion"
                                    
                          @db2[:conversion].bulk_write(data_arr)
                          @db2.close()  
                          
                          data_arr = []
                      end
                  # rescue Exception
                  # end
              end
              
              
              if data_arr.count.to_i > 0
                
                  @logger.info "insert last all conversion"
                                    
                  @db2[:conversion].bulk_write(data_arr)
                  @db2.close()  
                  
              end
          end
          
                              
      end
      
      @logger.info "g_revenue added " + total_arr.count.to_s + " revenue"
      
      @logger.info "g_revenue done"
      
      data = {:conversion => total_arr, :status => "false"}
      return render :json => data, :status => :ok
  end
  
  
  def g_normal_conversion
    
      
      company_id_array = []
      all_cookie_lenght_hash = {}
      
      @logger.info "g_normal_conversion called"
      
      @network = @db[:network].find()
      @db.close()
      
      
      if @network.count.to_i == 0 
          @logger.info "g_normal_conversion done, no company id in db"
      
          data = {:message => "g_normal_conversion done, no network id in db", :status => "false"}
          return render :json => data, :status => :ok
      end
      
      @network.each do |network_d|
          all_cookie_lenght_hash["id"+network_d["id"].to_s] = network_d['cookie_length'].to_i
      end
      
      
      @company = @db[:company].find()
      @db.close()
      
      if @company.count.to_i == 0 
          @logger.info "g_normal_conversion done, no company id in db"
      
          data = {:message => "g_normal_conversion done, no company id in db", :status => "false"}
          return render :json => data, :status => :ok
      end
      
      @company.each do |company_d|
          company_id_array << company_d['id'].to_i
      end
      
          
      @conversion_rules = @db[:conversion_rules].find({ "$and" => [{:company_id => { "$in" => company_id_array}}, {:status => 1 }] } )
      @db.close
      
      date = @today.to_date.strftime("%Y-%m-%d")+" 23:59:59 CST"
      
      @event = @db2[:events].find( { "$and" => [{:date => { '$lte' => date.to_s}}, {:check_confirmation_status => 0 }] } ).sort({ date: -1 }).limit(1000)
      @db2.close()
      
      if @conversion_rules.count.to_i == 0 && @event.count.to_i == 0
          @logger.info "g_normal_conversion rules done, no rules in db"
      
          data = {:message => "g_normal_conversion rules done, no rules in db", :company_id_array => company_id_array, :status => "false"}
          return render :json => data, :status => :ok
      end
      
      # rules_url_hash = {}
      # rules_time_hash = {}
      # rules_event_hash = {}
      # rules_page_hash = {}
      
      rules_url_array = []
      rules_time_array = []
      rules_event_array = []
      rules_page_count_array = []
      rules_confirmation_array = []
      
      
      
      @conversion_rules.each do |conversion_rules_d|
        
          if conversion_rules_d["type"] == "destination"
              # rules_url_hash["id"+conversion_rules_d["company_id"].to_s] =  conversion_rules_d
              
              rules_url_array << conversion_rules_d
          
          elsif conversion_rules_d["type"] == "duration"
              # rules_time_hash["id"+conversion_rules_d["company_id"].to_s] =  conversion_rules_d
              
              rules_time_array << conversion_rules_d
          
          elsif conversion_rules_d["type"] == "event"
              # rules_event_hash["id"+conversion_rules_d["company_id"].to_s] =  conversion_rules_d
              
              rules_event_array << conversion_rules_d
              
          elsif conversion_rules_d["type"] == "page"
              # rules_page_hash["id"+conversion_rules_d["company_id"].to_s] =  conversion_rules_d
               
              rules_page_count_array << conversion_rules_d
          end
      end
      
      # check_time_status: 0,
      # check_event_status: 0,
      # check_page_count_status: 0,
      # check_page_url_status: 0
        
      
      
      
      
      
      
      # search event above, this is the confirmation page tracking code
      if @event.count.to_i > 0
          done_check_event_array = []
          done_check_click_array = []
          
          event_with_click_array = []
          event_with_click_hash = {}
          event_with_click_cookie_id_array = []
          
          
          event_with_no_click_array = []
          
          @event.no_cursor_timeout.each do |event_d|
              done_check_event_array << event_d["_id"]
              
              if event_d["cookie_id"].to_s != ""
                
                  # done_check_click_array << event_d["cookie_id"].to_s
                
                  event_with_click_array << event_d
                  event_with_click_hash[event_d["cookie_id"].to_s] = event_d
                  event_with_click_cookie_id_array << event_d["cookie_id"].to_s
              else
                  # insert no click event here to array
                  event_with_no_click_array << event_d
              end
              
          end
          
          
          
      
          if event_with_click_array.count.to_i > 0
                    
              click_hash = {}      
                    
              # get clicks for those latest event
              @click = @db2[:clicks].find( { "$and" => [{:cookie_id => { "$in" => event_with_click_cookie_id_array} }] } ).sort({ date: -1 })
              @db2.close()
              
              data_arr = []
              
              
              if @click.count.to_i > 0
              
                  @click.no_cursor_timeout.each do |click_d|
                    
                      time_count_to_remove_old_record = (@now.to_datetime - click_d["date"].to_datetime )*24*60*60
                      network_limit_time = all_cookie_lenght_hash["id"+click_d["network_id"].to_s]*24*60*60
                    
                      if time_count_to_remove_old_record.to_i < network_limit_time.to_i
                          click_hash[click_d['cookie_id'].to_s] = click_d
                      else
                          done_check_click_array << click_d["_id"]
                      end
                  end
                  
                  
                  event_with_click_array.each do |event_with_click_array_d|
                      
                      data_hash = {}
                      insert_hash = {}
                    
                       
                      insert_hash[:user_id] = event_with_click_array_d['user_id'].to_s
                      insert_hash[:cookie_id] = event_with_click_array_d['cookie_id'].to_s
                      insert_hash[:tag_version] = event_with_click_array_d['tag_version']
                      insert_hash[:type] = "confirmation"
                      insert_hash[:company_id] = event_with_click_array_d['company_id'].to_i
                      
                      if !click_hash[event_with_click_array_d['cookie_id'].to_s].nil?
                      
                          insert_hash[:network_id] = click_hash[event_with_click_array_d['cookie_id'].to_s]['network_id'].to_i
                          insert_hash[:network_type] = click_hash[event_with_click_array_d['cookie_id'].to_s]['network_type'].to_s
                          insert_hash[:campaign_id] = click_hash[event_with_click_array_d['cookie_id'].to_s]['campaign_id'].to_i
                          insert_hash[:adgroup_id] = click_hash[event_with_click_array_d['cookie_id'].to_s]['adgroup_id'].to_i
                          insert_hash[:ad_id] = click_hash[event_with_click_array_d['cookie_id'].to_s]['ad_id'].to_i
                          insert_hash[:keyword_id] = click_hash[event_with_click_array_d['cookie_id'].to_s]['ad_id'].to_i
                          insert_hash[:click_date] = click_hash[event_with_click_array_d['cookie_id'].to_s]['date'].to_s
                          
                      else
                          
                          insert_hash[:network_id] = 0
                          insert_hash[:network_type] = ""
                          insert_hash[:campaign_id] = 0
                          insert_hash[:adgroup_id] = 0
                          insert_hash[:ad_id] = 0
                          insert_hash[:keyword_id] = 0
                          insert_hash[:click_date] = ""
                        
                      end
                      
                      insert_hash[:country] = event_with_click_array_d['country']
                      insert_hash[:city] = event_with_click_array_d['city']
                      insert_hash[:variant] = event_with_click_array_d['variant']
                      
                      insert_hash[:revenue] = event_with_click_array_d['revenue'].to_f
                      insert_hash[:order_id] = event_with_click_array_d['order_id'].to_f
                      
                      insert_hash[:promotecode] = event_with_click_array_d['promotecode'].to_s
                      insert_hash[:confirmation_category] = event_with_click_array_d['confirmation_category'].to_s
                      insert_hash[:price] = event_with_click_array_d['price'].to_f
                      insert_hash[:confirmation_name] = event_with_click_array_d['confirmation_name'].to_s
                      insert_hash[:sku] = event_with_click_array_d['sku'].to_s
                      insert_hash[:quantity] = event_with_click_array_d['quantity'].to_s
                      
                      insert_hash[:other_param] = event_with_click_array_d['other_param']
                      insert_hash[:event_date] = event_with_click_array_d['date'].to_s
                      insert_hash[:conversion_date] = @now.to_s
                      insert_hash[:goal_id] = ""
                      insert_hash[:update_revenue_status] = 1
                          
                      data_hash[:insert_one] = insert_hash
                      data_arr << data_hash
                    
                      if data_arr.count.to_i > 1000
                          @db2[:conversion].bulk_write(data_arr)
                          @db2.close()
                          
                          data_arr = []
                      end
                      
                  end
                  
                  
                  if data_arr.count.to_i > 0
                      @db2[:conversion].bulk_write(data_arr)
                      @db2.close()
                      
                      data_arr = []
                  end
                  
              end
          end
          
          
          
          
          if event_with_no_click_array.count.to_i > 0
            
              data_arr = []
            
              event_with_no_click_array.each do |event_with_no_click_array_d|
          
                  data_hash = {}
                  insert_hash = {}
                
                  insert_hash[:user_id] = event_with_no_click_array_d['user_id'].to_s
                  insert_hash[:cookie_id] = event_with_no_click_array_d['cookie_id'].to_s
                  insert_hash[:tag_version] = event_with_no_click_array_d['tag_version']
                  insert_hash[:type] = "confirmation"
                  insert_hash[:company_id] = event_with_no_click_array_d['company_id'].to_i
                  insert_hash[:network_id] = 0
                  insert_hash[:network_type] = ""
                  insert_hash[:country] = event_with_no_click_array_d['country']
                  insert_hash[:city] = event_with_no_click_array_d['city']
                  insert_hash[:variant] = event_with_no_click_array_d['variant']
                  insert_hash[:campaign_id] = 0
                  insert_hash[:adgroup_id] = 0
                  insert_hash[:ad_id] = 0
                  insert_hash[:keyword_id] = 0 
                  insert_hash[:revenue] = event_with_no_click_array_d['revenue'].to_f
                  insert_hash[:order_id] = event_with_no_click_array_d['order_id'].to_f
                  
                  insert_hash[:promotecode] = event_with_no_click_array_d['promotecode'].to_s
                  insert_hash[:confirmation_category] = event_with_no_click_array_d['confirmation_category'].to_s
                  insert_hash[:price] = event_with_no_click_array_d['price'].to_f
                  insert_hash[:confirmation_name] = event_with_no_click_array_d['confirmation_name'].to_s
                  insert_hash[:sku] = event_with_no_click_array_d['sku'].to_s
                  insert_hash[:other_param] = event_with_no_click_array_d['other_param']
                  
                  insert_hash[:click_date] = ""
                  insert_hash[:event_date] = event_with_no_click_array_d['date'].to_s
                  insert_hash[:conversion_date] = @now.to_s
                  insert_hash[:goal_id] = ""
                  insert_hash[:update_revenue_status] = 1
                      
                  data_hash[:insert_one] = insert_hash
                  
                  
                  # data = {:message => event_with_no_click_array_d, :insert_hash => insert_hash, :data_hash => data_hash, :status => "false"}
                  # return render :json => data, :status => :ok    
                  
                  
                  data_arr << data_hash
                
                  if data_arr.count.to_i > 1000
                      @db2[:conversion].bulk_write(data_arr)
                      @db2.close()
                      
                      data_arr = []
                  end
              end
              
              if data_arr.count.to_i > 0
                  @db2[:conversion].bulk_write(data_arr)
                  @db2.close()
                  
                  data_arr = []
              end
          end
          
          if done_check_event_array.count.to_i > 0
              @db2[:events].find('_id' => { "$in" => done_check_event_array}).update_many('$set'=> { 'check_confirmation_status' => 1 })
              @db2.close()
          end
          
          if done_check_click_array.count.to_i > 0
              @db2[:clicks].find('_id' => { "$in" => done_check_click_array}).update_many('$set'=> { 'check_confirmation_status' => 1 })
              @db2.close()
          end
          
      end
      
      
      
      
      # check time duration for every page
      if rules_time_array.count.to_i > 0
          
          data_arr = []
          
          rules_time_hash = {}
          
          rules_time_event_all_company_id_array = []
          
          rules_time_event_done_id_array = []
          rules_time_click_done_id_array = []
          
          rules_time_array.each do |rules_time_array_d|
              rules_time_event_all_company_id_array << rules_time_array_d["company_id"].to_i
              
              rules_time_hash["companyid_"+rules_time_array_d["company_id"].to_s] = rules_time_array_d
          end
          
          @event = @db2[:events].find( { "$and" => [{:leave => { '$ne' => nil} },{:company_id => { "$in" => rules_time_event_all_company_id_array} }, {:date => { '$lte' => date.to_s}}, {:check_time_status => 0 }] } ).sort({ date: 1 }).limit(1000)
          @db2.close()
          
          rules_time_event_hash = {}
          rules_time_done_event_click_hash = {}
          
          
          rules_time_event_with_click_array = []
          rules_time_event_with_click_id_array = []
          
          rules_time_event_with_no_click_array = []
          
          if @event.count.to_i > 0
              @event.each do |event_d|
                
                  if rules_time_event_hash[event_d["user_id"].to_s].nil?
                      rules_time_event_hash[event_d["user_id"].to_s] = []
                  end
                  
                  rules_time_event_hash[event_d["user_id"].to_s] << event_d
                 
              end
              
              if rules_time_event_hash.count.to_i > 0
                  rules_time_event_hash.each do |rules_time_event_hash_key, rules_time_event_hash_value|
                  
                      if rules_time_event_hash_value.count.to_i > 1
                        
                          rules_time_event_hash_value.each_with_index do |rules_time_event_hash_value_d, index|
                            
                              # all reecord id insert to done array first
                              rules_time_event_done_id_array << rules_time_event_hash_value_d["_id"]  
                            
                              if rules_time_event_hash_value_d["leave"] == ""
                                
                                  next_index = index + 1
                                
                                  if !rules_time_event_hash_value[next_index].nil? && (rules_time_event_hash_value_d["current_page"].to_s == rules_time_event_hash_value[next_index]["leave"].to_s)
                                    
                                      rules_hour = rules_time_hash["companyid_"+rules_time_event_hash_value_d["company_id"].to_s]["hour"]
                                      rules_minute = rules_time_hash["companyid_"+rules_time_event_hash_value_d["company_id"].to_s]["minute"]
                                      rules_second = rules_time_hash["companyid_"+rules_time_event_hash_value_d["company_id"].to_s]["second"]
                                      count_rules_second = (rules_hour*60*60)+(rules_minute*60)+rules_second
                                      
                                      # joe test sad
                                      # count_rules_second = 1  
                                      
                                      
                                      # # this one is to see which record is too old, if older than the use inpput, then dont do it
                                      time_count_to_remove_old_record = (rules_time_event_hash_value[next_index]["date"].to_datetime - rules_time_event_hash_value_d["date"].to_datetime )*24*60*60
                              
                              
                                      # count time rules
                                      if time_count_to_remove_old_record.to_i > count_rules_second.to_i
                                          
                                          if rules_time_event_hash_value_d["cookie_id"].to_s == ""
                                              # if no click
                                              
                                              data_hash = {}
                                              insert_hash = {}
                                            
                                              insert_hash[:user_id] = rules_time_event_hash_value_d['user_id'].to_s
                                              insert_hash[:cookie_id] = ""
                                              insert_hash[:tag_version] = rules_time_event_hash_value_d["tag_version"].to_s
                                              insert_hash[:type] = "duration"
                                              
                                              insert_hash[:company_id] = rules_time_event_hash_value_d["company_id"].to_s
                                              insert_hash[:network_id] = 0
                                              insert_hash[:network_type] = ""
                                              insert_hash[:country] = rules_time_event_hash_value_d['country']
                                              insert_hash[:city] = rules_time_event_hash_value_d['city']
                                              insert_hash[:variant] = rules_time_event_hash_value_d['variant']
                                              insert_hash[:campaign_id] = 0
                                              insert_hash[:adgroup_id] = 0
                                              insert_hash[:ad_id] = 0
                                              insert_hash[:keyword_id] = 0
                                              insert_hash[:revenue] = rules_time_hash["companyid_"+rules_time_event_hash_value_d["company_id"].to_s]["price"].to_f
                                              insert_hash[:order_id] = 0
                                              insert_hash[:click_date] = ""
                                              insert_hash[:event_date] = rules_time_event_hash_value_d['date'].to_s
                                              insert_hash[:conversion_date] = @now.to_s
                                              insert_hash[:goal_id] = rules_time_hash["companyid_"+rules_time_event_hash_value_d["company_id"].to_s]["goal_id"].to_s
                                              insert_hash[:update_revenue_status] = 1
                                                  
                                              data_hash[:insert_one] = insert_hash
                                              data_arr << data_hash
                                            
                                              if data_arr.count.to_i > 500
                                                  @db2[:conversion].bulk_write(data_arr)
                                                  @db2.close()
                                                  
                                                  data_arr = []
                                              end
                                              
                                              # test
                                              rules_time_event_with_no_click_array << rules_time_event_hash_value_d
                                            
                                          else
                                              # if from click
                                              rules_time_event_with_click_array << rules_time_event_hash_value_d
                                              rules_time_event_with_click_id_array << rules_time_event_hash_value_d["cookie_id"]
                                          end
                                          
                                      end
                                  
                                  else
                                      
                                      if rules_time_event_hash_value[next_index].nil? 
                                          rules_time_event_done_id_array.pop  
                                      end
                                       
                                  end
                              end
                          end
                          
                          
                          
                          
                      else
                          tmp_event = rules_time_event_hash_value[0]
                          
                          # if user only have 1 record and pending for 1 day then remove, no ppl will stay in one page for 1 day
                          time_count_to_remove_old_record = (@now.to_datetime - tmp_event["date"].to_datetime )*24*60*60
                          if time_count_to_remove_old_record > 86400
                              rules_time_event_done_id_array << tmp_event["_id"]
                          end
                      end
                      
                  end
                  
                  if data_arr.count.to_i > 0
                      @db2[:conversion].bulk_write(data_arr)
                      @db2.close()
                      
                      data_arr = []
                  end
              end
              
              # data = {:rules_time_event_with_click_array => rules_time_event_with_click_array, :rules_time_event_with_no_click_array => rules_time_event_with_no_click_array, :status => "true"}
              # return render :json => data, :status => :ok
              
              
              
              # this part is check if the click expired, user set the expired day in adeqo
              if rules_time_event_with_click_id_array.count.to_i > 0
                  # get clicks for those latest event
                  @click = @db2[:clicks].find( { "$and" => [{:cookie_id => { "$in" => rules_time_event_with_click_id_array} }, {:check_time_status => 0 }] } ).sort({ date: -1 })
                  @db2.close()
                  
                  if @click.count.to_i > 0
                      @click.no_cursor_timeout.each do |click_d|
                          
                          time_count_to_remove_old_record = (@now.to_datetime - click_d["date"].to_datetime )*24*60*60
                          network_limit_time = all_cookie_lenght_hash["id"+click_d["network_id"].to_s]*24*60*60
                          
                          if time_count_to_remove_old_record.to_i < network_limit_time.to_i
                              rules_time_done_event_click_hash[click_d["cookie_id"].to_s] = click_d
                          else
                              rules_time_click_done_id_array << click_d["_id"]
                          end
                          
                      end
                  end
              end
              
              
              if rules_time_event_with_click_array.count.to_i > 0
                  
                  rules_time_event_with_click_array.each do |rules_time_event_with_click_array_d|
                      data_hash = {}
                      insert_hash = {}
                    
                      insert_hash[:user_id] = rules_time_event_with_click_array_d['user_id'].to_s
                      insert_hash[:cookie_id] = rules_time_event_with_click_array_d['cookie_id'].to_s
                      insert_hash[:tag_version] = rules_time_event_with_click_array_d['tag_version']
                      insert_hash[:type] = "duration"
                      insert_hash[:company_id] = rules_time_event_with_click_array_d['company_id'].to_i
                      
                      if !rules_time_done_event_click_hash[rules_time_event_with_click_array_d["cookie_id"].to_s].nil?
                          insert_hash[:network_id] = rules_time_done_event_click_hash[rules_time_event_with_click_array_d["cookie_id"].to_s]['network_id'].to_i
                          insert_hash[:network_type] = rules_time_done_event_click_hash[rules_time_event_with_click_array_d["cookie_id"].to_s]['network_type'].to_s
                          
                          insert_hash[:campaign_id] = rules_time_done_event_click_hash[rules_time_event_with_click_array_d["cookie_id"].to_s]['campaign_id'].to_i
                          insert_hash[:adgroup_id] = rules_time_done_event_click_hash[rules_time_event_with_click_array_d["cookie_id"].to_s]['adgroup_id'].to_i
                          insert_hash[:ad_id] = rules_time_done_event_click_hash[rules_time_event_with_click_array_d["cookie_id"].to_s]['ad_id'].to_i
                          insert_hash[:keyword_id] = rules_time_done_event_click_hash[rules_time_event_with_click_array_d["cookie_id"].to_s]['keyword_id'].to_i
                          insert_hash[:click_date] = rules_time_done_event_click_hash[rules_time_event_with_click_array_d["cookie_id"].to_s]['date'].to_s
                      else
                          insert_hash[:network_id] = 0
                          insert_hash[:network_type] = ""
                          
                          insert_hash[:campaign_id] = 0
                          insert_hash[:adgroup_id] = 0
                          insert_hash[:ad_id] = 0
                          insert_hash[:keyword_id] = 0
                          insert_hash[:click_date] = ""
                      end
                      
                      insert_hash[:country] = rules_time_event_with_click_array_d['country']
                      insert_hash[:city] = rules_time_event_with_click_array_d['city']
                      insert_hash[:variant] = rules_time_event_with_click_array_d['variant']
                      
                      
                      
                      insert_hash[:order_id] = 0
                      
                      insert_hash[:event_date] = rules_time_event_with_click_array_d['date'].to_s
                      insert_hash[:conversion_date] = @now.to_s
                      insert_hash[:revenue] = rules_time_hash["companyid_"+rules_time_event_with_click_array_d["company_id"].to_s]["price"].to_f
                      insert_hash[:goal_id] = rules_time_hash["companyid_"+rules_time_event_with_click_array_d["company_id"].to_s]["goal_id"].to_s
                      insert_hash[:update_revenue_status] = 1
                      
                          
                      data_hash[:insert_one] = insert_hash
                      data_arr << data_hash

                    
                      if data_arr.count.to_i > 1000
                          @db2[:conversion].bulk_write(data_arr)
                          @db2.close()
                          
                          data_arr = []
                      end
                  end
              
                  if data_arr.count.to_i > 0
                      @db2[:conversion].bulk_write(data_arr)
                      @db2.close()
                      
                      data_arr = []
                  end
                  
              end
              
              
              
              
              
              if rules_time_click_done_id_array.count.to_i > 0
                  @db2[:clicks].find('_id' => { "$in" => rules_time_click_done_id_array}).update_many('$set'=> { 'check_time_status' => 1 })
                  @db2.close()
              end
              
              if rules_time_event_done_id_array.count.to_i > 0
                  @db2[:events].find('_id' => { "$in" => rules_time_event_done_id_array}).update_many('$set'=> { 'check_time_status' => 1 })
                  @db2.close()
              end
              
          end
      end
      
      
      
      # page count start here
      if rules_page_count_array.count.to_i > 0
        
          data_arr = []
        
          done_event_id_array = []
          done_click_id_array = []
          
          rules_page_count_event_with_click_array = []
          rules_page_count_event_with_click_id_array = []
          
          rules_page_count_done_event_click_hash = {}
          
          # this one is for test only
          rules_page_count_event_with_no_click_array = []
        
          rules_page_count_hash = {}
          rules_page_count_event_all_company_id_array = []
          
          rules_page_count_array.each do |rules_page_count_array_d|
              rules_page_count_event_all_company_id_array << rules_page_count_array_d["company_id"].to_i
              rules_page_count_hash["companyid_"+rules_page_count_array_d["company_id"].to_s] = rules_page_count_array_d
          end
          
          
          @event = @db2[:events].find( { "$and" => [{:leave => { '$eq' => ""} },{:company_id => { "$in" => rules_page_count_event_all_company_id_array} }, {:date => { '$lte' => date.to_s}}, {:check_page_count_status => 0 }] } ).sort({ date: 1 }).limit(1000)
          @db2.close()
          
          
          
          
          
          rules_page_count_event_hash = {}
          
          
          if @event.count.to_i > 0
              @event.no_cursor_timeout.each do |event_d|
                  
                  if rules_page_count_event_hash[event_d["user_id"].to_s].nil?
                      rules_page_count_event_hash[event_d["user_id"].to_s] = []
                  end
                  
                  # first set event hash base on user 
                  rules_page_count_event_hash[event_d["user_id"].to_s] << event_d
              end
              
              
              
              # loop the user event hash
              if rules_page_count_event_hash.count.to_i > 0
                  rules_page_count_event_hash.each do |rules_page_count_event_hash_key, rules_page_count_event_hash_value|
                    
                      new_rules_page_count_array = []
                      
                    
                      # if user event hash has value, get the company value and the rule value base on company id 
                      if rules_page_count_event_hash_value.count.to_i > 0
                        
                          first_tmp_page_count_event = rules_page_count_event_hash_value[0]
                          
                          
                          tmp_page_set_count = rules_page_count_hash["companyid_"+first_tmp_page_count_event["company_id"].to_s]["count"].to_i
                          
                          tmp_page_set_hour = rules_page_count_hash["companyid_"+first_tmp_page_count_event["company_id"].to_s]["session_hour"].to_i
                          tmp_page_set_minute = rules_page_count_hash["companyid_"+first_tmp_page_count_event["company_id"].to_s]["session_minute"].to_i
                          tmp_page_limit_time = (tmp_page_set_hour.to_i*60+tmp_page_set_minute.to_i)*60
                          
              
                          # if user hash has more data then the set rule value, then start working 
                          if rules_page_count_event_hash_value.count.to_i >= tmp_page_set_count
                            
                              # loop every event in user event hash and compare each of them
                              rules_page_count_event_hash_value.each_with_index do |rules_page_count_event_hash_value_d, index|
                                  
                                  # the first page user visit, must count
                                  if index == 0
                                      new_rules_page_count_array << rules_page_count_event_hash_value_d
                                      done_event_id_array << rules_page_count_event_hash_value_d["_id"]
                                      
                                  else
                                    
                                      # start from the second page, check if it has previous page, if yes, count the difference time between to see if it reach the time rule  
                                      pre_index = index.to_i - 1
                                      pre_event = rules_page_count_event_hash_value[pre_index]
                                       
                                      session_count_time = (rules_page_count_event_hash_value_d["date"].to_datetime - pre_event["date"].to_datetime)*24*60*60
                                      
                                       
                                      # if the time rule didnt expire the page, then put in a new array, we do one time session at one time.
                                      if session_count_time.to_i <= tmp_page_limit_time.to_i
                                          new_rules_page_count_array << rules_page_count_event_hash_value_d
                                          
                                          done_event_id_array << rules_page_count_event_hash_value_d["_id"]
                                      end
                                  
                                  end
                                  
                                  
                              end
                          
                          
                          else
                            
                            
                              rules_page_count_event_hash_value.each_with_index do |rules_page_count_event_hash_value_d, index|
                                
                                  session_count_time = (@now.to_datetime - rules_page_count_event_hash_value_d["date"].to_datetime)*24*60*60
                                  
                                  if session_count_time.to_i > tmp_page_limit_time.to_i
                                      done_event_id_array << rules_page_count_event_hash_value_d["_id"]
                                  end
                                  
                              end
                                  
                          end
                          
                          # now we check is the new event has enough event to count
                          if new_rules_page_count_array.count.to_i > tmp_page_set_count
                            
                              insert_times = new_rules_page_count_array.count.to_i/tmp_page_set_count.to_i
                              
                              if first_tmp_page_count_event["cookie_id"].to_s == ""
                                  insert_times.times do |x|
                                    
                                      data_hash = {}
                                      insert_hash = {}
                                       
                                      insert_hash[:user_id] = first_tmp_page_count_event['user_id'].to_s
                                      insert_hash[:cookie_id] = ""
                                      insert_hash[:tag_version] = first_tmp_page_count_event["tag_version"].to_s
                                      insert_hash[:type] = "page"
                                      
                                      insert_hash[:company_id] = first_tmp_page_count_event["company_id"].to_s
                                      insert_hash[:network_id] = 0
                                      insert_hash[:network_type] = ""
                                      insert_hash[:country] = first_tmp_page_count_event['country']
                                      insert_hash[:city] = first_tmp_page_count_event['city']
                                      insert_hash[:variant] = first_tmp_page_count_event['variant']
                                      insert_hash[:campaign_id] = 0
                                      insert_hash[:adgroup_id] = 0
                                      insert_hash[:ad_id] = 0
                                      insert_hash[:keyword_id] = 0
                                      insert_hash[:revenue] = rules_page_count_hash["companyid_"+first_tmp_page_count_event["company_id"].to_s]["price"].to_f
                                      insert_hash[:order_id] = 0
                                      insert_hash[:click_date] = ""
                                      insert_hash[:event_date] = first_tmp_page_count_event['date'].to_s
                                      insert_hash[:conversion_date] = @now.to_s
                                      insert_hash[:goal_id] = rules_page_count_hash["companyid_"+first_tmp_page_count_event["company_id"].to_s]["goal_id"].to_s
                                      insert_hash[:update_revenue_status] = 1
                                     
                                      data_hash[:insert_one] = insert_hash
                                      data_arr << data_hash
                                      
                                      if data_arr.count.to_i > 500
                                          @db2[:conversion].bulk_write(data_arr)
                                          @db2.close()
                                          
                                          data_arr = []
                                      end
                                     
                                      # rules_page_count_event_with_no_click_array << first_tmp_page_count_event
                                  end
                                  
                              else
                                  insert_times.times do |x|
                                      rules_page_count_event_with_click_array << first_tmp_page_count_event
                                      rules_page_count_event_with_click_id_array << first_tmp_page_count_event["cookie_id"]
                                  end
                              end
                            
                          end
                      end 
                  end
                  
                  
                  
                  
                  if rules_page_count_event_with_click_id_array.count.to_i > 0
                    
                      @click = @db2[:clicks].find( { "$and" => [{:cookie_id => { "$in" => rules_page_count_event_with_click_id_array} }, {:check_page_count_status => 0 }] } ).sort({ date: -1 })
                      @db2.close()
                      
                      
                      
                      if @click.count.to_i > 0
                          @click.no_cursor_timeout.each do |click_d|
                              
                              time_count_to_remove_old_record = (@now.to_datetime - click_d["date"].to_datetime )*24*60*60
                              network_limit_time = all_cookie_lenght_hash["id"+click_d["network_id"].to_s]*24*60*60
                              
                              if time_count_to_remove_old_record.to_i < network_limit_time.to_i
                                  rules_page_count_done_event_click_hash[click_d["cookie_id"].to_s] = click_d
                              else
                                  done_click_id_array << click_d["_id"]
                              end
                          end
                      end
                      
                      if rules_page_count_event_with_click_array.count.to_i > 0
                        
                          rules_page_count_event_with_click_array.each do |rules_page_count_event_with_click_array_d|
                          
                              data_hash = {}
                              insert_hash = {}
                            
                              insert_hash[:user_id] = rules_page_count_event_with_click_array_d['user_id'].to_s
                              insert_hash[:cookie_id] = rules_page_count_event_with_click_array_d['cookie_id'].to_s
                              insert_hash[:tag_version] = rules_page_count_event_with_click_array_d['tag_version']
                              insert_hash[:type] = "page"
                              insert_hash[:company_id] = rules_page_count_event_with_click_array_d['company_id'].to_i
                              
                              if !rules_page_count_done_event_click_hash[rules_page_count_event_with_click_array_d["cookie_id"].to_s].nil?
                                
                                  insert_hash[:network_id] = rules_page_count_done_event_click_hash[rules_page_count_event_with_click_array_d["cookie_id"].to_s]['network_id'].to_i
                                  insert_hash[:network_type] = rules_page_count_done_event_click_hash[rules_page_count_event_with_click_array_d["cookie_id"].to_s]['network_type'].to_s
                                  
                                  insert_hash[:campaign_id] = rules_page_count_done_event_click_hash[rules_page_count_event_with_click_array_d["cookie_id"].to_s]['campaign_id'].to_i
                                  insert_hash[:adgroup_id] = rules_page_count_done_event_click_hash[rules_page_count_event_with_click_array_d["cookie_id"].to_s]['adgroup_id'].to_i
                                  insert_hash[:ad_id] = rules_page_count_done_event_click_hash[rules_page_count_event_with_click_array_d["cookie_id"].to_s]['ad_id'].to_i
                                  insert_hash[:keyword_id] = rules_page_count_done_event_click_hash[rules_page_count_event_with_click_array_d["cookie_id"].to_s]['keyword_id'].to_i
                                  insert_hash[:click_date] = rules_page_count_done_event_click_hash[rules_page_count_event_with_click_array_d["cookie_id"].to_s]['date'].to_s
                                
                              else
                                  insert_hash[:network_id] = 0
                                  insert_hash[:network_type] = ""
                                  
                                  insert_hash[:campaign_id] = 0
                                  insert_hash[:adgroup_id] = 0
                                  insert_hash[:ad_id] = 0
                                  insert_hash[:keyword_id] = 0
                                  insert_hash[:click_date] = ""
                              end
                              
                              
                              insert_hash[:country] = rules_page_count_event_with_click_array_d['country']
                              insert_hash[:city] = rules_page_count_event_with_click_array_d['city']
                              insert_hash[:variant] = rules_page_count_event_with_click_array_d['variant']
                              
                              
                              
                              insert_hash[:order_id] = 0
                              
                              insert_hash[:event_date] = rules_page_count_event_with_click_array_d['date'].to_s
                              insert_hash[:conversion_date] = @now.to_s
                              insert_hash[:revenue] = rules_page_count_hash["companyid_"+rules_page_count_event_with_click_array_d["company_id"].to_s]["price"].to_f
                              insert_hash[:goal_id] = rules_page_count_hash["companyid_"+rules_page_count_event_with_click_array_d["company_id"].to_s]["goal_id"].to_s
                              insert_hash[:update_revenue_status] = 1
                              
                                  
                              data_hash[:insert_one] = insert_hash
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 1000
                                  @db2[:conversion].bulk_write(data_arr)
                                  @db2.close()
                                  
                                  data_arr = []
                              end
                          
                          end
                        
                      end
                  end
                  
                  
                  if data_arr.count.to_i > 0
                      @db2[:conversion].bulk_write(data_arr)
                      @db2.close()
                  end
                  
              end
              
              
              
              if done_click_id_array.count.to_i > 0
                  @db2[:clicks].find('_id' => { "$in" => done_click_id_array}).update_many('$set'=> { 'check_page_count_status' => 1 })
                  @db2.close()
              end
              
              if done_event_id_array.count.to_i > 0
                  @db2[:events].find('_id' => { "$in" => done_event_id_array}).update_many('$set'=> { 'check_page_count_status' => 1 })
                  @db2.close()
              end
              
          end
      end
      
                
      
      # if rules_event_array.count.to_i > 0
#         
          # rules_event_array.each do |rules_event_array_d|
              # @event = @db2[:events].find( { "$and" => [{:company_id => rules_event_array_d["company_id"].to_i }, {:date => { '$lte' => date.to_s}}, {:check_event_status => 0 }] } ).sort({ date: 1 })
              # @db2.close()
#               
#               
#               
              # event_with_click_cookie_id_array = []
              # event_with_click_array = []
              # event_with_no_click_array = []
#               
              # rules_event_category = rules_event_array_d["category"].to_s
              # rules_event_action = rules_event_array_d["action"].to_s
              # rules_event_label = rules_event_array_d["label"].to_s
              # rules_event_value = rules_event_array_d["value"].to_s
#               
              # done_check_event_array = []
              # # done_check_click_array = []
#               
              # click_hash = {}
#               
#       
              # if @event.count.to_i > 0
                  # @event.no_cursor_timeout.each do |event_d|
#                       
                      # done_check_event_array << event_d["_id"]
#                       
                      # if event_d["cookie_id"].nil? || event_d["cookie_id"].to_s == ""
                          # event_with_no_click_array << event_d
                      # else
#                           
                          # event_with_click_cookie_id_array << event_d["cookie_id"]
                          # event_with_click_array << event_d
                      # end
#                       
                  # end
#                   
                  # if event_with_click_array.count.to_i > 0
#                     
                      # @click = @db2[:clicks].find( { "$and" => [{:cookie_id => { "$in" => event_with_click_cookie_id_array} }, {:check_event_status => 0 }] } ).sort({ date: -1 })
                      # @db2.close()
#                       
#                       
                      # if @click.count.to_i > 0
#                         
                          # data_arr = []
                          # @click.no_cursor_timeout.each do |click_d|
                              # click_hash[click_d["cookie_id"]] = click_d
                          # end
#                           
                          # if rules_event_array_d['use_event_price'].to_i == 1
#                               
                              # event_with_click_array.each do |event_with_click_array_d|
#                               
                                  # data_hash = {}
                                  # insert_hash = {}
#                                 
                                  # insert_hash[:user_id] = event_with_click_array_d['user_id'].to_s
                                  # insert_hash[:cookie_id] = event_with_click_array_d['cookie_id'].to_s
                                  # insert_hash[:tag_version] = event_with_click_array_d["tag_version"].to_s
                                  # insert_hash[:type] = "event"
                                  # insert_hash[:company_id] = event_with_click_array_d["company_id"].to_s
                                  # insert_hash[:network_id] = click_hash[event_with_click_array_d["cookie_id"]]["network_id"]
                                  # insert_hash[:network_type] = click_hash[event_with_click_array_d["cookie_id"]]["network_type"]
                                  # insert_hash[:country] = event_with_click_array_d['country']
                                  # insert_hash[:city] = event_with_click_array_d['city']
                                  # insert_hash[:variant] = event_with_click_array_d['variant']
                                  # insert_hash[:campaign_id] = click_hash[event_with_click_array_d["cookie_id"]]["campaign_id"]
                                  # insert_hash[:adgroup_id] = click_hash[event_with_click_array_d["cookie_id"]]["adgroup_id"]
                                  # insert_hash[:ad_id] = click_hash[event_with_click_array_d["cookie_id"]]["ad_id"]
                                  # insert_hash[:keyword_id] = click_hash[event_with_click_array_d["cookie_id"]]["keyword_id"]
                                  # insert_hash[:track_event_category] = event_with_click_array_d['category']
                                  # insert_hash[:track_event_action] = event_with_click_array_d['action']
                                  # insert_hash[:track_event_label] = event_with_click_array_d['label']
                                  # insert_hash[:track_event_value] = event_with_click_array_d['value'].to_f
                                  # insert_hash[:revenue] = event_with_click_array_d['value'].to_f
                                  # insert_hash[:order_id] = 0
                                  # insert_hash[:event_date] = event_with_click_array_d['date'].to_s
                                  # insert_hash[:click_date] = click_hash[event_with_click_array_d["cookie_id"]]["date"]
                                  # insert_hash[:conversion_date] = @now.to_s
                                  # insert_hash[:goal_id] = rules_event_array_d["goal_id"].to_s
                                  # insert_hash[:update_revenue_status] = 1
#                                   
                                  # data_hash[:insert_one] = insert_hash
                                  # data_arr << data_hash
#                                   
                                  # if data_arr.count.to_i > 1000
                                      # @db2[:conversion].bulk_write(data_arr)
                                      # @db2.close()
#                                       
                                      # data_arr = []
                                  # end
                              # end
#                               
                          # else
#                               
                              # event_with_click_array.each do |event_with_click_array_d|
#                               
                                  # data_hash = {}
                                  # insert_hash = {}
#                                 
                                  # insert_hash[:user_id] = event_with_click_array_d['user_id'].to_s
                                  # insert_hash[:cookie_id] = event_with_click_array_d['cookie_id'].to_s
                                  # insert_hash[:tag_version] = event_with_click_array_d["tag_version"].to_s
                                  # insert_hash[:type] = "event"
                                  # insert_hash[:company_id] = event_with_click_array_d["company_id"].to_s
                                  # insert_hash[:network_id] = click_hash[event_with_click_array_d["cookie_id"]]["network_id"]
                                  # insert_hash[:network_type] = click_hash[event_with_click_array_d["cookie_id"]]["network_type"]
                                  # insert_hash[:country] = event_with_click_array_d['country']
                                  # insert_hash[:city] = event_with_click_array_d['city']
                                  # insert_hash[:variant] = event_with_click_array_d['variant']
                                  # insert_hash[:campaign_id] = click_hash[event_with_click_array_d["cookie_id"]]["campaign_id"]
                                  # insert_hash[:adgroup_id] = click_hash[event_with_click_array_d["cookie_id"]]["adgroup_id"]
                                  # insert_hash[:ad_id] = click_hash[event_with_click_array_d["cookie_id"]]["ad_id"]
                                  # insert_hash[:keyword_id] = click_hash[event_with_click_array_d["cookie_id"]]["keyword_id"]
                                  # insert_hash[:track_event_category] = event_with_click_array_d['category']
                                  # insert_hash[:track_event_action] = event_with_click_array_d['action']
                                  # insert_hash[:track_event_label] = event_with_click_array_d['label']
                                  # insert_hash[:track_event_value] = event_with_click_array_d['value'].to_f
                                  # insert_hash[:revenue] = rules_event_array_d["price"].to_f
                                  # insert_hash[:order_id] = 0
                                  # insert_hash[:event_date] = event_with_click_array_d['date'].to_s
                                  # insert_hash[:click_date] = click_hash[event_with_click_array_d["cookie_id"]]["date"]
                                  # insert_hash[:conversion_date] = @now.to_s
                                  # insert_hash[:goal_id] = rules_event_array_d["goal_id"].to_s
                                  # insert_hash[:update_revenue_status] = 1
#                                   
                                  # data_hash[:insert_one] = insert_hash
                                  # data_arr << data_hash
#                                   
                                  # if data_arr.count.to_i > 1000
                                      # @db2[:conversion].bulk_write(data_arr)
                                      # @db2.close()
#                                       
                                      # data_arr = []
                                  # end
                              # end
                          # end
#                           
#                           
                          # if data_arr.count.to_i > 0
                              # @db2[:conversion].bulk_write(data_arr)
                              # @db2.close()
#                               
                              # data_arr = []
                          # end
#                           
                      # end
                  # end
#                   
#                   
                  # if event_with_no_click_array.count.to_i > 0
#                     
                      # data_arr = []
#                       
                      # if rules_event_array_d['use_event_price'].to_i == 1
#                         
                          # event_with_no_click_array.each do |event_with_no_click_array_d|
#                           
                              # data_hash = {}
                              # insert_hash = {}
#                             
                              # insert_hash[:user_id] = event_with_no_click_array_d['user_id'].to_s
                              # insert_hash[:cookie_id] = ""
                              # insert_hash[:tag_version] = event_with_no_click_array_d["tag_version"].to_s
                              # insert_hash[:type] = "event"
                              # insert_hash[:company_id] = event_with_no_click_array_d["company_id"].to_s
                              # insert_hash[:network_id] = 0
                              # insert_hash[:network_type] = ""
                              # insert_hash[:country] = event_with_no_click_array_d['country']
                              # insert_hash[:city] = event_with_no_click_array_d['city']
                              # insert_hash[:variant] = event_with_no_click_array_d['variant']
                              # insert_hash[:campaign_id] = 0
                              # insert_hash[:adgroup_id] = 0
                              # insert_hash[:ad_id] = 0
                              # insert_hash[:keyword_id] = 0
                              # insert_hash[:track_event_category] = event_with_no_click_array_d['category']
                              # insert_hash[:track_event_action] = event_with_no_click_array_d['action']
                              # insert_hash[:track_event_label] = event_with_no_click_array_d['label']
                              # insert_hash[:track_event_value] = event_with_no_click_array_d['value'].to_f
                              # insert_hash[:revenue] = event_with_no_click_array_d['value'].to_f
                              # insert_hash[:order_id] = 0
                              # insert_hash[:event_date] = event_with_no_click_array_d['date'].to_s
                              # insert_hash[:click_date] = ""
                              # insert_hash[:conversion_date] = @now.to_s
                              # insert_hash[:goal_id] = rules_event_array_d["goal_id"].to_s
                              # insert_hash[:update_revenue_status] = 1
#                               
                              # data_hash[:insert_one] = insert_hash
                              # data_arr << data_hash
#                               
                              # if data_arr.count.to_i > 1000
                                  # @db2[:conversion].bulk_write(data_arr)
                                  # @db2.close()
#                                   
                                  # data_arr = []
                              # end
                          # end
#                           
                      # else
#                           
                          # event_with_no_click_array.each do |event_with_no_click_array_d|
#                           
                              # data_hash = {}
                              # insert_hash = {}
#                             
                              # insert_hash[:user_id] = event_with_no_click_array_d['user_id'].to_s
                              # insert_hash[:cookie_id] = ""
                              # insert_hash[:tag_version] = event_with_no_click_array_d["tag_version"].to_s
                              # insert_hash[:type] = "event"
                              # insert_hash[:company_id] = event_with_no_click_array_d["company_id"].to_s
                              # insert_hash[:network_id] = 0
                              # insert_hash[:network_type] = ""
                              # insert_hash[:country] = event_with_no_click_array_d['country']
                              # insert_hash[:city] = event_with_no_click_array_d['city']
                              # insert_hash[:variant] = event_with_no_click_array_d['variant']
                              # insert_hash[:campaign_id] = 0
                              # insert_hash[:adgroup_id] = 0
                              # insert_hash[:ad_id] = 0
                              # insert_hash[:keyword_id] = 0
                              # insert_hash[:track_event_category] = event_with_no_click_array_d['category']
                              # insert_hash[:track_event_action] = event_with_no_click_array_d['action']
                              # insert_hash[:track_event_label] = event_with_no_click_array_d['label']
                              # insert_hash[:track_event_value] = event_with_no_click_array_d['value'].to_f
                              # insert_hash[:revenue] = rules_event_array_d["price"].to_f
                              # insert_hash[:order_id] = 0
                              # insert_hash[:event_date] = event_with_no_click_array_d['date'].to_s
                              # insert_hash[:click_date] = ""
                              # insert_hash[:conversion_date] = @now.to_s
                              # insert_hash[:goal_id] = rules_event_array_d["goal_id"].to_s
                              # insert_hash[:update_revenue_status] = 1
#                               
                              # data_hash[:insert_one] = insert_hash
                              # data_arr << data_hash
#                               
                              # if data_arr.count.to_i > 1000
                                  # @db2[:conversion].bulk_write(data_arr)
                                  # @db2.close()
#                                   
                                  # data_arr = []
                              # end
                          # end
                      # end
#                       
#                       
                      # if data_arr.count.to_i > 0
                          # @db2[:conversion].bulk_write(data_arr)
                          # @db2.close()
#                           
                          # data_arr = []
                      # end
                  # end
#                   
                  # if done_check_event_array.count.to_i > 0
                      # @db2[:events].find('_id' => { "$in" => done_check_event_array}).update_many('$set'=> { 'check_event_status' => 1 })
                      # @db2.close()
                  # end
#                   
              # end
#               
          # end
      # end
      
      
      
      if rules_url_array.count.to_i > 0
        
        
          data_arr = []
          
          rules_url_hash = {}
          rules_url_all_company_id_array = []
          
          rules_url_event_with_click_array = []
          rules_url_event_with_click_id_array = []
          
          rules_url_array.each do |rules_url_array_d|
              rules_url_all_company_id_array << rules_url_array_d["company_id"].to_i
              
              # if rules_url_hash["companyid_"+rules_url_array_d["company_id"].to_s+"_"+rules_url_array_d["url"].to_s].nil?
                  # rules_url_hash["companyid_"+rules_url_array_d["company_id"].to_s+"_"+rules_url_array_d["url"].to_s] = []
              # end
              rules_url_hash["companyid_"+rules_url_array_d["company_id"].to_s+"_"+rules_url_array_d["url"].to_s] = rules_url_array_d
          end
          
          
          
          @event = @db2[:events].find( { "$and" => [{:leave => { '$ne' => nil} }, {:company_id => { "$in" => rules_url_all_company_id_array} }, {:date => { '$lte' => date.to_s}}, {:check_url_status => 0 }] } ).sort({ date: 1 }).limit(1000)
          @db2.close()
            
          rules_url_event_hash = {}  
          rules_url_event_click_hash = {}
              
          event_done_id_array = []
          click_done_id_array = []    
              
          if @event.count.to_i > 0
          
              @event.each do |event_d|
                  
                  if rules_url_event_hash["companyid_"+event_d["company_id"].to_s].nil?
                      rules_url_event_hash["companyid_"+event_d["company_id"].to_s] = []
                  end
                  
                  rules_url_event_hash["companyid_"+event_d["company_id"].to_s] << event_d
              end
              
              
              if rules_url_hash.count.to_i > 0
                  # loop all rules first
                  rules_url_hash.each do |rules_url_hash_key, rules_url_hash_value|
                      
                      tmp_remove_index = []
                      
                      rules_url_condition = rules_url_hash_value["url_condition"]
                      rules_url = rules_url_hash_value["url"]
                      
                      tmp_key_arr = rules_url_hash_key.split("_/")
                      
                      match_company_id = tmp_key_arr[0]
                      match_url = "/"+tmp_key_arr[1]
                      
                      if !rules_url_event_hash[match_company_id].nil?
                          rules_url_event_hash[match_company_id].each_with_index do |rules_url_event_hash_d, index|
                              event_done_id_array << rules_url_event_hash_d["_id"]
                              
                              check_url =  rules_url_event_hash_d["current_page"].to_s.gsub(rules_url_event_hash_d["host"].to_s, "")
                              check_url =  check_url.gsub("http", "")
                              check_url =  check_url.gsub("https", "")
                              check_url =  check_url.gsub("://", "")
                              
                              if rules_url_event_hash_d["cookie_id"].to_s == ""
                                  data_hash = {}
                                  insert_hash = {}
                                  
                                  if (rules_url_condition.to_s == "equal" && rules_url.to_s == check_url.to_s) || (rules_url_condition.to_s == "begin" && check_url.start_with?(rules_url.to_s)) || (rules_url_condition.to_s == "re" && check_url.include?(rules_url.to_s))
                                    
                                      tmp_remove_index << index
                                          
                                      insert_hash[:user_id] = rules_url_event_hash_d['user_id'].to_s
                                      insert_hash[:cookie_id] = rules_url_event_hash_d['cookie_id'].to_s
                                      insert_hash[:tag_version] = rules_url_event_hash_d["tag_version"].to_s
                                      insert_hash[:type] = "destination"
                                      insert_hash[:company_id] = rules_url_event_hash_d["company_id"].to_s
                                      insert_hash[:network_id] = 0
                                      insert_hash[:network_type] = ""
                                      insert_hash[:country] = rules_url_event_hash_d['country']
                                      insert_hash[:city] = rules_url_event_hash_d['city']
                                      insert_hash[:variant] = rules_url_event_hash_d['variant']
                                      insert_hash[:campaign_id] = 0
                                      insert_hash[:adgroup_id] = 0
                                      insert_hash[:ad_id] = 0
                                      insert_hash[:keyword_id] = 0
                                      insert_hash[:revenue] = rules_url_hash["companyid_"+rules_url_event_hash_d["company_id"].to_s+"_"+check_url.to_s]["price"].to_f
                                      insert_hash[:order_id] = 0
                                      insert_hash[:event_date] = rules_url_event_hash_d['date'].to_s
                                      insert_hash[:click_date] = ""
                                      insert_hash[:conversion_date] = @now.to_s
                                      insert_hash[:goal_id] = rules_url_hash["companyid_"+rules_url_event_hash_d["company_id"].to_s+"_"+check_url.to_s]["goal_id"].to_s
                                      insert_hash[:update_revenue_status] = 1
                                      
                                      data_hash[:insert_one] = insert_hash
                                      data_arr << data_hash
#                                           
                                      if data_arr.count.to_i > 500
                                          @db2[:conversion].bulk_write(data_arr)
                                          @db2.close()
                                          
                                          data_arr = []
                                      end
                                  end
                                  
                              else
                                  if (rules_url_condition.to_s == "equal" && rules_url.to_s == check_url.to_s) || (rules_url_condition.to_s == "begin" && check_url.start_with?(rules_url.to_s)) || (rules_url_condition.to_s == "re" && check_url.include?(rules_url.to_s))
                                      tmp_remove_index << index
                                      rules_url_event_with_click_array << rules_url_event_hash_d
                                      rules_url_event_with_click_id_array << rules_url_event_hash_d["cookie_id"]
                                  end
                              end
                              
                              
                          end
                          
                          if tmp_remove_index.count.to_i > 0
                              
                              tmp_remove_index.each do |tmp_remove_index_d|
                                  rules_url_event_hash[match_company_id].delete_at(tmp_remove_index_d)
                              end
                          end
                          
                          
                      end
                      
                      # loop the event
                      # remove that id
                  end
                  
                  
                  
                  if rules_url_event_with_click_id_array.count.to_i > 0
                  
                      @click = @db2[:clicks].find( { "$and" => [{:cookie_id => { "$in" => rules_url_event_with_click_id_array} }, {:check_url_status => 0 }] } ).sort({ date: -1 })
                      @db2.close()
                      
          
                      if @click.count.to_i > 0
                          @click.no_cursor_timeout.each do |click_d|
                              time_count_to_remove_old_record = (@now.to_datetime - click_d["date"].to_datetime )*24*60*60
                              network_limit_time = all_cookie_lenght_hash["id"+click_d["network_id"].to_s]*24*60*60
                              
                              if time_count_to_remove_old_record.to_i < network_limit_time.to_i
                                  rules_url_event_click_hash[click_d["cookie_id"].to_s] = click_d
                              else
                                  click_done_id_array << click_d["_id"]
                              end
                          end
                      end 
                  end
                  
                  if rules_url_event_with_click_array.count.to_i > 0
                      rules_url_event_with_click_array.each do |rules_url_event_with_click_array_d|
                          
                          data_hash = {}
                          insert_hash = {}
                          
                          insert_hash[:user_id] = rules_url_event_with_click_array_d['user_id'].to_s
                          insert_hash[:cookie_id] = rules_url_event_with_click_array_d['cookie_id'].to_s
                          insert_hash[:tag_version] = rules_url_event_with_click_array_d["tag_version"].to_s
                          insert_hash[:type] = "destination"
                          insert_hash[:company_id] = rules_url_event_with_click_array_d["company_id"].to_s
                          insert_hash[:country] = rules_url_event_with_click_array_d['country']
                          insert_hash[:city] = rules_url_event_with_click_array_d['city']
                          insert_hash[:variant] = rules_url_event_with_click_array_d['variant']
                          insert_hash[:order_id] = 0
                          insert_hash[:event_date] = rules_url_event_with_click_array_d['date'].to_s
                          insert_hash[:conversion_date] = @now.to_s
                          insert_hash[:update_revenue_status] = 1
                          
                          
                          if !rules_url_event_click_hash[rules_url_event_with_click_array_d["cookie_id"].to_s].nil?
                            
                              insert_hash[:network_id] = rules_url_event_click_hash[rules_url_event_with_click_array_d["cookie_id"]]["network_id"]
                              insert_hash[:network_type] = rules_url_event_click_hash[rules_url_event_with_click_array_d["cookie_id"]]["network_type"]
                              insert_hash[:campaign_id] = rules_url_event_click_hash[rules_url_event_with_click_array_d["cookie_id"]]["campaign_id"]
                              insert_hash[:adgroup_id] = rules_url_event_click_hash[rules_url_event_with_click_array_d["cookie_id"]]["adgroup_id"]
                              insert_hash[:ad_id] = rules_url_event_click_hash[rules_url_event_with_click_array_d["cookie_id"]]["ad_id"]
                              insert_hash[:keyword_id] = rules_url_event_click_hash[rules_url_event_with_click_array_d["cookie_id"]]["keyword_id"]
                              insert_hash[:click_date] = rules_url_event_click_hash[rules_url_event_with_click_array_d["cookie_id"]]["date"]
                          else
                              insert_hash[:network_id] = 0
                              insert_hash[:network_type] = ""
                              insert_hash[:campaign_id] = 0
                              insert_hash[:adgroup_id] = 0
                              insert_hash[:ad_id] = 0
                              insert_hash[:keyword_id] = 0
                              insert_hash[:click_date] = ""
                          end
                          
                          url =  rules_url_event_with_click_array_d["current_page"].to_s.gsub(rules_url_event_with_click_array_d["host"].to_s, "")
                          url =  url.gsub("http", "")
                          url =  url.gsub("https", "")
                          url =  url.gsub("://", "")
                          
                          
                          insert_hash[:revenue] = rules_url_hash["companyid_"+rules_url_event_with_click_array_d["company_id"].to_s+"_"+url.to_s]["price"].to_f
                          insert_hash[:goal_id] = rules_url_hash["companyid_"+rules_url_event_with_click_array_d["company_id"].to_s+"_"+url.to_s]["goal_id"].to_s
                          
                          
                          data_hash[:insert_one] = insert_hash
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 1000
                              @db2[:conversion].bulk_write(data_arr)
                              @db2.close()
                              
                              data_arr = []
                          end
                          
                      end
                  end
                  
                  
                  # should loop rules_url_event_hash here as well, and mark all event done
                  # do with click here
                  
                  if data_arr.count.to_i > 0
                      @db2[:conversion].bulk_write(data_arr)
                      @db2.close()
                  end
                  
              end
#               
              
              # finsih click and event here
          end
          
          
          if click_done_id_array.count.to_i > 0
              @db2[:clicks].find('_id' => { "$in" => click_done_id_array}).update_many('$set'=> { 'check_url_status' => 1 })
              @db2.close()
          end
          
          if event_done_id_array.count.to_i > 0
              @db2[:events].find('_id' => { "$in" => event_done_id_array}).update_many('$set'=> { 'check_url_status' => 1 })
              @db2.close()
          end
              
      end

      
      data = {:message => "g_normal_conversion_done", :status => "true"}
      return render :json => data, :status => :ok
          
  end
  
  
  def g_conversion
    
      event_id_list = []
      event_object_id_list = []
      
      network_type_hash = {}
      network_cookie_limit_hash = {}
      
      click_hash = {}
      
      @logger.info "g_conversion called"
      
      @network = @db[:network].find()
      @db.close
      
      if @network.count.to_i > 0 
          @network.each do |network_d|
              network_type_hash[network_d['id'].to_s] = network_d['type'].to_s
              network_cookie_limit_hash[network_d['id'].to_s] = network_d['cookie_length'].to_i
          end
      end
      
      @allcase = []
      
      @event= @db2[:events].find( { "$or" => [{:check_status => nil}, {:check_status => 0}] } ).limit(700)
      @db2.close() 
      
      # @event = @db2[:events].find( 'id' => "092faed3-d121-4416-ae69-3a41636baea4")
      # @db2.close()
      @logger.info "g_conversion has " + @event.count.to_s + " events"
      
      
      data_arr = []
      
      if @event.count.to_i > 0
          @event.each do |event|
              if event['id'].to_s != ''
                  event_id_list << event['id']
                  event_object_id_list << event['_id']
              end
          end
          
          
          # @click = @db2[:clicks].find({ 'id' => { "$in" => event_id_list} }, 'network_id' => { "$gt" => 0 })
          # @db2.close()
          
          
          @click = @db2[:clicks].find({ "$and" => [ {:id => { "$in" => event_id_list}}, {:network_id => { "$gt" => 0 }} ] })
          @db2.close()
          
          
          # data = {:message => @click, :status => "false"}
          # return render :json => data, :status => :ok
          
          
          if @click.count.to_i > 0
              @click.each do |click|
                  click_hash[click['id']] = click
              end
      
              @event.each do |event_d|
               
                  if click_hash[event_d['id'].to_s]
                      other_param = event_d['other_param'].to_a
                      revenue = other_param[1].to_s.gsub('prm.params2:val=','').to_f
    
                      if click_hash[event_d['id'].to_s]['keyword_id'].to_i == 0 then
                          if click_hash[event_d['id'].to_s]['target_id'].to_s.include? ":" then
                            keyword_id = click_hash[event_d['id'].to_s]['target_id'].to_s.split(":")[1].gsub('kwd-','').to_i
                          else
                            keyword_id = click_hash[event_d['id'].to_s]['target_id'].to_s.gsub('kwd-','').to_i
                          end
                      else
                          keyword_id = click_hash[event_d['id'].to_s]['keyword_id'].to_i
                      end
                        
                      event_date = event_d['date'].to_date
                      event_date = event_date.in_time_zone('Beijing').strftime("%Y-%m-%d")
                       
                      click_date = click_hash[event_d['id'].to_s]['date'].to_date
                      click_date = click_date.in_time_zone('Beijing').strftime("%Y-%m-%d")
                        
                      date_range = (event_date.to_date - click_date.to_date).to_i
                        
                      if click_hash[event_d['id'].to_s]['company_id'].to_i == 1
                          order_id = event_d['other_param'][0].to_s.gsub('prm.params1:','')
                      else
                          order_id = ''
                      end
                      
                        
                      if date_range.to_i <= network_cookie_limit_hash[click_hash[event_d['id'].to_s]['network_id'].to_s].to_i
                         
                          if click_hash[event_d['id'].to_s]['company_id'].to_i == 1 && order_id.to_s == ""
                          else  
                              @allcase << event_d['id'].to_s
                              
                              # @db2[:conversion].insert_one({
                                    # id: event_d['id'].to_s,
                                    # random_number: click_hash[event_d['id'].to_s]['random_number'].to_i,
                                    # session_id: click_hash[event_d['id'].to_s]['session_id'].to_s,
#                                     
                                    # tag_version: event_d['tag_version'],
#                                     
                                    # company_id: click_hash[event_d['id'].to_s]['company_id'].to_i,         
                                    # network_id: click_hash[event_d['id'].to_s]['network_id'].to_i,
                                    # network_type: network_type_hash[click_hash[event_d['id'].to_s]['network_id'].to_s].to_s,
#                                     
                                    # country: event_d['country'],
                                    # city: event_d['city'],
                                    # variant: event_d['variant'],
#                                     
                                    # campaign_id: click_hash[event_d['id'].to_s]['campaign_id'].to_i,
                                    # adgroup_id: click_hash[event_d['id'].to_s]['adgroup_id'].to_i,
                                    # ad_id: click_hash[event_d['id'].to_s]['ad_id'].to_i,
                                    # keyword_id: keyword_id.to_i,
                                    # revenue: revenue,
                                    # order_id: order_id,
                                    # date: event_d['date'].to_s
                              # })
                              # @db2.close()
                              
                              
                              data_hash = {}
                              insert_hash = {}
                            
                              insert_hash[:id] = event_d['id'].to_s
                              insert_hash[:random_number] = click_hash[event_d['id'].to_s]['random_number'].to_i
                              insert_hash[:session_id] = click_hash[event_d['id'].to_s]['session_id'].to_s
                              insert_hash[:tag_version] = event_d['tag_version']
                              insert_hash[:company_id] = click_hash[event_d['id'].to_s]['company_id'].to_i
                              insert_hash[:network_id] = click_hash[event_d['id'].to_s]['network_id'].to_i
                              insert_hash[:network_type] = network_type_hash[click_hash[event_d['id'].to_s]['network_id'].to_s].to_s
                              insert_hash[:country] = event_d['country']
                              insert_hash[:city] = event_d['city']
                              insert_hash[:variant] = event_d['variant']
                              insert_hash[:campaign_id] = click_hash[event_d['id'].to_s]['campaign_id'].to_i
                              insert_hash[:adgroup_id] = click_hash[event_d['id'].to_s]['adgroup_id'].to_i
                              insert_hash[:ad_id] = click_hash[event_d['id'].to_s]['ad_id'].to_i
                              insert_hash[:keyword_id] = keyword_id.to_i
                              insert_hash[:revenue] = revenue
                              insert_hash[:update_revenue_status] = 0                              
                              insert_hash[:order_id] = order_id
                              insert_hash[:date] = event_d['date'].to_s
                              insert_hash[:business_type] = ""
                              
                              
                                  
                              data_hash[:insert_one] = insert_hash
                              data_arr << data_hash
                            
                              if data_arr.count.to_i > 500
                                  @db2[:conversion].bulk_write(data_arr)
                                  @db2.close()
                                  
                                  data_arr = []
                              end
                              
                          end
                      end
                  end
              end
              
          end
          
          if data_arr.count.to_i > 0
              @db2[:conversion].bulk_write(data_arr)
              @db2.close()
              
              data_arr = []
          end
      end
        
        
      @db2[:events].find('_id' => { "$in" => event_object_id_list}).update_many({ '$set' => { check_status: 1}})
      @db2.close()   
          
      if @allcase.count.to_i > 0
          @logger.info "g_conversion added id x " + @allcase.count.to_s
      else
          @logger.info "g_conversion nooo added id"
      end
      
      @logger.info "g_conversion done"
      
      data = {:message => "done", :status => "false"}
      return render :json => data, :status => :ok
  end
  
  
  
  def checkquote
    
      @logger.info "checkquote called"
      
      @company = @db["company"].find(name: "Ctrip")
      @db.close
      
      if @company.count.to_i > 0
          @company.each do |company_d|
              @ctrip_id = company_d["id"]
          end
      end
      
      error_api_network_hash = {}
      other_error_api_network_hash = {}
      sogou_account_need_add_hash = {}
      threesixty_account_need_add_hash = {}
      baidu_account_need_add_hash = {}
      
      
      @network = @db["network"].find()
      @db.close
                        
      if @network.count.to_i > 0
          @network.each do |network_d|
            
              if network_d['type'].to_s == "sogou"
                    begin
                        sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                        sogou_result = @sogou_api.call(:get_account_info)
                        
                        @logger.info sogou_result.header
                        
                        if sogou_result.header[:res_header][:desc].to_s == "failure" 
                            if sogou_result.header[:res_header][:failures][:code].to_i == 8 || sogou_result.header[:res_header][:failures][:code].to_i == 10
                                error_api_network_hash[network_d["id"].to_s] = network_d["username"]
                            
                            elsif sogou_result.header[:res_header][:failures][:code].to_i == 30
                                other_error_api_network_hash[network_d["id"].to_s] = network_d["username"]
                                
                            elsif sogou_result.header[:res_header][:failures][:code].to_i == 18
                                if network_d["company_id"].to_i == @ctrip_id.to_i
                                    sogou_account_need_add_hash[network_d["id"].to_s] = network_d["username"]
                                end
                            end
                        else
                            if sogou_result.header[:res_header][:rquota].to_i <= 500
                                # if network_d["company_id"].to_i == @ctrip_id.to_i
                                    sogou_account_need_add_hash[network_d["id"].to_s] = network_d["username"]
                                # end
                            end
                        end
                    
                    rescue Exception
                    end 
              
              elsif network_d['type'].to_s == "360"
                  begin
                      @username = network_d["username"]
                      @password = network_d["password"]
                      @apitoken = network_d["api_token"]
                      @apisecret = network_d["api_secret"]
                      
                      login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                      @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                      
                      @logger.info login_info
                      
                      if @refresh_token.nil?
                          error_api_network_hash[network_d["id"].to_s] = network_d["username"]
                      else
                          @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "account", "getInfo")
                          @logger.info @update_res
                          
                          if @response.headers["quotaremain"].to_i <= 500  
                              # if network_d["company_id"].to_i == @ctrip_id.to_i
                                  threesixty_account_need_add_hash[network_d["id"].to_s] = network_d["username"]
                              # end
                          end  
                      end
                  rescue Exception
                  end
                  
              elsif network_d['type'].to_s == "baidu" 
                  begin
                      @username = network_d["username"]
                      @password = network_d["password"]
                      @apitoken = network_d["api_token"]
                      
                      service = "AccountService"
                      method = "getAccountInfo"
                      
                      json = {'header' => { 
                                              'token' => @apitoken.to_s,
                                              'username' => @username.to_s,
                                              'password' => @password.to_s 
                                          },
                               'body'  => {
                                              'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                                          }
                              }       
                              
                      @account_info = baidu_api(service,method,json)
                      
                      if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                          @header = @account_info["header"]
                          @quota = @header["rquota"]
                          
                          if @quota.to_i <= 500  
                              # if network_d["company_id"].to_i == @ctrip_id.to_i
                                  baidu_account_need_add_hash[network_d["id"].to_s] = network_d["username"]
                              # end
                          end
                      else
                          error_api_network_hash[network_d["id"].to_s] = network_d["username"]    
                      end
                  rescue Exception
                  end
              end
              
          end
      end
      
      @user = @db["user"].find()
      @db.close
      @user_network = @db["network_user"].find()
      @db.close
      user_network_hash = {}

      
      if @user_network.count.to_i > 0
          @user_network.each do |user_network_d|
              
              if user_network_hash[user_network_d["user"].to_s].nil?
                  user_network_hash[user_network_d["user"].to_s] = []
                  user_network_hash[user_network_d["user"].to_s] << user_network_d["network_id"].to_i
              else
                  user_network_hash[user_network_d["user"].to_s] << user_network_d["network_id"].to_i
              end 
          end
      end
      
      # data = {:status => "false", :user_network_hash => user_network_hash, :error_api_network_hash => error_api_network_hash, :sogou_account_need_add_hash => sogou_account_need_add_hash, :threesixty_account_need_add_hash => threesixty_account_need_add_hash }
      # return render :json => data, :status => :ok 
      
      @logger.info "check quota email part start"
      if @user.count.to_i > 0
          @user.each do |user_d|
                
              error_api_network_array = []
              other_error_api_network_array = []
              
              sogou_account_need_add_array = []
              threesixty_account_need_add_array = []
              baidu_account_need_add_array = []
              
              if !user_network_hash[user_d['id'].to_s].nil?
                  user_network_hash[user_d['id'].to_s].each do |user_network_d|
                      
                      if !other_error_api_network_hash[user_network_d.to_s].nil?
                          other_error_api_network_array << other_error_api_network_hash[user_network_d.to_s]  
                      end
                      
                      if !error_api_network_hash[user_network_d.to_s].nil?
                          error_api_network_array << error_api_network_hash[user_network_d.to_s]  
                      end
                      
                      if !sogou_account_need_add_hash[user_network_d.to_s].nil?
                          sogou_account_need_add_array << sogou_account_need_add_hash[user_network_d.to_s]  
                      end
                      
                      if !threesixty_account_need_add_hash[user_network_d.to_s].nil?
                          threesixty_account_need_add_array << threesixty_account_need_add_hash[user_network_d.to_s]  
                      end
                      
                      if !baidu_account_need_add_hash[user_network_d.to_s].nil?
                          baidu_account_need_add_array << baidu_account_need_add_hash[user_network_d.to_s]  
                      end
                  end
                  
                  
                  
                  if other_error_api_network_array.count.to_i > 0
                      begin
                          # @logger.info "5"
                          @logger.info "other api error"
                          @logger.info "some other api not correct"
                          mg_client = Mailgun::Client.new("key-c72a65e7d3d818852d40757182bd82c9")  
                          mb_obj = Mailgun::MessageBuilder.new()
                       
                          mb_obj.set_from_address("do-not-reply@adeqo.com", {"first"=>"Adeqo", "last" => ""});
                          
                          if user_d["email"].to_s.include?("admin")
                              mb_obj.add_recipient(:to, "jkwan@bmgww.com", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "mchen@bmgww.com", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "aji@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "syu@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "jkosheleva@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "xfung@bmgww.com", {"first" => "", "last" => ""});
                          else
                              # mb_obj.add_recipient(:to, "jkwan@bmgww.com", {"first" => "", "last" => ""});  
                              mb_obj.add_recipient(:to, user_d["email"].to_s, {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "jkwan@bmgww.com", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "aji@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "xfung@bmgww.com", {"first" => "", "last" => ""});
                          end
                          
                          mb_obj.set_subject("Adeqo | Your Account status is Invalid, Please contact your Channel Provider.");  
                          # mb_obj.set_text_body(result_msg);
                          
                          result_msg = "<p>Please Contact your Channel provider as soon as possible.</p>"
                          result_msg = "<p>Account status for the following account are invalid: "+other_error_api_network_array.join("<br />")+"</p>"
                          result_msg = result_msg + "<p>Incorrect Account status will stop us from keeping the information up-to-date. The users will not be able to use any editing functions.</p>"
                          result_msg = result_msg + "<br /><p>Team BMG</p>" 
                          mb_obj.set_html_body(result_msg);
                          mg_client.send_message("china.adeqo.com", mb_obj)
                          @logger.info "email api done"
                      rescue Exception
                          @logger.info "email api errorr"
                      end 
                  end
                  
                  if error_api_network_array.count.to_i > 0
                      begin
                          # @logger.info "5"
                          @logger.info "email api"
                          @logger.info "some account api not correct"
                          mg_client = Mailgun::Client.new("key-c72a65e7d3d818852d40757182bd82c9")  
                          mb_obj = Mailgun::MessageBuilder.new()
                       
                          mb_obj.set_from_address("do-not-reply@adeqo.com", {"first"=>"Adeqo", "last" => ""});
                          
                          if user_d["email"].to_s.include?("admin")
                              mb_obj.add_recipient(:to, "jkwan@bmgww.com", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "mchen@bmgww.com", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "aji@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "syu@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "jkosheleva@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "xfung@bmgww.com", {"first" => "", "last" => ""});
                          else
                              # mb_obj.add_recipient(:to, "jkwan@bmgww.com", {"first" => "", "last" => ""});  
                              mb_obj.add_recipient(:to, user_d["email"].to_s, {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "jkwan@bmgww.com", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "aji@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "xfung@bmgww.com", {"first" => "", "last" => ""});
                          end
                          
                          mb_obj.set_subject("Adeqo | Your Account info is not correct.");  
                          # mb_obj.set_text_body(result_msg);
                          
                          result_msg = "<p>Account API credentials for the following account are incorrect: "+error_api_network_array.join("<br />")+"</p>"
                          result_msg = result_msg + "<p>Please login and visit the account page:<br /><a href='http://china.adeqo.com/account'>http://china.adeqo.com/account</a></p>"
                          result_msg = result_msg + "<p>to update Password and API Token Information</p>"
                          result_msg = result_msg + "<p>Incorrect API credentials will stop us from keeping the information up-to-date. The users will not be able to use any editing functions.</p>"
                          result_msg = result_msg + "<br /><p>Team BMG</p>" 
                          mb_obj.set_html_body(result_msg);
                          mg_client.send_message("china.adeqo.com", mb_obj)
                          @logger.info "email api done"
                      rescue Exception
                          @logger.info "email api errorr"
                      end 
                  end
                  
                  
                  if baidu_account_need_add_array.count.to_i > 0
                      @logger.info "some baidu account need quota"
                      baidu_account_need_add_array = baidu_account_need_add_array.uniq
                      
                      begin
                          @logger.info "email baidu quota"
                          mg_client = Mailgun::Client.new("key-c72a65e7d3d818852d40757182bd82c9")  
                          mb_obj = Mailgun::MessageBuilder.new()
                      
                          mb_obj.set_from_address("do-not-reply@adeqo.com", {"first"=>"Adeqo", "last" => ""});  
                          
                          if user_d["email"].to_s.downcase.include?("admin")
                              mb_obj.add_recipient(:to, "jkwan@bmgww.com", {"first" => "", "last" => ""});  
                              mb_obj.add_recipient(:cc, "mchen@bmgww.com", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "aji@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "syu@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "jkosheleva@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "xfung@bmgww.com", {"first" => "", "last" => ""});
                          else
                              mb_obj.add_recipient(:to, user_d["email"].to_s, {"first" => "", "last" => ""});
                          end
                          mb_obj.set_subject("Adeqo | Quota Increase Required(Baidu)");  
                          
                          result_msg = "<p>We have noticed that the current quota for the following account(s) is insufficient: <br /><br />"+baidu_account_need_add_array.join("<br />")+"<br /><br />To enable normal account maintenance and operation, please increase the quota allocation.</p><br /><p>Team BMG</p>"
                          # mb_obj.set_text_body(result_msg);
                          mb_obj.set_html_body(result_msg);
                          mg_client.send_message("china.adeqo.com", mb_obj)
                          @logger.info "email baidu done"
                      rescue Exception
                          @logger.info "email baidu error"
                      end
                  end
                  
                  if sogou_account_need_add_array.count.to_i > 0
                      @logger.info "some sogou account need quota"
                      sogou_account_need_add_array = sogou_account_need_add_array.uniq
                      
                      begin
                          @logger.info "email sogou quota"
                          mg_client = Mailgun::Client.new("key-c72a65e7d3d818852d40757182bd82c9")  
                          mb_obj = Mailgun::MessageBuilder.new()
                      
                          mb_obj.set_from_address("do-not-reply@adeqo.com", {"first"=>"Adeqo", "last" => ""});  
                          
                          if user_d["email"].to_s.downcase.include?("admin")
                              mb_obj.add_recipient(:to, "jkwan@bmgww.com", {"first" => "", "last" => ""});  
                              mb_obj.add_recipient(:cc, "mchen@bmgww.com", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "aji@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "syu@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "jkosheleva@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "xfung@bmgww.com", {"first" => "", "last" => ""});
                          else
                              mb_obj.add_recipient(:to, user_d["email"].to_s, {"first" => "", "last" => ""});
                          end
                          mb_obj.set_subject("Adeqo | Quota Increase Required(Sogou)");  
                          
                          result_msg = "<p>We have noticed that the current quota for the following account(s) is insufficient: <br /><br />"+sogou_account_need_add_array.join("<br />")+"<br /><br />To enable normal account maintenance and operation, please increase the quota allocation.</p><br /><p>Team BMG</p>"
                          # mb_obj.set_text_body(result_msg);
                          mb_obj.set_html_body(result_msg);
                          mg_client.send_message("china.adeqo.com", mb_obj)
                          @logger.info "email sogou done"
                      rescue Exception
                          @logger.info "email sogou error"
                      end
                  end
                  
                  if threesixty_account_need_add_array.count.to_i > 0
                      @logger.info "some 360 account need quota"
                      threesixty_account_need_add_array = threesixty_account_need_add_array.uniq
                      
                      begin
                          @logger.info "email 360 quota"
                          mg_client = Mailgun::Client.new("key-c72a65e7d3d818852d40757182bd82c9")  
                          mb_obj = Mailgun::MessageBuilder.new()
                      
                          mb_obj.set_from_address("do-not-reply@adeqo.com", {"first"=>"Adeqo", "last" => ""});  
                          
                          if user_d["email"].to_s.downcase.include?("admin")
                              mb_obj.add_recipient(:to, "jkwan@bmgww.com", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "mchen@bmgww.com", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "aji@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "jkosheleva@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "xfung@bmgww.com", {"first" => "", "last" => ""});
                          elsif user_d["email"].to_s.downcase.include?("admin") && user_d["email"].to_s.downcase.include?("ctrip")
                              mb_obj.add_recipient(:to, "shiwenjing@360.cn", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "jkwan@bmgww.com", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "mchen@bmgww.com", {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "aji@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "jkosheleva@bmgww.com", {"first" => "", "last" => ""});
                              # mb_obj.add_recipient(:cc, "xfung@bmgww.com", {"first" => "", "last" => ""});
                          else
                              mb_obj.add_recipient(:to, user_d["email"].to_s, {"first" => "", "last" => ""});
                              mb_obj.add_recipient(:cc, "jkwan@bmgww.com", {"first" => "", "last" => ""});
                          end
                          mb_obj.set_subject("Adeqo | Quota Increase Required(360)");  
                          
                          result_msg = "<p>We have noticed that the current quota for the following account(s) is insufficient: <br /><br />"+threesixty_account_need_add_array.join("<br />")+"<br /><br />To enable normal account maintenance and operation, please increase the quota allocation.</p><br /><p>Team BMG</p>"
                          # mb_obj.set_text_body(result_msg);
                          mb_obj.set_html_body(result_msg);
                          mg_client.send_message("china.adeqo.com", mb_obj)
                          @logger.info "email 360 quota done"
                      rescue Exception
                          @logger.info "email 360 error"
                      end  
                  end
              end
                
          end
      end
      
      @logger.info "check quota email part start done"
           
           
      @logger.info "checkquote called done"                  
      data = {:message => "done", :status => "false"}
      return render :json => data, :status => :ok
  end
  
  
  def advancedsearchjob
    
    @logger.info "advancedsearchjob export called"
    
    # @jobs = @db["advancesearchjob"].find('process' => 0, 'worker' => @port.to_i).limit(1)
    # @db.close
    
    # @current_jobs = @db["advancesearchjob"].find('process' => 1, 'worker' => @port.to_i)
    # @db.close
    
    
    
    @jobs = @db["advancesearchjob"].find({ "$and" => [ {:process => 0}, {:worker => @port.to_i} ] }).limit(1)
    @db.close
    
    @current_jobs = @db["advancesearchjob"].find({ "$and" => [ {:process => 1}, {:worker => @port.to_i} ] })
    @db.close
    
    if @current_jobs.count.to_i >= 2
        @logger.info "advancesearchjob: too much job is running "+ @now.to_s
        data = {:message => "too much job is running", :status => "false"}
        return render :json => data, :status => :ok
    end
            
    if @jobs.count.to_i == 0
        @logger.info "advancesearchjob: no job is waiting "+ @now.to_s
        data = {:message => "no job", :status => "false"}
        return render :json => data, :status => :ok
    else
        @jobs.each do |job|
              
              @select_campaign = job["select_campaign"]
              @select_adgroup = job["select_adgroup"]
              
              @network = @db["network"].find('id' => job["network_id"].to_i)
              @db.close
              
              if @network.count.to_i > 0
                  @network.each do |network|
                      @network_type = network["type"]
                      @network_name = network["name"]
                      @network_currency = network["currency"]
                      @network_api_token = network["api_token"]
                      @network_api_username = network["username"]
                      @network_api_password = network["password"]
                      @network_api_secret = network["api_secret"] 
                      
                      @network_company_id = network["company_id"]
                      
                  end
                  
                  
                  if @network_company_id == 1
                    @all_conversion_business_type = ["ACT","BUS","CAR","CRP","CRU","DIY","EUR","FLT","GRP","HTL","PKG","SHX","TRN","TTD","VIS"]
                  else
                    # for search other company other than ctrip
                    @all_conversion_business_type = []
                  end
              else
                
                  @db["advancesearchjob"].find('_id' => job["_id"]).update_one('$set'=> { 'process' => 4, 'last_update' => @now})
                  @db.close
                  
                  mg_client = Mailgun::Client.new("key-c72a65e7d3d818852d40757182bd82c9")  
                  mb_obj = Mailgun::MessageBuilder.new()
            
                  mb_obj.set_from_address("do-not-reply@adeqo.com", {"first"=>"Adeqo", "last" => ""});  
                  mb_obj.add_recipient(:to, job["user_email"].to_s, {"first" => "", "last" => ""});  
                  # mb_obj.add_recipient(:cc, "ttung@bmgww.com", {"first" => "", "last" => ""});
                  mb_obj.add_recipient(:cc, "jkwan@bmgww.com", {"first" => "", "last" => ""});
                  mb_obj.add_recipient(:cc, "xfung@bmgww.com", {"first" => "", "last" => ""});
                  
                  mb_obj.set_subject("Adeqo | Advance Search Report");  
                  # mb_obj.set_text_body(result_msg);
                  mb_obj.set_html_body("Your request is invaild, please submit it again.");
                  mail = mg_client.send_message("china.adeqo.com", mb_obj)
                  
                  
                  data = {:status => "false"}
                  return render :json => data, :status => :ok
                  
              end
          
          
              @db["advancesearchjob"].find('_id' => job["_id"]).update_one('$set'=> { 'process' => 1, 'last_update' => @now})
              @db.close
              
              data_array = []
              
              if job["apply_level"].to_s == "Campaign"
                  apply_level = "campaign"
              
              
              elsif job["apply_level"].to_s == "Ad Groups"
                  apply_level = "adgroup" 
              
              
              elsif job["apply_level"].to_s == "Ads"
                  apply_level = "ad"
              
              
              elsif job["apply_level"].to_s == "Keywords"
                  apply_level = "keyword" 
              end
              
              @end_date = job["end_date"].to_date + 1.days
              @end_date = @end_date.strftime("%Y-%m-%d")
              
              @start_date = job["start_date"].to_date - 1.days
              @start_date = @start_date.strftime("%Y-%m-%d")
              
              
              arr = []
              conversion_hash = {}
              sogou_report_hash = {}
              baidu_report_hash = {}
              threesixty_report_hash = {}
              shenma_report_hash = {}
              
              
              if apply_level == "campaign"
                
                  total_array = 1
                  array_limit = 400000
                
                  if @select_campaign.is_a?(Array) && @select_campaign.count.to_i > 0
                    
                      if job["network_type"].to_s == "360" || job["network_type"].to_s == "baidu" || job["network_type"].to_s == "shenma"
                          @level_data = @db["all_campaign"].find({ "$and" => [ {:network_id => job["network_id"].to_i}, {:network_type => job["network_type"].to_s}, {:campaign_id => { "$in" => @select_campaign}} ] })
                          @db.close
                          
                      elsif job["network_type"].to_s == "sogou"
                          @level_data = @db["all_campaign"].find({ "$and" => [ {:network_id => job["network_id"].to_i}, {:network_type => job["network_type"].to_s}, {:cpc_plan_id => { "$in" => @select_campaign}} ] })
                          @db.close
                      end
                    
                  else
                      @level_data = @db["all_campaign"].find({ "$and" => [ {:network_id => job["network_id"].to_i}, {:network_type => job["network_type"].to_s} ] })
                      @db.close
                  end
                
                   
                  
                  if @level_data.count.to_i > 0
                    
                      @level_data.no_cursor_timeout.each do |all_campaign_count_d|
                          if all_campaign_count_d["network_type"] == "360"
                              arr << all_campaign_count_d["campaign_id"]            
                          
                          
                          elsif all_campaign_count_d["network_type"] == "sogou"
                              arr << all_campaign_count_d["cpc_plan_id"]  
                          
                          elsif all_campaign_count_d["network_type"] == "baidu"
                              arr << all_campaign_count_d["campaign_id"]
                              
                          elsif all_campaign_count_d["network_type"] == "shenma"
                              arr << all_campaign_count_d["campaign_id"]
                          end
                      end
                      
                      
                      if arr.count.to_i > 0
                            
                        total_array = arr.count.to_i / array_limit.to_i
                        total_array = total_array + 1
                        arr = arr.in_groups(total_array)
                        
                      end
                      
                      
                      
                      if job["network_type"].to_s == "shenma"
                        
                          if arr.count.to_i > 0
                              arr.each do |arr_d|
                                
                                  @level_campaign_report = @db3[:shenma_report_campaign].find({ "$and" => [ {:campaign_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @level_campaign_report.count.to_i > 0 
                                      @level_campaign_report.no_cursor_timeout.each do |shenma_campaign_report_arr|
                                        
                                          if shenma_report_hash["campaign_id"+shenma_campaign_report_arr['campaign_id'].to_s+"display"]
                                              shenma_report_hash["campaign_id"+shenma_campaign_report_arr['campaign_id'].to_s+"display"] += shenma_campaign_report_arr['display'].to_i
                                          else
                                              shenma_report_hash["campaign_id"+shenma_campaign_report_arr['campaign_id'].to_s+"display"] = shenma_campaign_report_arr['display'].to_i
                                          end
                                          
                                          if shenma_report_hash["campaign_id"+shenma_campaign_report_arr['campaign_id'].to_s+"clicks"]
                                              shenma_report_hash["campaign_id"+shenma_campaign_report_arr['campaign_id'].to_s+"clicks"] += shenma_campaign_report_arr['clicks'].to_i
                                          else
                                              shenma_report_hash["campaign_id"+shenma_campaign_report_arr['campaign_id'].to_s+"clicks"] = shenma_campaign_report_arr['clicks'].to_i
                                          end
                                          
                                          if shenma_report_hash["campaign_id"+shenma_campaign_report_arr['campaign_id'].to_s+"total_cost"]
                                              shenma_report_hash["campaign_id"+shenma_campaign_report_arr['campaign_id'].to_s+"total_cost"] += shenma_campaign_report_arr['total_cost'].to_f
                                          else
                                              shenma_report_hash["campaign_id"+shenma_campaign_report_arr['campaign_id'].to_s+"total_cost"] = shenma_campaign_report_arr['total_cost'].to_f
                                          end
                                          
                                          if shenma_report_hash["campaign_id"+shenma_campaign_report_arr['campaign_id'].to_s+"avg_position"]
                                            
                                              if shenma_campaign_report_arr['display'].to_f > 0 && shenma_campaign_report_arr['avg_position'].to_f > 0
                                                  avg_pos = shenma_campaign_report_arr["avg_position"].to_f * shenma_campaign_report_arr["display"].to_f
                                                  shenma_report_hash["campaign_id"+shenma_campaign_report_arr['campaign_id'].to_s+"avg_position"] += avg_pos.to_f
                                              end
                                              
                                          else
                                              shenma_report_hash["campaign_id"+shenma_campaign_report_arr['campaign_id'].to_s+"avg_position"] = shenma_campaign_report_arr["avg_position"].to_f * shenma_campaign_report_arr["display"].to_f
                                          end
                                          
                                          
                                      end
                                  end
                              end
                          end
                        
                      elsif job["network_type"].to_s == "baidu"
                          if arr.count.to_i > 0
                              arr.each do |arr_d|
                                
                                  @level_campaign_report = @db3[:baidu_report_campaign].find({ "$and" => [ {:cpc_plan_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @level_campaign_report.count.to_i > 0 
                                      @level_campaign_report.no_cursor_timeout.each do |baidu_campaign_report_arr|
                                        
                                          if baidu_report_hash["campaign_id"+baidu_campaign_report_arr['cpc_plan_id'].to_s+"display"]
                                              baidu_report_hash["campaign_id"+baidu_campaign_report_arr['cpc_plan_id'].to_s+"display"] += baidu_campaign_report_arr['display'].to_i
                                          else
                                              baidu_report_hash["campaign_id"+baidu_campaign_report_arr['cpc_plan_id'].to_s+"display"] = baidu_campaign_report_arr['display'].to_i
                                          end
                                          
                                          if baidu_report_hash["campaign_id"+baidu_campaign_report_arr['cpc_plan_id'].to_s+"clicks"]
                                              baidu_report_hash["campaign_id"+baidu_campaign_report_arr['cpc_plan_id'].to_s+"clicks"] += baidu_campaign_report_arr['clicks'].to_i
                                          else
                                              baidu_report_hash["campaign_id"+baidu_campaign_report_arr['cpc_plan_id'].to_s+"clicks"] = baidu_campaign_report_arr['clicks'].to_i
                                          end
                                          
                                          if baidu_report_hash["campaign_id"+baidu_campaign_report_arr['cpc_plan_id'].to_s+"total_cost"]
                                              baidu_report_hash["campaign_id"+baidu_campaign_report_arr['cpc_plan_id'].to_s+"total_cost"] += baidu_campaign_report_arr['total_cost'].to_f
                                          else
                                              baidu_report_hash["campaign_id"+baidu_campaign_report_arr['cpc_plan_id'].to_s+"total_cost"] = baidu_campaign_report_arr['total_cost'].to_f
                                          end
                                          
                                          if baidu_report_hash["campaign_id"+baidu_campaign_report_arr['cpc_plan_id'].to_s+"avg_position"]
                                            
                                              if baidu_campaign_report_arr['display'].to_f > 0 && baidu_campaign_report_arr['avg_position'].to_f > 0
                                                  avg_pos = baidu_campaign_report_arr["avg_position"].to_f * baidu_campaign_report_arr["display"].to_f
                                                  baidu_report_hash["campaign_id"+baidu_campaign_report_arr['cpc_plan_id'].to_s+"avg_position"] += avg_pos.to_f
                                              end
                                              
                                          else
                                              baidu_report_hash["campaign_id"+baidu_campaign_report_arr['cpc_plan_id'].to_s+"avg_position"] = baidu_campaign_report_arr["avg_position"].to_f * baidu_campaign_report_arr["display"].to_f
                                          end
                                          
                                          
                                      end
                                  end
                              end
                          end
                          
                      elsif job["network_type"].to_s == "sogou"
                        
                          if arr.count.to_i > 0
                            
                              arr.each do |arr_d|
                                  
                                  # @level_campaign_report = @db3[:sogou_report_campaign].find('cpc_plan_id' => { "$in" => arr_d}, 'report_date' => { '$gt' => @start_date.to_s, '$lt' => @end_date.to_s }, 'display' => { "$gt" => 0})
                                  # @db3.close()
                                  
                                  @level_campaign_report = @db3[:sogou_report_campaign].find({ "$and" => [ {:cpc_plan_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @level_campaign_report.count.to_i > 0 
                                      @level_campaign_report.no_cursor_timeout.each do |sogou_campaign_report_arr|
                                        
                                          if sogou_report_hash["campaign_id"+sogou_campaign_report_arr['cpc_plan_id'].to_s+"display"]
                                              sogou_report_hash["campaign_id"+sogou_campaign_report_arr['cpc_plan_id'].to_s+"display"] += sogou_campaign_report_arr['display'].to_i
                                          else
                                              sogou_report_hash["campaign_id"+sogou_campaign_report_arr['cpc_plan_id'].to_s+"display"] = sogou_campaign_report_arr['display'].to_i
                                          end
                                          
                                          if sogou_report_hash["campaign_id"+sogou_campaign_report_arr['cpc_plan_id'].to_s+"clicks"]
                                              sogou_report_hash["campaign_id"+sogou_campaign_report_arr['cpc_plan_id'].to_s+"clicks"] += sogou_campaign_report_arr['clicks'].to_i
                                          else
                                              sogou_report_hash["campaign_id"+sogou_campaign_report_arr['cpc_plan_id'].to_s+"clicks"] = sogou_campaign_report_arr['clicks'].to_i
                                          end
                                          
                                          if sogou_report_hash["campaign_id"+sogou_campaign_report_arr['cpc_plan_id'].to_s+"total_cost"]
                                              sogou_report_hash["campaign_id"+sogou_campaign_report_arr['cpc_plan_id'].to_s+"total_cost"] += sogou_campaign_report_arr['total_cost'].to_f
                                          else
                                              sogou_report_hash["campaign_id"+sogou_campaign_report_arr['cpc_plan_id'].to_s+"total_cost"] = sogou_campaign_report_arr['total_cost'].to_f
                                          end
                                          
                                          if sogou_report_hash["campaign_id"+sogou_campaign_report_arr['cpc_plan_id'].to_s+"avg_position"]
                                            
                                              if sogou_campaign_report_arr['display'].to_f > 0 && sogou_campaign_report_arr['avg_position'].to_f > 0
                                                  avg_pos = sogou_campaign_report_arr["avg_position"].to_f * sogou_campaign_report_arr["display"].to_f
                                                  sogou_report_hash["campaign_id"+sogou_campaign_report_arr['cpc_plan_id'].to_s+"avg_position"] += avg_pos.to_f
                                              end
                                              
                                          else
                                              sogou_report_hash["campaign_id"+sogou_campaign_report_arr['cpc_plan_id'].to_s+"avg_position"] = sogou_campaign_report_arr["avg_position"].to_f * sogou_campaign_report_arr["display"].to_f
                                          end
                                          
                                          
                                      end
                                  end
                          
                          
                              end
                          end 
                      
                      
                      
                      elsif job["network_type"].to_s == "360"
                        
                        
                          if arr.count.to_i > 0
                            
                              arr.each do |arr_d|
                                
                                  # @level_campaign_report = @db3[:report_campaign_360].find('cpc_plan_id' => { "$in" => arr_d}, 'report_date' => { '$gt' => @start_date.to_s, '$lt' => @end_date.to_s }, 'display' => { "$gt" => 0})
                                  # @db3.close()
                        
                                  
                                  
                                  @level_campaign_report = @db3[:report_campaign_360].find({ "$and" => [ {:cpc_plan_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @level_campaign_report.count.to_i > 0 
                                      @level_campaign_report.no_cursor_timeout.each do |three_sixty_campaign_report_arr|
                                        
                                          if threesixty_report_hash["campaign_id"+three_sixty_campaign_report_arr['cpc_plan_id'].to_s+"display"]
                                              threesixty_report_hash["campaign_id"+three_sixty_campaign_report_arr['cpc_plan_id'].to_s+"display"] += three_sixty_campaign_report_arr['display'].to_i
                                          else
                                              threesixty_report_hash["campaign_id"+three_sixty_campaign_report_arr['cpc_plan_id'].to_s+"display"] = three_sixty_campaign_report_arr['display'].to_i
                                          end
                                          
                                          if threesixty_report_hash["campaign_id"+three_sixty_campaign_report_arr['cpc_plan_id'].to_s+"clicks"]
                                              threesixty_report_hash["campaign_id"+three_sixty_campaign_report_arr['cpc_plan_id'].to_s+"clicks"] += three_sixty_campaign_report_arr['clicks'].to_i
                                          else
                                              threesixty_report_hash["campaign_id"+three_sixty_campaign_report_arr['cpc_plan_id'].to_s+"clicks"] = three_sixty_campaign_report_arr['clicks'].to_i
                                          end
                                          
                                          if threesixty_report_hash["campaign_id"+three_sixty_campaign_report_arr['cpc_plan_id'].to_s+"total_cost"]
                                              threesixty_report_hash["campaign_id"+three_sixty_campaign_report_arr['cpc_plan_id'].to_s+"total_cost"] += three_sixty_campaign_report_arr['total_cost'].to_f
                                          else
                                              threesixty_report_hash["campaign_id"+three_sixty_campaign_report_arr['cpc_plan_id'].to_s+"total_cost"] = three_sixty_campaign_report_arr['total_cost'].to_f
                                          end
                                          
                                          if threesixty_report_hash["campaign_id"+three_sixty_campaign_report_arr['cpc_plan_id'].to_s+"avg_position"]
                                              if three_sixty_campaign_report_arr['display'].to_f > 0 && three_sixty_campaign_report_arr['avg_position'].to_f
                                                  avg_pos = three_sixty_campaign_report_arr["avg_position"].to_f * three_sixty_campaign_report_arr["display"].to_f
                                                  threesixty_report_hash["campaign_id"+three_sixty_campaign_report_arr['cpc_plan_id'].to_s+"avg_position"] += avg_pos.to_f
                                              end
                                          else
                                              threesixty_report_hash["campaign_id"+three_sixty_campaign_report_arr['cpc_plan_id'].to_s+"avg_position"] = three_sixty_campaign_report_arr["avg_position"].to_f * three_sixty_campaign_report_arr["display"].to_f
                                          end
                                        
                                      end
                                  end
                          
                              end
                          end
                      end
                      
                      
                      
                      if arr.count.to_i > 0
                        
                          @all_conversion_business_type_hash = {}
                        
                          arr.each do |arr_d|
                            
                            
                              @all_conversion = @db2[:conversion].find.aggregate([ 
                                                       { '$match' => { "$and" => [ {:campaign_id => { "$in" => arr_d}}, {:network_type => job["network_type"].to_s}, {:date => { '$gt' => @start_date.to_s }}, {:date => { '$lt' => @end_date.to_s }} ] } },
                                                       { '$group' => { '_id' => {'campaign_id' => '$campaign_id',  'business_type' => '$business_type'}, 
                                                                       'count' => { '$sum' => 1 }, 'revenue' => { '$sum' => '$revenue' } } }
                                                  ])
                              @db2.close()
                              
                              if @all_conversion.count.to_i > 0 
                                  @all_conversion.each do |all_conversion_arr|
                                      # conversion_hash["campaign_id"+all_conversion_arr['_id'].to_s] = all_conversion_arr['count'].to_i
                                      # conversion_hash["campaign_id"+all_conversion_arr['_id'].to_s+"revenue"] = all_conversion_arr['revenue'].to_f
                                      
                                      
                                      if conversion_hash["campaign_id"+all_conversion_arr['_id']['campaign_id'].to_s].nil?
                                          conversion_hash["campaign_id"+all_conversion_arr['_id']['campaign_id'].to_s] = 0
                                      end
                                      
                                      if conversion_hash["campaign_id"+all_conversion_arr['_id']['campaign_id'].to_s+"revenue"].nil?
                                          conversion_hash["campaign_id"+all_conversion_arr['_id']['campaign_id'].to_s+"revenue"] = 0
                                      end
                                      
                                      conversion_hash["campaign_id"+all_conversion_arr['_id']['campaign_id'].to_s] = conversion_hash["campaign_id"+all_conversion_arr['_id']['campaign_id'].to_s] + all_conversion_arr['count'].to_i
                                      conversion_hash["campaign_id"+all_conversion_arr['_id']['campaign_id'].to_s+"revenue"] = conversion_hash["campaign_id"+all_conversion_arr['_id']['campaign_id'].to_s+"revenue"] + all_conversion_arr['revenue'].to_f
                                      
                                      
                                      
                                      if all_conversion_arr['_id']['business_type'] != ""
                                        
                                          if @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['campaign_id'].to_s].nil?
                                              @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['campaign_id'].to_s] = {}
                                          end
                                          
                                          @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['campaign_id'].to_s][all_conversion_arr['_id']['business_type']] = all_conversion_arr['count'].to_i
                                          @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['campaign_id'].to_s][all_conversion_arr['_id']['business_type']+"revenue"] = all_conversion_arr['revenue'].to_f
                                          
                                      end
                                      
                                      
                                  end
                              end
                          end
                          
                          
                          # user has set all the type in adeqo first
                          if @all_conversion_business_type.count.to_i > 0
                            
                              @all_conversion_business_type = @all_conversion_business_type.uniq
                              @all_conversion_business_type.sort_by(&:downcase)
                            
                              @all_conversion_business_type_hash.each do |all_conversion_business_type_hash_d_key,all_conversion_business_type_hash_d_value|
                                  
                                  modify_hash = {}
                                  
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                      
                                      if all_conversion_business_type_hash_d_value[all_conversion_business_type_d].nil?
                                          modify_hash[all_conversion_business_type_d] = 0
                                          modify_hash[all_conversion_business_type_d+"revenue"] = 0
                                      else
                                          modify_hash[all_conversion_business_type_d] = all_conversion_business_type_hash_d_value[all_conversion_business_type_d].round(2)
                                          modify_hash[all_conversion_business_type_d+"revenue"] = all_conversion_business_type_hash_d_value[all_conversion_business_type_d+"revenue"].round(2)
                                      end
                                  end
                                  
                                  
                                  @all_conversion_business_type_hash[all_conversion_business_type_hash_d_key] = modify_hash
                                  
                              end
                          end
                      end      
                  end
               
              else
                
                  db_name = apply_level+"_"+job["network_type"].to_s+"_"+job["network_id"].to_s
                  
                  if job["network_type"].to_s == "sogou"
                    
                      if @select_campaign.is_a?(Array) && @select_campaign.count.to_i > 0 && @select_adgroup.is_a?(Array) && @select_adgroup.count.to_i > 0
                          
                          @level_data = @sogou_db[db_name].find({ "$and" => [{:cpc_plan_id => { "$in" => @select_campaign}}, {:cpc_grp_id => { "$in" => @select_adgroup}}] })
                          @sogou_db.close()   
                      
                      elsif @select_campaign.is_a?(Array) && @select_campaign.count.to_i > 0 && @select_adgroup.is_a?(Array) && @select_adgroup.count.to_i == 0
                        
                          @level_data = @sogou_db[db_name].find(:cpc_plan_id => { "$in" => @select_campaign})
                          @sogou_db.close()
                      
                      elsif @select_campaign.is_a?(Array) && @select_campaign.count.to_i == 0 && @select_adgroup.is_a?(Array) && @select_adgroup.count.to_i > 0
                          
                          @level_data = @sogou_db[db_name].find(:cpc_grp_id => { "$in" => @select_adgroup})
                          @sogou_db.close()
                          
                      else
                          @level_data = @sogou_db[db_name].find()
                          @sogou_db.close()     
                      end
                    
                  elsif job["network_type"].to_s == "360"
                    
                      if @select_campaign.is_a?(Array) && @select_campaign.count.to_i > 0 && @select_adgroup.is_a?(Array) && @select_adgroup.count.to_i > 0
                        
                          @level_data = @threesixty_db[db_name].find({ "$and" => [{:campaign_id => { "$in" => @select_campaign}}, {:adgroup_id => { "$in" => @select_adgroup}}] })
                          @threesixty_db.close()
                          
                      elsif @select_campaign.is_a?(Array) && @select_campaign.count.to_i > 0 && @select_adgroup.is_a?(Array) && @select_adgroup.count.to_i == 0
                        
                          @level_data = @threesixty_db[db_name].find(:campaign_id => { "$in" => @select_campaign})
                          @threesixty_db.close()
                          
                      elsif @select_campaign.is_a?(Array) && @select_campaign.count.to_i == 0 && @select_adgroup.is_a?(Array) && @select_adgroup.count.to_i > 0
                          
                          @level_data = @threesixty_db[db_name].find(:adgroup_id => { "$in" => @select_adgroup})
                          @threesixty_db.close()
                      else
                        
                          @level_data = @threesixty_db[db_name].find()
                          @threesixty_db.close()
                        
                      end
                    
                      
                  elsif job["network_type"].to_s == "baidu"
                    
                      if @select_campaign.is_a?(Array) && @select_campaign.count.to_i > 0 && @select_adgroup.is_a?(Array) && @select_adgroup.count.to_i > 0
                      
                          @level_data = @baidu_db[db_name].find({ "$and" => [{:campaign_id => { "$in" => @select_campaign}}, {:adgroup_id => { "$in" => @select_adgroup}}] })
                          @baidu_db.close()
                      
                      elsif @select_campaign.is_a?(Array) && @select_campaign.count.to_i > 0 && @select_adgroup.is_a?(Array) && @select_adgroup.count.to_i == 0
                        
                          @level_data = @baidu_db[db_name].find(:campaign_id => { "$in" => @select_campaign})
                          @baidu_db.close()
                          
                      elsif @select_campaign.is_a?(Array) && @select_campaign.count.to_i == 0 && @select_adgroup.is_a?(Array) && @select_adgroup.count.to_i > 0
                          
                          @level_data = @baidu_db[db_name].find(:adgroup_id => { "$in" => @select_adgroup})
                          @baidu_db.close()
                      
                      else
                        
                          @level_data = @baidu_db[db_name].find()
                          @baidu_db.close()
                          
                      end
                 
                  elsif job["network_type"].to_s == "shenma"
                    
                      if @select_campaign.is_a?(Array) && @select_campaign.count.to_i > 0 && @select_adgroup.is_a?(Array) && @select_adgroup.count.to_i > 0
                      
                          @level_data = @baidu_db[db_name].find({ "$and" => [{:campaign_id => { "$in" => @select_campaign}}, {:adgroup_id => { "$in" => @select_adgroup}}] })
                          @baidu_db.close()
                      
                      elsif @select_campaign.is_a?(Array) && @select_campaign.count.to_i > 0 && @select_adgroup.is_a?(Array) && @select_adgroup.count.to_i == 0
                        
                          @level_data = @baidu_db[db_name].find(:campaign_id => { "$in" => @select_campaign})
                          @baidu_db.close()
                          
                      elsif @select_campaign.is_a?(Array) && @select_campaign.count.to_i == 0 && @select_adgroup.is_a?(Array) && @select_adgroup.count.to_i > 0
                          
                          @level_data = @baidu_db[db_name].find(:adgroup_id => { "$in" => @select_adgroup})
                          @baidu_db.close()
                      
                      else
                        
                          @level_data = @baidu_db[db_name].find()
                          @baidu_db.close()
                          
                      end
                    
                  end
                  
                  
                  if job["apply_level"].to_s == "Ad Groups"
                    
                      total_array = 1
                      array_limit = 400000
                      
                      campaign_arr = []
                      campaign_name_hash = {}
                      
                      
                      if job["network_type"].to_s == "shenma"
                        
                          @level_data.no_cursor_timeout.each do |adgroup_count_d|
                              arr << adgroup_count_d["adgroup_id"]  
                              campaign_arr << adgroup_count_d["campaign_id"]
                          end
                          
                          if campaign_arr.count.to_i > 0
                              campaign_arr = campaign_arr.uniq
                              
                              @campaign = @db["all_campaign"].find('campaign_id' => { "$in" => campaign_arr})
                              @db.close
                              @campaign.no_cursor_timeout.each do |campaign|
                                  campaign_name_hash["campaign_id"+campaign['campaign_id'].to_s+"campaign_name"] = campaign["campaign_name"]
                              end
                          end
                          
                          
                          if arr.count.to_i > 0
                            
                              total_array = arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              arr = arr.in_groups(total_array)
                            
                              arr.each do |arr_d|
                          
                                  @level_report_adgroup = @db3[:shenma_report_adgroup].find({ "$and" => [ {:adgroup_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @level_report_adgroup.count.to_i > 0
                                      @level_report_adgroup.no_cursor_timeout.each do |shenma_report_adgroup|
                                          
                                          if shenma_report_hash["adgroup_id"+shenma_report_adgroup['adgroup_id'].to_s+"display"]
                                              shenma_report_hash["adgroup_id"+shenma_report_adgroup['adgroup_id'].to_s+"display"] += shenma_report_adgroup['display'].to_i
                                          else
                                              shenma_report_hash["adgroup_id"+shenma_report_adgroup['adgroup_id'].to_s+"display"] = shenma_report_adgroup['display'].to_i
                                          end
                                          
                                          if shenma_report_hash["adgroup_id"+shenma_report_adgroup['adgroup_id'].to_s+"clicks"]
                                              shenma_report_hash["adgroup_id"+shenma_report_adgroup['adgroup_id'].to_s+"clicks"] += shenma_report_adgroup['clicks'].to_i
                                          else
                                              shenma_report_hash["adgroup_id"+shenma_report_adgroup['adgroup_id'].to_s+"clicks"] = shenma_report_adgroup['clicks'].to_i
                                          end
                                          
                                          if shenma_report_hash["adgroup_id"+shenma_report_adgroup['adgroup_id'].to_s+"total_cost"]
                                              shenma_report_hash["adgroup_id"+shenma_report_adgroup['adgroup_id'].to_s+"total_cost"] += shenma_report_adgroup['total_cost'].to_f
                                          else
                                              shenma_report_hash["adgroup_id"+shenma_report_adgroup['adgroup_id'].to_s+"total_cost"] = shenma_report_adgroup['total_cost'].to_f
                                          end
                                          
                                          
                                          if shenma_report_hash["adgroup_id"+shenma_report_adgroup['adgroup_id'].to_s+"avg_position"]
                                            
                                              if shenma_report_adgroup['display'].to_f > 0 && shenma_report_adgroup['avg_position'].to_f > 0
                                                  avg_pos = shenma_report_adgroup["avg_position"].to_f * shenma_report_adgroup["display"].to_f 
                                                  shenma_report_hash["adgroup_id"+shenma_report_adgroup['adgroup_id'].to_s+"avg_position"] += avg_pos.to_f
                                              end
                                          else
                                              shenma_report_hash["adgroup_id"+shenma_report_adgroup['adgroup_id'].to_s+"avg_position"] = shenma_report_adgroup['avg_position'].to_f * shenma_report_adgroup['display'].to_i
                                          end
                                          
                                      end
                                  end
                          
                              end
                          end
                        
                      elsif job["network_type"].to_s == "baidu"
                        
                          @level_data.no_cursor_timeout.each do |adgroup_count_d|
                              arr << adgroup_count_d["adgroup_id"]  
                              campaign_arr << adgroup_count_d["campaign_id"]
                          end
                          
                          if campaign_arr.count.to_i > 0
                              campaign_arr = campaign_arr.uniq
                              
                              @campaign = @db["all_campaign"].find('campaign_id' => { "$in" => campaign_arr})
                              @db.close
                              @campaign.no_cursor_timeout.each do |campaign|
                                  campaign_name_hash["campaign_id"+campaign['campaign_id'].to_s+"campaign_name"] = campaign["campaign_name"]
                              end
                          end
                          
                          
                          if arr.count.to_i > 0
                            
                              total_array = arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              arr = arr.in_groups(total_array)
                            
                              arr.each do |arr_d|
                                
                                  # @level_report_adgroup = @db3[:baidu_report_adgroup].find('cpc_grp_id' => { "$in" => arr_d}, 'report_date' => { '$gt' => @start_date.to_s, '$lt' => @end_date.to_s }, 'display' => { "$gt" => 0})
                                  # @db3.close()
                                
                                  
                          
                                  @level_report_adgroup = @db3[:baidu_report_adgroup].find({ "$and" => [ {:cpc_grp_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @level_report_adgroup.count.to_i > 0
                                      @level_report_adgroup.no_cursor_timeout.each do |baidu_report_adgroup|
                                          
                                          if baidu_report_hash["adgroup_id"+baidu_report_adgroup['cpc_grp_id'].to_s+"display"]
                                              baidu_report_hash["adgroup_id"+baidu_report_adgroup['cpc_grp_id'].to_s+"display"] += baidu_report_adgroup['display'].to_i
                                          else
                                              baidu_report_hash["adgroup_id"+baidu_report_adgroup['cpc_grp_id'].to_s+"display"] = baidu_report_adgroup['display'].to_i
                                          end
                                          
                                          if baidu_report_hash["adgroup_id"+baidu_report_adgroup['cpc_grp_id'].to_s+"clicks"]
                                              baidu_report_hash["adgroup_id"+baidu_report_adgroup['cpc_grp_id'].to_s+"clicks"] += baidu_report_adgroup['clicks'].to_i
                                          else
                                              baidu_report_hash["adgroup_id"+baidu_report_adgroup['cpc_grp_id'].to_s+"clicks"] = baidu_report_adgroup['clicks'].to_i
                                          end
                                          
                                          if baidu_report_hash["adgroup_id"+baidu_report_adgroup['cpc_grp_id'].to_s+"total_cost"]
                                              baidu_report_hash["adgroup_id"+baidu_report_adgroup['cpc_grp_id'].to_s+"total_cost"] += baidu_report_adgroup['total_cost'].to_f
                                          else
                                              baidu_report_hash["adgroup_id"+baidu_report_adgroup['cpc_grp_id'].to_s+"total_cost"] = baidu_report_adgroup['total_cost'].to_f
                                          end
                                          
                                          
                                          if baidu_report_hash["adgroup_id"+baidu_report_adgroup['cpc_grp_id'].to_s+"avg_position"]
                                            
                                              if baidu_report_adgroup['display'].to_f > 0 && baidu_report_adgroup['avg_position'].to_f > 0
                                                  avg_pos = baidu_report_adgroup["avg_position"].to_f * baidu_report_adgroup["display"].to_f 
                                                  baidu_report_hash["adgroup_id"+baidu_report_adgroup['cpc_grp_id'].to_s+"avg_position"] += avg_pos.to_f
                                              end
                                          else
                                              baidu_report_hash["adgroup_id"+baidu_report_adgroup['cpc_grp_id'].to_s+"avg_position"] = baidu_report_adgroup['avg_position'].to_f * baidu_report_adgroup['display'].to_i
                                          end
                                          
                                      end
                                  end
                          
                              end
                          end
                          
                          
                          
                      elsif job["network_type"].to_s == "sogou"
                          
                          @level_data.no_cursor_timeout.each do |adgroup_count_d|
                              arr << adgroup_count_d["cpc_grp_id"]  
                              campaign_arr << adgroup_count_d["cpc_plan_id"]
                          end
                          
                          if campaign_arr.count.to_i > 0
                              
                              campaign_arr = campaign_arr.uniq
                              
                              @campaign = @db["all_campaign"].find('cpc_plan_id' => { "$in" => campaign_arr})
                              @db.close
                              @campaign.no_cursor_timeout.each do |campaign|
                                  campaign_name_hash["campaign_id"+campaign['cpc_plan_id'].to_s+"campaign_name"] = campaign["campaign_name"]
                              end
                          end
                          
                          if arr.count.to_i > 0
                            
                              total_array = arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              arr = arr.in_groups(total_array)
                            
                              arr.each do |arr_d|
                                
                                  # @level_report_adgroup = @db3[:sogou_report_adgroup].find('cpc_grp_id' => { "$in" => arr_d}, 'report_date' => { '$gt' => @start_date.to_s, '$lt' => @end_date.to_s }, 'display' => { "$gt" => 0})
                                  # @db3.close()
                                  
                                  
                                  @level_report_adgroup = @db3[:sogou_report_adgroup].find({ "$and" => [ {:cpc_grp_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @level_report_adgroup.count.to_i > 0
                                      @level_report_adgroup.no_cursor_timeout.each do |sogou_report_adgroup|
                                          
                                          if sogou_report_hash["adgroup_id"+sogou_report_adgroup['cpc_grp_id'].to_s+"display"]
                                              sogou_report_hash["adgroup_id"+sogou_report_adgroup['cpc_grp_id'].to_s+"display"] += sogou_report_adgroup['display'].to_i
                                          else
                                              sogou_report_hash["adgroup_id"+sogou_report_adgroup['cpc_grp_id'].to_s+"display"] = sogou_report_adgroup['display'].to_i
                                          end
                                          
                                          if sogou_report_hash["adgroup_id"+sogou_report_adgroup['cpc_grp_id'].to_s+"clicks"]
                                              sogou_report_hash["adgroup_id"+sogou_report_adgroup['cpc_grp_id'].to_s+"clicks"] += sogou_report_adgroup['clicks'].to_i
                                          else
                                              sogou_report_hash["adgroup_id"+sogou_report_adgroup['cpc_grp_id'].to_s+"clicks"] = sogou_report_adgroup['clicks'].to_i
                                          end
                                          
                                          if sogou_report_hash["adgroup_id"+sogou_report_adgroup['cpc_grp_id'].to_s+"total_cost"]
                                              sogou_report_hash["adgroup_id"+sogou_report_adgroup['cpc_grp_id'].to_s+"total_cost"] += sogou_report_adgroup['total_cost'].to_f
                                          else
                                              sogou_report_hash["adgroup_id"+sogou_report_adgroup['cpc_grp_id'].to_s+"total_cost"] = sogou_report_adgroup['total_cost'].to_f
                                          end
                                          
                                          
                                          if sogou_report_hash["adgroup_id"+sogou_report_adgroup['cpc_grp_id'].to_s+"avg_position"]
                                            
                                              if sogou_report_adgroup['display'].to_f > 0 && sogou_report_adgroup['avg_position'].to_f > 0
                                                  avg_pos = sogou_report_adgroup["avg_position"].to_f * sogou_report_adgroup["display"].to_f 
                                                  sogou_report_hash["adgroup_id"+sogou_report_adgroup['cpc_grp_id'].to_s+"avg_position"] += avg_pos.to_f
                                              end
                                          else
                                              sogou_report_hash["adgroup_id"+sogou_report_adgroup['cpc_grp_id'].to_s+"avg_position"] = sogou_report_adgroup['avg_position'].to_f * sogou_report_adgroup['display'].to_i
                                          end
                                          
                                      end
                                  end
                          
                              end
                          end
                      
                      
                      
                      elsif job["network_type"].to_s == "360"
                        
                          @level_data.no_cursor_timeout.each do |adgroup_count_d|
                              arr << adgroup_count_d["adgroup_id"]
                              campaign_arr << adgroup_count_d["campaign_id"]  
                          end
                          
                          if campaign_arr.count.to_i > 0
                              
                              campaign_arr = campaign_arr.uniq
                              
                              @campaign = @db["all_campaign"].find('campaign_id' => { "$in" => campaign_arr})
                              @db.close
                              @campaign.no_cursor_timeout.each do |campaign|
                                  campaign_name_hash["campaign_id"+campaign['campaign_id'].to_s+"campaign_name"] = campaign["campaign_name"]
                              end
                          end
                          
                          
                          if arr.count.to_i > 0
                            
                              total_array = arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              arr = arr.in_groups(total_array)
                            
                              arr.each do |arr_d|
                                
                                  # @level_report_adgroup = @db3[:report_adgroup_360].find('cpc_grp_id' => { "$in" => arr_d}, 'report_date' => { '$gt' => @start_date.to_s, '$lt' => @end_date.to_s }, 'display' => { "$gt" => 0})
                                  # @db3.close()
                                  
                                  @level_report_adgroup = @db3[:report_adgroup_360].find({ "$and" => [ {:cpc_grp_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @level_report_adgroup.count.to_i > 0
                                      @level_report_adgroup.no_cursor_timeout.each do |report_adgroup_360|
                                      
                                          if threesixty_report_hash["adgroup_id"+report_adgroup_360['cpc_grp_id'].to_s+"display"]
                                              threesixty_report_hash["adgroup_id"+report_adgroup_360['cpc_grp_id'].to_s+"display"] += report_adgroup_360['display'].to_i
                                          else
                                              threesixty_report_hash["adgroup_id"+report_adgroup_360['cpc_grp_id'].to_s+"display"] = report_adgroup_360['display'].to_i
                                          end
                                          
                                          if threesixty_report_hash["adgroup_id"+report_adgroup_360['cpc_grp_id'].to_s+"clicks"]
                                              threesixty_report_hash["adgroup_id"+report_adgroup_360['cpc_grp_id'].to_s+"clicks"] += report_adgroup_360['clicks'].to_i
                                          else
                                              threesixty_report_hash["adgroup_id"+report_adgroup_360['cpc_grp_id'].to_s+"clicks"] = report_adgroup_360['clicks'].to_i
                                          end
                                          
                                          if threesixty_report_hash["adgroup_id"+report_adgroup_360['cpc_grp_id'].to_s+"total_cost"]
                                              threesixty_report_hash["adgroup_id"+report_adgroup_360['cpc_grp_id'].to_s+"total_cost"] += report_adgroup_360['total_cost'].to_f
                                          else
                                              threesixty_report_hash["adgroup_id"+report_adgroup_360['cpc_grp_id'].to_s+"total_cost"] = report_adgroup_360['total_cost'].to_f
                                          end
                                          
                                          if threesixty_report_hash["adgroup_id"+report_adgroup_360['cpc_grp_id'].to_s+"avg_position"]
                                            
                                              if report_adgroup_360['display'].to_f > 0 && report_adgroup_360['avg_position'].to_f > 0
                                                  avg_pos = report_adgroup_360["avg_position"].to_f * report_adgroup_360["display"].to_f
                                                  threesixty_report_hash["adgroup_id"+report_adgroup_360['cpc_grp_id'].to_s+"avg_position"] += avg_pos.to_f
                                              end
                                              
                                          else
                                              threesixty_report_hash["adgroup_id"+report_adgroup_360['cpc_grp_id'].to_s+"avg_position"] = report_adgroup_360["avg_position"].to_f * report_adgroup_360["display"].to_f
                                          end
                                      
                                      end
                                  end
                              end
                          end
                      end
                      
                      
                      if arr.count.to_i > 0
                        
                          @all_conversion_business_type_hash = {}
                          
                          arr.each do |arr_d|
                            
                              @all_conversion = @db2[:conversion].find.aggregate([ 
                                               { '$match' => { "$and" => [ {:adgroup_id => { "$in" => arr_d}}, {:network_type => job["network_type"].to_s}, {:date => { '$gt' => @start_date.to_s }}, {:date => { '$lt' => @end_date.to_s }} ] } },
                                               { '$group' => { '_id' => {'adgroup_id' => '$adgroup_id',  'business_type' => '$business_type'}, 
                                                               'count' => { '$sum' => 1 }, 'revenue' => { '$sum' => "$revenue" } } }
                                                  ])
                              @db2.close()
                              
                              
                              if @all_conversion.count.to_i > 0 
                                  @all_conversion.each do |all_conversion_arr|
                                    
                                      if conversion_hash["adgroup_id"+all_conversion_arr['_id']['adgroup_id'].to_s].nil?
                                          conversion_hash["adgroup_id"+all_conversion_arr['_id']['adgroup_id'].to_s] = 0
                                      end
                                      
                                      if conversion_hash["adgroup_id"+all_conversion_arr['_id']['adgroup_id'].to_s+"revenue"].nil?
                                          conversion_hash["adgroup_id"+all_conversion_arr['_id']['adgroup_id'].to_s+"revenue"] = 0
                                      end
                                      
                                      conversion_hash["adgroup_id"+all_conversion_arr['_id']['adgroup_id'].to_s] = conversion_hash["adgroup_id"+all_conversion_arr['_id']['adgroup_id'].to_s] + all_conversion_arr['count'].to_i
                                      conversion_hash["adgroup_id"+all_conversion_arr['_id']['adgroup_id'].to_s+"revenue"] = conversion_hash["adgroup_id"+all_conversion_arr['_id']['adgroup_id'].to_s+"revenue"] + all_conversion_arr['revenue'].to_f
                
                                      
                                      if all_conversion_arr['_id']['business_type'] != ""
                                
                                          if @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['adgroup_id'].to_s].nil?
                                              @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['adgroup_id'].to_s] = {}
                                          end
                                          
                                          @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['adgroup_id'].to_s][all_conversion_arr['_id']['business_type']] = all_conversion_arr['count'].to_i
                                          @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['adgroup_id'].to_s][all_conversion_arr['_id']['business_type']+"revenue"] = all_conversion_arr['revenue'].to_f
                                          
                                      end
                                    
                                    
                                      # conversion_hash["adgroup_id"+all_conversion_arr['_id'].to_s] = all_conversion_arr['count'].to_i
                                      # conversion_hash["adgroup_id"+all_conversion_arr['_id'].to_s+"revenue"] = all_conversion_arr['revenue'].to_f
                                  end
                              end
                          end
                          
                          
                          # user has set all the type in adeqo first
                          if @all_conversion_business_type.count.to_i > 0
                            
                              @all_conversion_business_type = @all_conversion_business_type.uniq
                              @all_conversion_business_type.sort_by(&:downcase)
                            
                              @all_conversion_business_type_hash.each do |all_conversion_business_type_hash_d_key,all_conversion_business_type_hash_d_value|
                                  
                                  modify_hash = {}
                                  
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                      
                                      if all_conversion_business_type_hash_d_value[all_conversion_business_type_d].nil?
                                          modify_hash[all_conversion_business_type_d] = 0
                                          modify_hash[all_conversion_business_type_d+"revenue"] = 0
                                      else
                                          modify_hash[all_conversion_business_type_d] = all_conversion_business_type_hash_d_value[all_conversion_business_type_d].round(2)
                                          modify_hash[all_conversion_business_type_d+"revenue"] = all_conversion_business_type_hash_d_value[all_conversion_business_type_d+"revenue"].round(2)
                                      end
                                  end
                                  
                                  
                                  @all_conversion_business_type_hash[all_conversion_business_type_hash_d_key] = modify_hash
                                  
                              end
                          end
                          
                          
                      end
                      
                  
                  
                  
                  
                  elsif job["apply_level"].to_s == "Ads"
                  
                      adg_arr = []
                      adgroup_name_hash = {}
                      adgroup_price_hash = {}
                      
                      campaign_arr = []
                      campaign_name_hash = {}
                      
                      total_array = 1
                      array_limit = 400000
                      
                      
                      
                      if job["network_type"].to_s == "shenma"
                        
                          @level_data.no_cursor_timeout.each do |ad_count|
                              arr << ad_count["ad_id"]  
                              adg_arr << ad_count["adgroup_id"]
                              campaign_arr << ad_count["campaign_id"]
                          end
                          
                          adg_arr = adg_arr.uniq
                          
                          
                          if arr.count.to_i > 0
                            
                              total_array = arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              arr = arr.in_groups(total_array)
                            
                              arr.each do |arr_d|
                                
                                  # @baidu_report_ad = @db3[:baidu_report_ad].find('ad_id' => { "$in" => arr_d}, 'report_date' => { '$gt' => @start_date.to_s, '$lt' => @end_date.to_s }, 'display' => { "$gt" => 0})
                                  # @db3.close()
                          
                                  
                                  
                                  @shenma_report_ad = @db3[:shenma_report_ad].find({ "$and" => [ {:ad_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @shenma_report_ad.count.to_i > 0
                                      @shenma_report_ad.no_cursor_timeout.each do |shenma_report_ad|
                                          
                                          if shenma_report_hash["ad_id"+shenma_report_ad['ad_id'].to_s+"display"]
                                              shenma_report_hash["ad_id"+shenma_report_ad['ad_id'].to_s+"display"] += shenma_report_ad['display'].to_i
                                          else
                                              shenma_report_hash["ad_id"+shenma_report_ad['ad_id'].to_s+"display"] = shenma_report_ad['display'].to_i
                                          end
                                          
                                          if shenma_report_hash["ad_id"+shenma_report_ad['ad_id'].to_s+"clicks"]
                                              shenma_report_hash["ad_id"+shenma_report_ad['ad_id'].to_s+"clicks"] += shenma_report_ad['clicks'].to_i
                                          else
                                              shenma_report_hash["ad_id"+shenma_report_ad['ad_id'].to_s+"clicks"] = shenma_report_ad['clicks'].to_i
                                          end
                                          
                                          if shenma_report_hash["ad_id"+shenma_report_ad['ad_id'].to_s+"total_cost"]
                                              shenma_report_hash["ad_id"+shenma_report_ad['ad_id'].to_s+"total_cost"] += shenma_report_ad['total_cost'].to_f
                                          else
                                              shenma_report_hash["ad_id"+shenma_report_ad['ad_id'].to_s+"total_cost"] = shenma_report_ad['total_cost'].to_f
                                          end
                                          
                                          if shenma_report_hash["ad_id"+shenma_report_ad['ad_id'].to_s+"avg_position"]
                                            
                                              if shenma_report_ad['display'].to_f > 0 && shenma_report_ad['avg_position'].to_f > 0
                                                  avg_pos = shenma_report_ad["avg_position"].to_f * shenma_report_ad["display"].to_f
                                                  shenma_report_hash["ad_id"+shenma_report_ad['ad_id'].to_s+"avg_position"] += avg_pos.to_f
                                              end
                                              
                                          else
                                              shenma_report_hash["ad_id"+shenma_report_ad['ad_id'].to_s+"avg_position"] = shenma_report_ad['avg_position'].to_f * shenma_report_ad['display'].to_f
                                          end
                                          
                                      end
                                  end
                          
                              end
                          end

                          if adg_arr.count.to_i > 0
                            
                              total_array = adg_arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              adg_arr = adg_arr.in_groups(total_array)
                              
                              
                              adg_arr.each do |adg_arr_d|
                                  
                                  db_name = "adgroup_shenma_"+job["network_id"].to_s
                                  @shenma_adgroup = @baidu_db[db_name].find('adgroup_id' => { "$in" => adg_arr_d}) 
                                  @baidu_db.close()
                                  
                                  if @shenma_adgroup.count.to_i != 0
                                      @shenma_adgroup.no_cursor_timeout.each do |adgroup|
                                          adgroup_name_hash["adgroup_id"+adgroup['adgroup_id'].to_s+"adgroup_name"] = adgroup["adgroup_name"]
                                          adgroup_price_hash["adgroup_id"+adgroup['adgroup_id'].to_s+"price"] = adgroup["max_price"]
                                      end
                                  end
                              
                              end
                          end    
                                   
                      
                          if campaign_arr.count.to_i > 0
                              
                              campaign_arr = campaign_arr.uniq
                              
                              @campaign = @db["all_campaign"].find('campaign_id' => { "$in" => campaign_arr})
                              @db.close
                              @campaign.no_cursor_timeout.each do |campaign|
                                  campaign_name_hash["campaign_id"+campaign['campaign_id'].to_s+"campaign_name"] = campaign["campaign_name"]
                              end
                          end
                        
                      elsif job["network_type"].to_s == "baidu"
                        
                          @level_data.no_cursor_timeout.each do |ad_count|
                              arr << ad_count["ad_id"]  
                              adg_arr << ad_count["adgroup_id"]
                              campaign_arr << ad_count["campaign_id"]
                          end
                          
                          adg_arr = adg_arr.uniq
                          
                          
                          if arr.count.to_i > 0
                            
                              total_array = arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              arr = arr.in_groups(total_array)
                            
                              arr.each do |arr_d|
                                
                                  # @baidu_report_ad = @db3[:baidu_report_ad].find('ad_id' => { "$in" => arr_d}, 'report_date' => { '$gt' => @start_date.to_s, '$lt' => @end_date.to_s }, 'display' => { "$gt" => 0})
                                  # @db3.close()
                          
                                  
                                  
                                  @baidu_report_ad = @db3[:baidu_report_ad].find({ "$and" => [ {:ad_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @baidu_report_ad.count.to_i > 0
                                      @baidu_report_ad.no_cursor_timeout.each do |baidu_report_ad|
                                          
                                          if baidu_report_hash["ad_id"+baidu_report_ad['ad_id'].to_s+"display"]
                                              baidu_report_hash["ad_id"+baidu_report_ad['ad_id'].to_s+"display"] += baidu_report_ad['display'].to_i
                                          else
                                              baidu_report_hash["ad_id"+baidu_report_ad['ad_id'].to_s+"display"] = baidu_report_ad['display'].to_i
                                          end
                                          
                                          if baidu_report_hash["ad_id"+baidu_report_ad['ad_id'].to_s+"clicks"]
                                              baidu_report_hash["ad_id"+baidu_report_ad['ad_id'].to_s+"clicks"] += baidu_report_ad['clicks'].to_i
                                          else
                                              baidu_report_hash["ad_id"+baidu_report_ad['ad_id'].to_s+"clicks"] = baidu_report_ad['clicks'].to_i
                                          end
                                          
                                          if baidu_report_hash["ad_id"+baidu_report_ad['ad_id'].to_s+"total_cost"]
                                              baidu_report_hash["ad_id"+baidu_report_ad['ad_id'].to_s+"total_cost"] += baidu_report_ad['total_cost'].to_f
                                          else
                                              baidu_report_hash["ad_id"+baidu_report_ad['ad_id'].to_s+"total_cost"] = baidu_report_ad['total_cost'].to_f
                                          end
                                          
                                          if baidu_report_hash["ad_id"+baidu_report_ad['ad_id'].to_s+"avg_position"]
                                            
                                              if baidu_report_ad['display'].to_f > 0 && baidu_report_ad['avg_position'].to_f > 0
                                                  avg_pos = baidu_report_ad["avg_position"].to_f * baidu_report_ad["display"].to_f
                                                  baidu_report_hash["ad_id"+baidu_report_ad['ad_id'].to_s+"avg_position"] += avg_pos.to_f
                                              end
                                              
                                          else
                                              baidu_report_hash["ad_id"+baidu_report_ad['ad_id'].to_s+"avg_position"] = baidu_report_ad['avg_position'].to_f * baidu_report_ad['display'].to_f
                                          end
                                          
                                      end
                                  end
                          
                              end
                          end

                          if adg_arr.count.to_i > 0
                            
                              total_array = adg_arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              adg_arr = adg_arr.in_groups(total_array)
                              
                              
                              adg_arr.each do |adg_arr_d|
                                  
                                  db_name = "adgroup_baidu_"+job["network_id"].to_s
                                  @baidu_adgroup = @baidu_db[db_name].find('adgroup_id' => { "$in" => adg_arr_d}) 
                                  @baidu_db.close()
                                  
                                  if @baidu_adgroup.count.to_i != 0
                                      @baidu_adgroup.no_cursor_timeout.each do |adgroup|
                                          adgroup_name_hash["adgroup_id"+adgroup['adgroup_id'].to_s+"adgroup_name"] = adgroup["name"]
                                          adgroup_price_hash["adgroup_id"+adgroup['adgroup_id'].to_s+"price"] = adgroup["max_price"]
                                      end
                                  end
                              
                              end
                          end    
                                   
                      
                          if campaign_arr.count.to_i > 0
                              
                              campaign_arr = campaign_arr.uniq
                              
                              @campaign = @db["all_campaign"].find('campaign_id' => { "$in" => campaign_arr})
                              @db.close
                              @campaign.no_cursor_timeout.each do |campaign|
                                  campaign_name_hash["campaign_id"+campaign['campaign_id'].to_s+"campaign_name"] = campaign["campaign_name"]
                              end
                          end
                        
                        
                      elsif job["network_type"].to_s == "sogou"
                        
                          @level_data.no_cursor_timeout.each do |ad_count|
                              arr << ad_count["cpc_idea_id"]  
                              adg_arr << ad_count["cpc_grp_id"]
                              campaign_arr << ad_count["cpc_plan_id"]
                          end
                          
                          adg_arr = adg_arr.uniq
                          
                          if arr.count.to_i > 0
                            
                              total_array = arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              arr = arr.in_groups(total_array)
                            
                              arr.each do |arr_d|
                                
                                  # @sogou_report_ad = @db3[:sogou_report_ad].find('ad_id' => { "$in" => arr_d}, 'report_date' => { '$gt' => @start_date.to_s, '$lt' => @end_date.to_s }, 'display' => { "$gt" => 0})
                                  # @db3.close()
                                
                                  
                          
                                  @sogou_report_ad = @db3[:sogou_report_ad].find({ "$and" => [ {:ad_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @sogou_report_ad.count.to_i > 0
                                      @sogou_report_ad.no_cursor_timeout.each do |sogou_report_ad|
                                          
                                          if sogou_report_hash["ad_id"+sogou_report_ad['ad_id'].to_s+"display"]
                                              sogou_report_hash["ad_id"+sogou_report_ad['ad_id'].to_s+"display"] += sogou_report_ad['display'].to_i
                                          else
                                              sogou_report_hash["ad_id"+sogou_report_ad['ad_id'].to_s+"display"] = sogou_report_ad['display'].to_i
                                          end
                                          
                                          if sogou_report_hash["ad_id"+sogou_report_ad['ad_id'].to_s+"clicks"]
                                              sogou_report_hash["ad_id"+sogou_report_ad['ad_id'].to_s+"clicks"] += sogou_report_ad['clicks'].to_i
                                          else
                                              sogou_report_hash["ad_id"+sogou_report_ad['ad_id'].to_s+"clicks"] = sogou_report_ad['clicks'].to_i
                                          end
                                          
                                          if sogou_report_hash["ad_id"+sogou_report_ad['ad_id'].to_s+"total_cost"]
                                              sogou_report_hash["ad_id"+sogou_report_ad['ad_id'].to_s+"total_cost"] += sogou_report_ad['total_cost'].to_f
                                          else
                                              sogou_report_hash["ad_id"+sogou_report_ad['ad_id'].to_s+"total_cost"] = sogou_report_ad['total_cost'].to_f
                                          end
                                          
                                          if sogou_report_hash["ad_id"+sogou_report_ad['ad_id'].to_s+"avg_position"]
                                            
                                              if sogou_report_ad['display'].to_f > 0 && sogou_report_ad['avg_position'].to_f > 0
                                                  avg_pos = sogou_report_ad["avg_position"].to_f * sogou_report_ad["display"].to_f
                                                  sogou_report_hash["ad_id"+sogou_report_ad['ad_id'].to_s+"avg_position"] += avg_pos.to_f
                                              end
                                              
                                          else
                                              sogou_report_hash["ad_id"+sogou_report_ad['ad_id'].to_s+"avg_position"] = sogou_report_ad['avg_position'].to_f * sogou_report_ad['display'].to_f
                                          end
                                          
                                      end
                                  end
                          
                              end
                          end

                          if adg_arr.count.to_i > 0
                            
                              total_array = adg_arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              adg_arr = adg_arr.in_groups(total_array)
                              
                              adg_arr.each do |adg_arr_d|
                              
                                  db_name = "adgroup_sogou_"+job["network_id"].to_s
                                  @sogou_adgroup = @sogou_db[db_name].find('cpc_grp_id' => { "$in" => adg_arr_d}) 
                                  @sogou_db.close()
                                  
                                  if @sogou_adgroup.count.to_i != 0
                                      @sogou_adgroup.no_cursor_timeout.each do |adgroup|
                                          adgroup_name_hash["adgroup_id"+adgroup['cpc_grp_id'].to_s+"adgroup_name"] = adgroup["name"]
                                          adgroup_price_hash["adgroup_id"+adgroup['cpc_grp_id'].to_s+"price"] = adgroup["max_price"]
                                      end
                                  end
                              
                              end
                          end    
                                   
                      
                          if campaign_arr.count.to_i > 0
                              
                              campaign_arr = campaign_arr.uniq
                              
                              @campaign = @db["all_campaign"].find('cpc_plan_id' => { "$in" => campaign_arr})
                              @db.close
                              @campaign.no_cursor_timeout.each do |campaign|
                                  campaign_name_hash["campaign_id"+campaign['cpc_plan_id'].to_s+"campaign_name"] = campaign["campaign_name"]
                              end
                          end
                      
                      
                      elsif job["network_type"].to_s == "360"
                        
                          @level_data.no_cursor_timeout.each do |ad_count|
                              arr << ad_count["ad_id"]  
                              adg_arr << ad_count["adgroup_id"]
                              campaign_arr << ad_count["campaign_id"]
                          end
                          
                          adg_arr = adg_arr.uniq
                          
                          if arr.count.to_i > 0
                            
                              total_array = arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              arr = arr.in_groups(total_array)
                            
                              arr.each do |arr_d|
                                
                                  # @report_ad_360 = @db3[:report_ad_360].find('ad_id' => { "$in" => arr_d}, 'report_date' => { '$gt' => @start_date.to_s, '$lt' => @end_date.to_s }, 'views' => { "$gt" => 0})
                                  # @db.close
                                
                                  
                          
                                  @report_ad_360 = @db3[:report_ad_360].find({ "$and" => [ {:ad_id => { "$in" => arr_d}}, {:views => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @report_ad_360.count.to_i > 0
                                      @report_ad_360.no_cursor_timeout.each do |report_ad_360|
                                      
                                          if threesixty_report_hash["ad_id"+report_ad_360['ad_id'].to_s+"views"]
                                              threesixty_report_hash["ad_id"+report_ad_360['ad_id'].to_s+"views"] += report_ad_360['views'].to_i
                                          else
                                              threesixty_report_hash["ad_id"+report_ad_360['ad_id'].to_s+"views"] = report_ad_360['views'].to_i
                                          end
                                          
                                          
                                          if threesixty_report_hash["ad_id"+report_ad_360['ad_id'].to_s+"clicks"]
                                              threesixty_report_hash["ad_id"+report_ad_360['ad_id'].to_s+"clicks"] += report_ad_360['clicks'].to_i
                                          else
                                              threesixty_report_hash["ad_id"+report_ad_360['ad_id'].to_s+"clicks"] = report_ad_360['clicks'].to_i
                                          end
                                          
                                          if threesixty_report_hash["ad_id"+report_ad_360['ad_id'].to_s+"total_cost"]
                                              threesixty_report_hash["ad_id"+report_ad_360['ad_id'].to_s+"total_cost"] += report_ad_360['total_cost'].to_f
                                          else
                                              threesixty_report_hash["ad_id"+report_ad_360['ad_id'].to_s+"total_cost"] = report_ad_360['total_cost'].to_f
                                          end
                                      
                                      end
                                  end
                          
                              end
                          end
                          
                          
                          if adg_arr.count.to_i > 0
                            
                              total_array = adg_arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              adg_arr = adg_arr.in_groups(total_array)
                              
                              adg_arr.each do |adg_arr_d|
                                
                                  db_name = "adgroup_360_"+job["network_id"].to_s
                                  @adgroup_360 = @threesixty_db[db_name].find('adgroup_id' => { "$in" => adg_arr_d})
                                  @threesixty_db.close()
                                               
                                  if @adgroup_360.count.to_i != 0
                                      @adgroup_360.no_cursor_timeout.each do |adgroup|
                                          adgroup_name_hash["adgroup_id"+adgroup['adgroup_id'].to_s+"adgroup_name"] = adgroup["adgroup_name"]
                                          adgroup_price_hash["adgroup_id"+adgroup['adgroup_id'].to_s+"price"] = adgroup["price"]
                                      end
                                  end
                                
                              end
                          end
                          
                          if campaign_arr.count.to_i > 0
                              
                              campaign_arr = campaign_arr.uniq
                              
                              @campaign = @db["all_campaign"].find('campaign_id' => { "$in" => campaign_arr})
                              @db.close
                              @campaign.no_cursor_timeout.each do |campaign|
                                  campaign_name_hash["campaign_id"+campaign['campaign_id'].to_s+"campaign_name"] = campaign["campaign_name"]
                              end
                          end
                      end
                      
                      
                      if arr.count.to_i > 0
                        
                          @all_conversion_business_type_hash = {}
                        
                          arr.each do |arr_d|
                            
                            
                              @all_conversion = @db2[:conversion].find.aggregate([ 
                                               { '$match' => { "$and" => [ {:ad_id => { "$in" => arr_d}}, {:network_type => job["network_type"].to_s}, {:date => { '$gt' => @start_date.to_s }}, {:date => { '$lt' => @end_date.to_s }} ] } },
                                               { '$group' => { '_id' => {'ad_id' => '$ad_id',  'business_type' => '$business_type'},
                                                               'count' => { '$sum' => 1 }, 'revenue' => { '$sum' => "$revenue" } } }
                                                  ])
                              @db2.close()
                              
                              
                              if @all_conversion.count.to_i > 0 
                                  @all_conversion.each do |all_conversion_arr|
                                    
                                      if conversion_hash["ad_id"+all_conversion_arr['_id']['ad_id'].to_s].nil?
                                          conversion_hash["ad_id"+all_conversion_arr['_id']['ad_id'].to_s] = 0
                                      end
                                      
                                      if conversion_hash["ad_id"+all_conversion_arr['_id']['ad_id'].to_s+"revenue"].nil?
                                          conversion_hash["ad_id"+all_conversion_arr['_id']['ad_id'].to_s+"revenue"] = 0
                                      end
                                      
                                      conversion_hash["ad_id"+all_conversion_arr['_id']['ad_id'].to_s] = conversion_hash["ad_id"+all_conversion_arr['_id']['ad_id'].to_s] + all_conversion_arr['count'].to_i
                                      conversion_hash["ad_id"+all_conversion_arr['_id']['ad_id'].to_s+"revenue"] = conversion_hash["ad_id"+all_conversion_arr['_id']['ad_id'].to_s+"revenue"] + all_conversion_arr['revenue'].to_f
                                      
                                      
                                      if all_conversion_arr['_id']['business_type'] != ""
                                
                                          if @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['ad_id'].to_s].nil?
                                              @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['ad_id'].to_s] = {}
                                          end
                                          
                                          @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['ad_id'].to_s][all_conversion_arr['_id']['business_type']] = all_conversion_arr['count'].to_i
                                          @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['ad_id'].to_s][all_conversion_arr['_id']['business_type']+"revenue"] = all_conversion_arr['revenue'].to_f
                                          
                                      end
                                    
                                      # conversion_hash["ad_id"+all_conversion_arr['_id'].to_s] = all_conversion_arr['count'].to_i
                                      # conversion_hash["ad_id"+all_conversion_arr['_id'].to_s+"revenue"] = all_conversion_arr['revenue'].to_f
                                  end
                              end
                          end
                          
                          
                          # user has set all the type in adeqo first
                          if @all_conversion_business_type.count.to_i > 0
                            
                              @all_conversion_business_type = @all_conversion_business_type.uniq
                              @all_conversion_business_type.sort_by(&:downcase)
                            
                              @all_conversion_business_type_hash.each do |all_conversion_business_type_hash_d_key,all_conversion_business_type_hash_d_value|
                                  
                                  modify_hash = {}
                                  
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                      
                                      if all_conversion_business_type_hash_d_value[all_conversion_business_type_d].nil?
                                          modify_hash[all_conversion_business_type_d] = 0
                                          modify_hash[all_conversion_business_type_d+"revenue"] = 0
                                      else
                                          modify_hash[all_conversion_business_type_d] = all_conversion_business_type_hash_d_value[all_conversion_business_type_d].round(2)
                                          modify_hash[all_conversion_business_type_d+"revenue"] = all_conversion_business_type_hash_d_value[all_conversion_business_type_d+"revenue"].round(2)
                                      end
                                  end
                                  
                                  
                                  @all_conversion_business_type_hash[all_conversion_business_type_hash_d_key] = modify_hash
                                  
                              end
                          end
                          
                      end
                      
                  
                  
                  
                  elsif job["apply_level"].to_s == "Keywords"
                    
                      adg_arr = []
                      adgroup_name_hash = {}
                      adgroup_price_hash = {}
                      
                      total_array = 1
                      array_limit = 400000
                      
                      campaign_arr = []
                      campaign_name_hash = {}
                      
                      
                      
                      
                      if job["network_type"].to_s == "shenma"
                        
                          @level_data.no_cursor_timeout.each do |keyword_count|
                              arr << keyword_count["keyword_id"]  
                              adg_arr << keyword_count["adgroup_id"]
                              campaign_arr << keyword_count["campaign_id"]
                          end
                          
                          adg_arr = adg_arr.uniq
                        
                          if arr.count.to_i > 0
                              total_array = arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              arr = arr.in_groups(total_array)
                            
                              arr.each do |arr_d|
                                
                                  
                                  @shenmma_report_keyword = @db3[:shenma_report_keyword].find({ "$and" => [ {:keyword_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()  
                                  
                                  
                                  if @shenmma_report_keyword.count.to_i > 0
                                      @shenmma_report_keyword.no_cursor_timeout.each do |shenma_report_keyword|
                                      
                                          if shenma_report_hash["keyword_id"+shenma_report_keyword['keyword_id'].to_s+"display"]
                                              shenma_report_hash["keyword_id"+shenma_report_keyword['keyword_id'].to_s+"display"] += shenma_report_keyword['display'].to_i
                                          else
                                              shenma_report_hash["keyword_id"+shenma_report_keyword['keyword_id'].to_s+"display"] = shenma_report_keyword['display'].to_i
                                          end
                                          
                                          if shenma_report_hash["keyword_id"+shenma_report_keyword['keyword_id'].to_s+"clicks"]
                                              shenma_report_hash["keyword_id"+shenma_report_keyword['keyword_id'].to_s+"clicks"] += shenma_report_keyword['clicks'].to_i
                                          else
                                              shenma_report_hash["keyword_id"+shenma_report_keyword['keyword_id'].to_s+"clicks"] = shenma_report_keyword['clicks'].to_i
                                          end
                                          
                                          if shenma_report_hash["keyword_id"+shenma_report_keyword['keyword_id'].to_s+"total_cost"]
                                              shenma_report_hash["keyword_id"+shenma_report_keyword['keyword_id'].to_s+"total_cost"] += shenma_report_keyword['total_cost'].to_f
                                          else
                                              shenma_report_hash["keyword_id"+shenma_report_keyword['keyword_id'].to_s+"total_cost"] = shenma_report_keyword['total_cost'].to_f
                                          end
                                          
                                          if shenma_report_hash["keyword_id"+shenma_report_keyword['keyword_id'].to_s+"avg_position"]
                                              avg_pos = shenma_report_keyword["avg_position"].to_f * shenma_report_keyword["display"].to_f
                                              shenma_report_hash["keyword_id"+shenma_report_keyword['keyword_id'].to_s+"avg_position"] += avg_pos.to_f
                                          else
                                              shenma_report_hash["keyword_id"+shenma_report_keyword['keyword_id'].to_s+"avg_position"] = shenma_report_keyword['avg_position'].to_f * shenma_report_keyword['display'].to_f
                                          end
                                      
                                      end
                                  end
                                  
                              end
                          end
                          
                          
                          
                          if adg_arr.count.to_i > 0
                            
                              total_array = adg_arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              adg_arr = adg_arr.in_groups(total_array)
                              
                              adg_arr.each do |adg_arr_d|
                                
                                  db_name = "adgroup_shenma_"+job["network_id"].to_s
                                  @shenma_adgroup = @baidu_db[db_name].find('adgroup_id' => { "$in" => adg_arr_d})
                                  @baidu_db.close()
                                  
                                  if @shenma_adgroup.count.to_i != 0
                                      @shenma_adgroup.no_cursor_timeout.each do |adgroup|
                                          adgroup_name_hash["adgroup_id"+adgroup['adgroup_id'].to_s+"adgroup_name"] = adgroup["adgroup_name"]
                                          adgroup_price_hash["adgroup_id"+adgroup['adgroup_id'].to_s+"price"] = adgroup["max_price"]
                                      end
                                  end
                                
                              end
                          end
                      
                      
                          if campaign_arr.count.to_i > 0
                              
                              campaign_arr = campaign_arr.uniq
                              
                              @campaign = @db["all_campaign"].find('campaign_id' => { "$in" => campaign_arr})
                              @db.close
                              @campaign.no_cursor_timeout.each do |campaign|
                                  campaign_name_hash["campaign_id"+campaign['campaign_id'].to_s+"campaign_name"] = campaign["campaign_name"]
                              end
                          end
                        
                        
                      elsif job["network_type"].to_s == "baidu"
                        
                          @level_data.no_cursor_timeout.each do |keyword_count|
                              arr << keyword_count["keyword_id"]  
                              adg_arr << keyword_count["adgroup_id"]
                              campaign_arr << keyword_count["campaign_id"]
                          end
                          
                          adg_arr = adg_arr.uniq
                        
                          if arr.count.to_i > 0
                              total_array = arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              arr = arr.in_groups(total_array)
                            
                              arr.each do |arr_d|
                                
                                  # @baidu_report_keyword = @db3[:baidu_report_keyword].find('keyword_id' => { "$in" => arr_d}, 'report_date' => { '$gt' => @start_date.to_s, '$lt' => @end_date.to_s }, 'display' => { "$gt" => 0})
                                  # @db3.close()
                                  
                                  
                                  
                                  @baidu_report_keyword = @db3[:baidu_report_keyword].find({ "$and" => [ {:keyword_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()  
                                  
                                  
                                  if @baidu_report_keyword.count.to_i > 0
                                      @baidu_report_keyword.no_cursor_timeout.each do |baidu_report_keyword|
                                      
                                          if baidu_report_hash["keyword_id"+baidu_report_keyword['keyword_id'].to_s+"display"]
                                              baidu_report_hash["keyword_id"+baidu_report_keyword['keyword_id'].to_s+"display"] += baidu_report_keyword['display'].to_i
                                          else
                                              baidu_report_hash["keyword_id"+baidu_report_keyword['keyword_id'].to_s+"display"] = baidu_report_keyword['display'].to_i
                                          end
                                          
                                          if baidu_report_hash["keyword_id"+baidu_report_keyword['keyword_id'].to_s+"clicks"]
                                              baidu_report_hash["keyword_id"+baidu_report_keyword['keyword_id'].to_s+"clicks"] += baidu_report_keyword['clicks'].to_i
                                          else
                                              baidu_report_hash["keyword_id"+baidu_report_keyword['keyword_id'].to_s+"clicks"] = baidu_report_keyword['clicks'].to_i
                                          end
                                          
                                          if baidu_report_hash["keyword_id"+baidu_report_keyword['keyword_id'].to_s+"total_cost"]
                                              baidu_report_hash["keyword_id"+baidu_report_keyword['keyword_id'].to_s+"total_cost"] += baidu_report_keyword['total_cost'].to_f
                                          else
                                              baidu_report_hash["keyword_id"+baidu_report_keyword['keyword_id'].to_s+"total_cost"] = baidu_report_keyword['total_cost'].to_f
                                          end
                                          
                                          if baidu_report_hash["keyword_id"+baidu_report_keyword['keyword_id'].to_s+"avg_position"]
                                              avg_pos = baidu_report_keyword["avg_position"].to_f * baidu_report_keyword["display"].to_f
                                              baidu_report_hash["keyword_id"+baidu_report_keyword['keyword_id'].to_s+"avg_position"] += avg_pos.to_f
                                          else
                                              baidu_report_hash["keyword_id"+baidu_report_keyword['keyword_id'].to_s+"avg_position"] = baidu_report_keyword['avg_position'].to_f * baidu_report_keyword['display'].to_f
                                          end
                                      
                                      end
                                  end
                                  
                              end
                          end
                          
                          
                          
                          if adg_arr.count.to_i > 0
                            
                              total_array = adg_arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              adg_arr = adg_arr.in_groups(total_array)
                              
                              adg_arr.each do |adg_arr_d|
                                
                                  db_name = "adgroup_baidu_"+job["network_id"].to_s
                                  @baidu_adgroup = @baidu_db[db_name].find('adgroup_id' => { "$in" => adg_arr_d})
                                  @baidu_db.close()
                                  
                                  if @baidu_adgroup.count.to_i != 0
                                      @baidu_adgroup.no_cursor_timeout.each do |adgroup|
                                          adgroup_name_hash["adgroup_id"+adgroup['adgroup_id'].to_s+"adgroup_name"] = adgroup["name"]
                                          adgroup_price_hash["adgroup_id"+adgroup['adgroup_id'].to_s+"price"] = adgroup["max_price"]
                                      end
                                  end
                                
                              end
                          end
                      
                      
                          if campaign_arr.count.to_i > 0
                              
                              campaign_arr = campaign_arr.uniq
                              
                              @campaign = @db["all_campaign"].find('campaign_id' => { "$in" => campaign_arr})
                              @db.close
                              @campaign.no_cursor_timeout.each do |campaign|
                                  campaign_name_hash["campaign_id"+campaign['campaign_id'].to_s+"campaign_name"] = campaign["campaign_name"]
                              end
                          end
                          
                          
                        
                      elsif job["network_type"].to_s == "sogou"
                      
                          @level_data.no_cursor_timeout.each do |keyword_count|
                              arr << keyword_count["keyword_id"]  
                              adg_arr << keyword_count["cpc_grp_id"]
                              campaign_arr << keyword_count["cpc_plan_id"]
                          end
                          adg_arr = adg_arr.uniq
                          
                          
                          if arr.count.to_i > 0
                            
                              total_array = arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              arr = arr.in_groups(total_array)
                            
                              arr.each do |arr_d|
                                
                                  # @sogou_report_keyword = @db3[:sogou_report_keyword].find('keyword_id' => { "$in" => arr_d}, 'report_date' => { '$gt' => @start_date.to_s, '$lt' => @end_date.to_s }, 'display' => { "$gt" => 0})
                                  # @db3.close()
                                
                                  
                  
                                  @sogou_report_keyword = @db3[:sogou_report_keyword].find({ "$and" => [ {:keyword_id => { "$in" => arr_d}}, {:display => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @sogou_report_keyword.count.to_i > 0
                                      @sogou_report_keyword.no_cursor_timeout.each do |sogou_report_keyword|
                                      
                                          if sogou_report_hash["keyword_id"+sogou_report_keyword['keyword_id'].to_s+"display"]
                                              sogou_report_hash["keyword_id"+sogou_report_keyword['keyword_id'].to_s+"display"] += sogou_report_keyword['display'].to_i
                                          else
                                              sogou_report_hash["keyword_id"+sogou_report_keyword['keyword_id'].to_s+"display"] = sogou_report_keyword['display'].to_i
                                          end
                                          
                                          if sogou_report_hash["keyword_id"+sogou_report_keyword['keyword_id'].to_s+"clicks"]
                                              sogou_report_hash["keyword_id"+sogou_report_keyword['keyword_id'].to_s+"clicks"] += sogou_report_keyword['clicks'].to_i
                                          else
                                              sogou_report_hash["keyword_id"+sogou_report_keyword['keyword_id'].to_s+"clicks"] = sogou_report_keyword['clicks'].to_i
                                          end
                                          
                                          if sogou_report_hash["keyword_id"+sogou_report_keyword['keyword_id'].to_s+"total_cost"]
                                              sogou_report_hash["keyword_id"+sogou_report_keyword['keyword_id'].to_s+"total_cost"] += sogou_report_keyword['total_cost'].to_f
                                          else
                                              sogou_report_hash["keyword_id"+sogou_report_keyword['keyword_id'].to_s+"total_cost"] = sogou_report_keyword['total_cost'].to_f
                                          end
                                          
                                          if sogou_report_hash["keyword_id"+sogou_report_keyword['keyword_id'].to_s+"avg_position"]
                                              avg_pos = sogou_report_keyword["avg_position"].to_f * sogou_report_keyword["display"].to_f
                                              sogou_report_hash["keyword_id"+sogou_report_keyword['keyword_id'].to_s+"avg_position"] += avg_pos.to_f
                                          else
                                              sogou_report_hash["keyword_id"+sogou_report_keyword['keyword_id'].to_s+"avg_position"] = sogou_report_keyword['avg_position'].to_f * sogou_report_keyword['display'].to_f
                                          end
                                      
                                      end
                                  end
                          
                              end  
                          end
                          
                          
                          if adg_arr.count.to_i > 0
                            
                              total_array = adg_arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              adg_arr = adg_arr.in_groups(total_array)
                              
                              adg_arr.each do |adg_arr_d|
                                
                                  db_name = "adgroup_sogou_"+job["network_id"].to_s
                                  @sogou_adgroup = @sogou_db[db_name].find('cpc_grp_id' => { "$in" => adg_arr_d})
                                  @sogou_db.close()
                                  
                                  if @sogou_adgroup.count.to_i != 0
                                      @sogou_adgroup.no_cursor_timeout.each do |adgroup|
                                          adgroup_name_hash["adgroup_id"+adgroup['cpc_grp_id'].to_s+"adgroup_name"] = adgroup["name"]
                                          adgroup_price_hash["adgroup_id"+adgroup['cpc_grp_id'].to_s+"price"] = adgroup["max_price"]
                                      end
                                  end
                                
                              end
                          end
                      
                      
                          if campaign_arr.count.to_i > 0
                              
                              campaign_arr = campaign_arr.uniq
                              
                              @campaign = @db["all_campaign"].find('cpc_plan_id' => { "$in" => campaign_arr})
                              @db.close
                              @campaign.no_cursor_timeout.each do |campaign|
                                  campaign_name_hash["campaign_id"+campaign['cpc_plan_id'].to_s+"campaign_name"] = campaign["campaign_name"]
                              end
                          end
                      
                          
                      elsif job["network_type"].to_s == "360"
                        
                          @level_data.no_cursor_timeout.each do |keyword_count|
                              arr << keyword_count["keyword_id"]  
                              adg_arr << keyword_count["adgroup_id"]
                              campaign_arr << keyword_count["campaign_id"]
                          end
                          
                          adg_arr = adg_arr.uniq
                          
                          if arr.count.to_i > 0
                            
                              total_array = arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              arr = arr.in_groups(total_array)
                          
                              arr.each do |arr_d|
                                  
                                  # @report_keyword_360 = @db3[:report_keyword_360].find('keyword_id' => { "$in" => arr_d}, 'report_date' => { '$gt' => @start_date.to_s, '$lt' => @end_date.to_s }, 'views' => { "$gt" => 0})
                                  # @db.close
                              
                                  
                                  
                                  @report_keyword_360 = @db3[:report_keyword_360].find({ "$and" => [ {:keyword_id => { "$in" => arr_d}}, {:views => { "$gt" => 0}}, {:report_date => { '$gt' => @start_date.to_s }}, {:report_date => { '$lt' => @end_date.to_s }} ] })
                                  @db3.close()
                                  
                                  if @report_keyword_360.count.to_i > 0
                                      @report_keyword_360.no_cursor_timeout.each do |report_keyword_360|
                                        
                                          if threesixty_report_hash["keyword_id"+report_keyword_360['keyword_id'].to_s+"views"]
                                              threesixty_report_hash["keyword_id"+report_keyword_360['keyword_id'].to_s+"views"] += report_keyword_360['views'].to_i
                                          else
                                              threesixty_report_hash["keyword_id"+report_keyword_360['keyword_id'].to_s+"views"] = report_keyword_360['views'].to_i
                                          end
                                          
                                          
                                          if threesixty_report_hash["keyword_id"+report_keyword_360['keyword_id'].to_s+"clicks"]
                                              threesixty_report_hash["keyword_id"+report_keyword_360['keyword_id'].to_s+"clicks"] += report_keyword_360['clicks'].to_i
                                          else
                                              threesixty_report_hash["keyword_id"+report_keyword_360['keyword_id'].to_s+"clicks"] = report_keyword_360['clicks'].to_i
                                          end
                                          
                                          if threesixty_report_hash["keyword_id"+report_keyword_360['keyword_id'].to_s+"total_cost"]
                                              threesixty_report_hash["keyword_id"+report_keyword_360['keyword_id'].to_s+"total_cost"] += report_keyword_360['total_cost'].to_f
                                          else
                                              threesixty_report_hash["keyword_id"+report_keyword_360['keyword_id'].to_s+"total_cost"] = report_keyword_360['total_cost'].to_f
                                          end
                                          
                                          
                                          if threesixty_report_hash["keyword_id"+report_keyword_360['keyword_id'].to_s+"avg_position"]
                                            
                                              avg_pos = report_keyword_360["avg_position"].to_f * report_keyword_360["views"].to_f
                                              threesixty_report_hash["keyword_id"+report_keyword_360['keyword_id'].to_s+"avg_position"] += avg_pos.to_f
                                          else
                                              threesixty_report_hash["keyword_id"+report_keyword_360['keyword_id'].to_s+"avg_position"] = report_keyword_360['avg_position'].to_f * report_keyword_360['views'].to_f
                                          end
                                          
                                      end
                                  end
                              
                              end
                          end
              
                          if adg_arr.count.to_i > 0
                            
                              total_array = adg_arr.count.to_i / array_limit.to_i
                              total_array = total_array + 1
                              adg_arr = adg_arr.in_groups(total_array)
                              
                              adg_arr.each do |adg_arr_d|
                              
                                  db_name = "adgroup_360_"+job["network_id"].to_s
                                  @adgroup_360 = @threesixty_db[db_name].find('adgroup_id' => { "$in" => adg_arr_d}) 
                                  @threesixty_db.close()
                                  
                                  if @adgroup_360.count.to_i != 0
                                      @adgroup_360.no_cursor_timeout.each do |adgroup|
                                          adgroup_name_hash["adgroup_id"+adgroup['adgroup_id'].to_s+"adgroup_name"] = adgroup["adgroup_name"]
                                          adgroup_price_hash["adgroup_id"+adgroup['adgroup_id'].to_s+"price"] = adgroup["price"]
                                      end
                                  end
                              
                              end
                          end
                          
                          if campaign_arr.count.to_i > 0
                              
                              campaign_arr = campaign_arr.uniq
                              
                              @campaign = @db["all_campaign"].find('campaign_id' => { "$in" => campaign_arr})
                              @db.close
                              @campaign.no_cursor_timeout.each do |campaign|
                                  campaign_name_hash["campaign_id"+campaign['campaign_id'].to_s+"campaign_name"] = campaign["campaign_name"]
                              end
                          end
                          
                      end
                      
                          
                          
                      if arr.count.to_i > 0
                        
                        
                          @all_conversion_business_type_hash = {}
                        
                          arr.each do |arr_d|
                            
                              
                              @all_conversion = @db2[:conversion].find.aggregate([ 
                                               { '$match' => { "$and" => [ {:keyword_id => { "$in" => arr_d}}, {:network_type => job["network_type"].to_s}, {:date => { '$gt' => @start_date.to_s }}, {:date => { '$lt' => @end_date.to_s }} ] } },
                                               { '$group' => { '_id' => {'keyword_id' => '$keyword_id',  'business_type' => '$business_type'},
                                                               'count' => { '$sum' => 1 }, 'revenue' => { '$sum' => "$revenue" } } }
                                                  ])
                              @db2.close()
                              
                              if @all_conversion.count.to_i > 0 
                                  @all_conversion.each do |all_conversion_arr|
                                    
                                      if conversion_hash["keyword_id"+all_conversion_arr['_id']['keyword_id'].to_s].nil?
                                          conversion_hash["keyword_id"+all_conversion_arr['_id']['keyword_id'].to_s] = 0
                                      end
                                      
                                      if conversion_hash["keyword_id"+all_conversion_arr['_id']['keyword_id'].to_s+"revenue"].nil?
                                          conversion_hash["keyword_id"+all_conversion_arr['_id']['keyword_id'].to_s+"revenue"] = 0
                                      end
                                      
                                      conversion_hash["keyword_id"+all_conversion_arr['_id']['keyword_id'].to_s] = conversion_hash["keyword_id"+all_conversion_arr['_id']['keyword_id'].to_s] + all_conversion_arr['count'].to_i
                                      conversion_hash["keyword_id"+all_conversion_arr['_id']['keyword_id'].to_s+"revenue"] = conversion_hash["keyword_id"+all_conversion_arr['_id']['keyword_id'].to_s+"revenue"] + all_conversion_arr['revenue'].to_f
                                      
                                      
                                      
                                      if all_conversion_arr['_id']['business_type'] != ""
                                
                                          if @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['keyword_id'].to_s].nil?
                                              @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['keyword_id'].to_s] = {}
                                          end
                                          
                                          @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['keyword_id'].to_s][all_conversion_arr['_id']['business_type']] = all_conversion_arr['count'].to_i
                                          @all_conversion_business_type_hash["id_"+all_conversion_arr['_id']['keyword_id'].to_s][all_conversion_arr['_id']['business_type']+"revenue"] = all_conversion_arr['revenue'].to_f
                                          
                                      end
                                    
                                      # conversion_hash["keyword_id"+all_conversion_arr['_id'].to_s] = all_conversion_arr['count'].to_i
                                      # conversion_hash["keyword_id"+all_conversion_arr['_id'].to_s+"revenue"] = all_conversion_arr['revenue'].to_f
                                  end
                              end
                          end
                          
                          
                          # user has set all the type in adeqo first
                          if @all_conversion_business_type.count.to_i > 0
                            
                              @all_conversion_business_type = @all_conversion_business_type.uniq
                              @all_conversion_business_type.sort_by(&:downcase)
                            
                              @all_conversion_business_type_hash.each do |all_conversion_business_type_hash_d_key,all_conversion_business_type_hash_d_value|
                                  
                                  modify_hash = {}
                                  
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                      
                                      if all_conversion_business_type_hash_d_value[all_conversion_business_type_d].nil?
                                          modify_hash[all_conversion_business_type_d] = 0
                                          modify_hash[all_conversion_business_type_d+"revenue"] = 0
                                      else
                                          modify_hash[all_conversion_business_type_d] = all_conversion_business_type_hash_d_value[all_conversion_business_type_d].round(2)
                                          modify_hash[all_conversion_business_type_d+"revenue"] = all_conversion_business_type_hash_d_value[all_conversion_business_type_d+"revenue"].round(2)
                                      end
                                  end
                                  
                                  
                                  @all_conversion_business_type_hash[all_conversion_business_type_hash_d_key] = modify_hash
                                  
                              end
                          end
                          
                      end
                    
                  end        
                   
                  
                  # data = {:message => threesixty_report_hash, :status => "false"}
                  # return render :json => data, :status => :ok
                  
              end
              
              
              
              
                           
                
              if @level_data.count.to_i > 0
                  @level_data.no_cursor_timeout.each do |level_data|
                      @status = "Active"
                       
                      @impression = 0
                      @click = 0
                      @total_cost = 0
                      @ctr = 0
                      @avg_pos = 0
                      @cpc = 0
                      @ctr = 0
                      
                      @click = 0
                      @click_rate = 0
                      @max_cpc = 0
                      
                      @conv_rate = 0
                      @cpa = 0
                      @conversion = []
                      
                      
                      if job["apply_level"].to_s == "Keywords"
                          
                          @name = ""
                          @max_cpc = 0
                          
                          if job["network_type"].to_s == "shenma"
                              
                              if level_data["pause"].to_s == "true" 
                                  @status = "Inactive"  
                              end
                              
                              @name = adgroup_name_hash["adgroup_id"+level_data['adgroup_id'].to_s+"adgroup_name"].to_s
                              @max_cpc = adgroup_price_hash["adgroup_id"+level_data['adgroup_id'].to_s+"price"].to_f
                            
                              if level_data["match_type"].to_i == 1
                                  @match = "Exact"
                              elsif level_data["match_type"].to_i == 3
                                  @match = "Broad"
                              else
                                  @match = "Phrase"
                              end
                              
                              @visit_url = level_data["visit_url"].to_s
                              
                              
                              if shenma_report_hash["keyword_id"+level_data['keyword_id'].to_s+"display"]
                                  @impression = shenma_report_hash["keyword_id"+level_data['keyword_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if shenma_report_hash["keyword_id"+level_data['keyword_id'].to_s+"clicks"]
                                  @click = shenma_report_hash["keyword_id"+level_data['keyword_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if shenma_report_hash["keyword_id"+level_data['keyword_id'].to_s+"total_cost"]
                                  @total_cost = shenma_report_hash["keyword_id"+level_data['keyword_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if shenma_report_hash["keyword_id"+level_data['keyword_id'].to_s+"avg_position"]
                                  @avg_pos = shenma_report_hash["keyword_id"+level_data['keyword_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              if @impression.to_f > 0
                                  @click_rate = (@click.to_f / @impression.to_f) * 100
                              end
                              
                              @data_conversion = conversion_hash["keyword_id"+level_data['keyword_id'].to_s]
                              @data_revenue = conversion_hash["keyword_id"+level_data['keyword_id'].to_s+"revenue"]
                              
                          
                          elsif job["network_type"].to_s == "baidu"
                            
                            
                              if level_data["status"].to_i == 43 || level_data["status"].to_i == 48
                                  @status = "Invalid"  
                              end
                              
                              if level_data["status"].to_i == 42 || level_data["status"].to_i == 43 || level_data["status"].to_i == 47
                                  @status = "Inactive"  
                              end
                              
                              if level_data["status"].to_i == 45
                                  @status = "Pending"  
                              end
                              
                              if level_data["status"].to_i == 46
                                  @status = "Under Approval"  
                              end
                              
                              if level_data["status"].to_i == 44
                                  @status = "Search Invalid"  
                              end
                              
                              if level_data["status"].to_i == 49
                                  @status = "Desktop Search Invalid"  
                              end
                              
                              if level_data["status"].to_i == 50
                                  @status = "Mobile Search Invalid"  
                              end
                              
                              @name = adgroup_name_hash["adgroup_id"+level_data['adgroup_id'].to_s+"adgroup_name"].to_s
                              @max_cpc = adgroup_price_hash["adgroup_id"+level_data['adgroup_id'].to_s+"price"].to_f
                            
                              if level_data["match_type"].to_i == 1
                                  @match = "Exact"
                              elsif level_data["match_type"].to_i == 3
                                  @match = "Broad"
                              else
                                  @match = "Phrase"
                              end
                              
                              @visit_url = level_data["visit_url"].to_s
                              @m_visit_url = level_data["mobile_visit_url"].to_s
                              
                              
                              if baidu_report_hash["keyword_id"+level_data['keyword_id'].to_s+"display"]
                                  @impression = baidu_report_hash["keyword_id"+level_data['keyword_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if baidu_report_hash["keyword_id"+level_data['keyword_id'].to_s+"clicks"]
                                  @click = baidu_report_hash["keyword_id"+level_data['keyword_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if baidu_report_hash["keyword_id"+level_data['keyword_id'].to_s+"total_cost"]
                                  @total_cost = baidu_report_hash["keyword_id"+level_data['keyword_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if baidu_report_hash["keyword_id"+level_data['keyword_id'].to_s+"avg_position"]
                                  @avg_pos = baidu_report_hash["keyword_id"+level_data['keyword_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              if @impression.to_f > 0
                                  @click_rate = (@click.to_f / @impression.to_f) * 100
                              end
                              
                              @data_conversion = conversion_hash["keyword_id"+level_data['keyword_id'].to_s]
                              @data_revenue = conversion_hash["keyword_id"+level_data['keyword_id'].to_s+"revenue"]
                              
                          
                          
                          elsif job["network_type"].to_s == "sogou"
                              if level_data["status"].to_i == 31
                                  @status = "Invalid"  
                              
                              
                              elsif level_data["status"].to_i == 32
                                  @status = "Inactive"  
                              
                              
                              elsif level_data["status"].to_i == 33
                                  @status = "Under Approval"  
                              
                              
                              elsif level_data["status"].to_i == 34
                                  @status = "Search Invalid"  
                              
                              
                              elsif level_data["status"].to_i == 36
                                  @status = "Desktop Search Invalid"  
                              
                              
                              elsif level_data["status"].to_i == 37
                                  @status = "Mobile Search Invalid"  
                              end
                               
                              @name = adgroup_name_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"adgroup_name"].to_s
                              @max_cpc = adgroup_price_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"price"].to_f
                              
                              if level_data["match_type"].to_i == 0
                                  @match = "Phrase Match"
                              else
                                  @match = "Exact Match"
                              end
                              
                              @visit_url = level_data["visit_url"].to_s
                              @m_visit_url = level_data["mobile_visit_url"].to_s
                                  
                              if sogou_report_hash["keyword_id"+level_data['keyword_id'].to_s+"display"]
                                  @impression = sogou_report_hash["keyword_id"+level_data['keyword_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if sogou_report_hash["keyword_id"+level_data['keyword_id'].to_s+"clicks"]
                                  @click = sogou_report_hash["keyword_id"+level_data['keyword_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if sogou_report_hash["keyword_id"+level_data['keyword_id'].to_s+"total_cost"]
                                  @total_cost = sogou_report_hash["keyword_id"+level_data['keyword_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if sogou_report_hash["keyword_id"+level_data['keyword_id'].to_s+"avg_position"]
                                  @avg_pos = sogou_report_hash["keyword_id"+level_data['keyword_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              if @impression.to_f > 0
                                  @click_rate = (@click.to_f / @impression.to_f) * 100
                              end
                              
                              @data_conversion = conversion_hash["keyword_id"+level_data['keyword_id'].to_s]
                              @data_revenue = conversion_hash["keyword_id"+level_data['keyword_id'].to_s+"revenue"]
                          
                          
                          
                          elsif job["network_type"].to_s == "360"
                            
                              if level_data["status"].to_s == "暂停"
                                  @status = "Inactive"  
                              end
                              
                              if @status.to_s == "Inactive" && level_data["sys_status"].to_s != "有效"
                                  @status = "Invalid"  
                              end
                              
                              @match = "Exact Match"
                                  
                              if level_data["match_type"].to_s == "短语"
                                  @match = "Phrase Match"
                              end
                              
                              @visit_url = level_data["visit_url"].to_s
                              @m_visit_url = level_data["mobile_visit_url"].to_s
                              
                              @name = adgroup_name_hash["adgroup_id"+level_data['adgroup_id'].to_s+"adgroup_name"].to_s
                              @max_cpc = adgroup_price_hash["adgroup_id"+level_data['adgroup_id'].to_s+"price"].to_f
                              
                              if threesixty_report_hash["keyword_id"+level_data['keyword_id'].to_s+"views"]
                                  @impression = threesixty_report_hash["keyword_id"+level_data['keyword_id'].to_s+"views"]
                              else
                                  @impression = 0
                              end
                              
                              
                              if threesixty_report_hash["keyword_id"+level_data['keyword_id'].to_s+"clicks"]
                                  @click = threesixty_report_hash["keyword_id"+level_data['keyword_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if threesixty_report_hash["keyword_id"+level_data['keyword_id'].to_s+"total_cost"]
                                  @total_cost = threesixty_report_hash["keyword_id"+level_data['keyword_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if threesixty_report_hash["keyword_id"+level_data['keyword_id'].to_s+"avg_position"]
                                  @avg_pos = threesixty_report_hash["keyword_id"+level_data['keyword_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              if @impression.to_f > 0
                                @click_rate = (@click.to_f / @impression.to_f) * 100
                              end
                              
                              @data_conversion = conversion_hash["keyword_id"+level_data['keyword_id'].to_s]
                              @data_revenue = conversion_hash["keyword_id"+level_data['keyword_id'].to_s+"revenue"]
                              
                          end
                      
                      elsif job["apply_level"].to_s == "Ads"
                          @adtype = ""
                          @name = ""
                          
                          
                          
                          if job["network_type"].to_s == "shenma"
                            
                              @status = "Active"
                            
                              if level_data["pause"].to_s == "true"
                                  @status = "Inactive"  
                              end
                              
                              
                              @title = level_data["title"]
                              @desc1 = level_data["description"]
                              @desc2 = ""
                              @visiturl = level_data["visit_url"]
                              @showurl = level_data["show_url"]
                              @m_visiturl = ""
                              @m_showurl = ""
                              
                              @name = adgroup_name_hash["adgroup_id"+level_data['adgroup_id'].to_s+"adgroup_name"].to_s
                              @max_cpc = adgroup_price_hash["adgroup_id"+level_data['adgroup_id'].to_s+"price"].to_f
                              
                              
                              if shenma_report_hash["ad_id"+level_data['ad_id'].to_s+"display"]
                                  @impression = shenma_report_hash["ad_id"+level_data['ad_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if shenma_report_hash["ad_id"+level_data['ad_id'].to_s+"clicks"]
                                  @click = shenma_report_hash["ad_id"+level_data['ad_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if shenma_report_hash["ad_id"+level_data['ad_id'].to_s+"total_cost"]
                                  @total_cost = shenma_report_hash["ad_id"+level_data['ad_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if shenma_report_hash["ad_id"+level_data['ad_id'].to_s+"avg_position"]
                                  @avg_pos = shenma_report_hash["ad_id"+level_data['ad_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              
                              if @impression.to_f > 0
                                @click_rate = (@click.to_f / @impression.to_f) * 100
                              end
                               
                              @data_conversion = conversion_hash["ad_id"+level_data['ad_id'].to_s]
                              @data_revenue = conversion_hash["ad_id"+level_data['ad_id'].to_s+"revenue"] 
                              
                            
                          elsif job["network_type"].to_s == "baidu"
                            
                              @status = "Active"
                              if level_data["status"].to_i == 53 || level_data["status"].to_i == 56
                                  @status = "Invalid"  
                              end
                              
                              if level_data["status"].to_i == 52
                                  @status = "Inactive"  
                              end
                              
                              if level_data["status"].to_i == 54
                                  @status = "Pending"  
                              end
                              
                              if level_data["status"].to_i == 55
                                  @status = "Under Approval"  
                              end
                              
                              if level_data["status"].to_i == 57
                                  @status = "Mobile Url Under Approval"  
                              end
                              
                              @title = level_data["title"]
                              @desc1 = level_data["description_1"]
                              @desc2 = level_data["description_2"]
                              @visiturl = level_data["visit_url"]
                              @showurl = level_data["show_url"]
                              @m_visiturl = level_data["mobile_visit_url"]
                              @m_showurl = level_data["mobile_show_url"]
                              
                              @name = adgroup_name_hash["adgroup_id"+level_data['adgroup_id'].to_s+"adgroup_name"].to_s
                              @max_cpc = adgroup_price_hash["adgroup_id"+level_data['adgroup_id'].to_s+"price"].to_f
                              
                              
                              if baidu_report_hash["ad_id"+level_data['ad_id'].to_s+"display"]
                                  @impression = baidu_report_hash["ad_id"+level_data['ad_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if baidu_report_hash["ad_id"+level_data['ad_id'].to_s+"clicks"]
                                  @click = baidu_report_hash["ad_id"+level_data['ad_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if baidu_report_hash["ad_id"+level_data['ad_id'].to_s+"total_cost"]
                                  @total_cost = baidu_report_hash["ad_id"+level_data['ad_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if baidu_report_hash["ad_id"+level_data['ad_id'].to_s+"avg_position"]
                                  @avg_pos = baidu_report_hash["ad_id"+level_data['ad_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              
                              if @impression.to_f > 0
                                @click_rate = (@click.to_f / @impression.to_f) * 100
                              end
                               
                              @data_conversion = conversion_hash["ad_id"+level_data['ad_id'].to_s]
                              @data_revenue = conversion_hash["ad_id"+level_data['ad_id'].to_s+"revenue"]
                              
                            
                                
                          elsif job["network_type"].to_s == "sogou"
                              if level_data["status"].to_i == 41
                                  @status = "Invalid"  
                              
                              
                              elsif level_data["status"].to_i == 42
                                  @status = "Inactive"  
                              
                              
                              elsif level_data["status"].to_i == 43
                                  @status = "Under Approval"  
                              
                              
                              elsif level_data["status"].to_i == 45
                                  @status = "Mobile Url Invalid"  
                              end
                              
                              @title = level_data["title"]
                              @desc1 = level_data["description_1"]
                              @desc2 = level_data["description_2"]
                              @visiturl = level_data["visit_url"]
                              @showurl = level_data["show_url"]
                              @m_visiturl = level_data["mobile_visit_url"]
                              @m_showurl = level_data["mobile_show_url"]
                              
                              
                              @name = adgroup_name_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"adgroup_name"].to_s
                              @max_cpc = adgroup_price_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"price"].to_f
                                  
                              if sogou_report_hash["ad_id"+level_data['cpc_idea_id'].to_s+"display"]
                                  @impression = sogou_report_hash["ad_id"+level_data['cpc_idea_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if sogou_report_hash["ad_id"+level_data['cpc_idea_id'].to_s+"clicks"]
                                  @click = sogou_report_hash["ad_id"+level_data['cpc_idea_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if sogou_report_hash["ad_id"+level_data['cpc_idea_id'].to_s+"total_cost"]
                                  @total_cost = sogou_report_hash["ad_id"+level_data['cpc_idea_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if sogou_report_hash["ad_id"+level_data['cpc_idea_id'].to_s+"avg_position"]
                                  @avg_pos = sogou_report_hash["ad_id"+level_data['cpc_idea_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              
                              if @impression.to_f > 0
                                @click_rate = (@click.to_f / @impression.to_f) * 100
                              end
                               
                              @data_conversion = conversion_hash["ad_id"+level_data['cpc_idea_id'].to_s]
                              @data_revenue = conversion_hash["ad_id"+level_data['cpc_idea_id'].to_s+"revenue"]
                          
                          
                          elsif job["network_type"].to_s == "360"
                              if level_data["status"].to_s == "暂停"
                                  @status = "Inactive"  
                              end
                              
                              @title = level_data["title"]
                              @desc1 = level_data["description"]
                              @desc2 = ""
                              
                              @visiturl = level_data["visit_url"]
                              @showurl = level_data["show_url"]
                              @m_visiturl = level_data["mobile_visit_url"]
                              @m_showurl = level_data["mobile_show_url"]
                              
                              @name = adgroup_name_hash["adgroup_id"+level_data['adgroup_id'].to_s+"adgroup_name"].to_s
                              @max_cpc = adgroup_price_hash["adgroup_id"+level_data['adgroup_id'].to_s+"price"].to_f
                                 
                                                            
                              if threesixty_report_hash["ad_id"+level_data['ad_id'].to_s+"views"]
                                  @impression = threesixty_report_hash["ad_id"+level_data['ad_id'].to_s+"views"]
                              else
                                  @impression = 0
                              end
                              
                              if threesixty_report_hash["ad_id"+level_data['ad_id'].to_s+"clicks"]
                                  @click = threesixty_report_hash["ad_id"+level_data['ad_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if threesixty_report_hash["ad_id"+level_data['ad_id'].to_s+"total_cost"]
                                  @total_cost = threesixty_report_hash["ad_id"+level_data['ad_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              # ad doesnt have avg pos
                              @avg_pos = 0
                              # ad doesnt have avg pos
                              
                              if @impression.to_f > 0
                                  @click_rate = (@click.to_f / @impression.to_f) * 100
                              end
                              
                              @data_conversion = conversion_hash["ad_id"+level_data['ad_id'].to_s]
                              @data_revenue = conversion_hash["ad_id"+level_data['ad_id'].to_s+"revenue"]
                              
                          end
                      
                      
                      elsif job["apply_level"].to_s == "Ad Groups"
                          
                          
                          if level_data["status"].to_i == 22 || level_data["status"].to_i == 32 || level_data["status"].to_s.include?("暂停") || level_data["sys_status"].to_s.include?("暂停") || level_data["pause"].to_s == "true"
                              @status = "Inactive"  
                          
                          
                          elsif level_data["status"].to_i == 23 || level_data["status"].to_i == 33
                              @status = "Campaign Inactive"
                          end

                          
                          if job["network_type"].to_s == "shenma"
                            
                              @name = level_data["name"]
                              @max_cpc = level_data['max_price']
                              
                              
                              if shenma_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"display"]
                                  @impression = shenma_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if shenma_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"clicks"]
                                  @click = shenma_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if shenma_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"total_cost"]
                                  @total_cost = shenma_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if shenma_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"avg_position"]
                                  @avg_pos = shenma_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              @data_conversion = conversion_hash["adgroup_id"+level_data['adgroup_id'].to_s]
                              @data_revenue = conversion_hash["adgroup_id"+level_data['adgroup_id'].to_s+"revenue"].to_f
                            
                            
                          elsif job["network_type"].to_s == "baidu"
                              @name = level_data["name"]
                              @max_cpc = level_data['max_price']
                              
                              
                              if baidu_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"display"]
                                  @impression = baidu_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if baidu_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"clicks"]
                                  @click = baidu_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if baidu_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"total_cost"]
                                  @total_cost = baidu_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if baidu_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"avg_position"]
                                  @avg_pos = baidu_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              @data_conversion = conversion_hash["adgroup_id"+level_data['adgroup_id'].to_s]
                              @data_revenue = conversion_hash["adgroup_id"+level_data['adgroup_id'].to_s+"revenue"].to_f
                              
                          elsif job["network_type"].to_s == "sogou"
                              @name = level_data["name"]
                              @max_cpc = level_data['max_price']
                              
                              if sogou_report_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"display"]
                                  @impression = sogou_report_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if sogou_report_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"clicks"]
                                  @click = sogou_report_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if sogou_report_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"total_cost"]
                                  @total_cost = sogou_report_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if sogou_report_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"avg_position"]
                                  @avg_pos = sogou_report_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              @data_conversion = conversion_hash["adgroup_id"+level_data['cpc_grp_id'].to_s]
                              @data_revenue = conversion_hash["adgroup_id"+level_data['cpc_grp_id'].to_s+"revenue"].to_f
                          
                          elsif job["network_type"].to_s == "360"
                              @name = level_data["adgroup_name"]
                              @max_cpc = level_data['price']
                              
                              if threesixty_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"display"]
                                  @impression = threesixty_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if threesixty_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"clicks"]
                                  @click = threesixty_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if threesixty_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"total_cost"]
                                  @total_cost = threesixty_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if threesixty_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"avg_position"]
                                  @avg_pos = threesixty_report_hash["adgroup_id"+level_data['adgroup_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              @data_conversion = conversion_hash["adgroup_id"+level_data['adgroup_id'].to_s]
                              @data_revenue = conversion_hash["adgroup_id"+level_data['adgroup_id'].to_s+"revenue"].to_f
                          end
 
                          
                          
                          if @impression.to_f > 0
                              @click_rate = (@click.to_f / @impression.to_f) * 100
                          end 
                      
                      
                      
                      elsif job["apply_level"].to_s == "Campaign"
                          
                          
                          if level_data["status"].to_s == "暂停" || level_data["status"].to_i == 12 || level_data["status"].to_i == 23 || level_data["pause"].to_s == "true"
                              @status = "Inactive"
                                        
                          elsif level_data["status"].to_i == 24     
                              @status = "Campaign Budget not Enough"
                          
                          elsif level_data["status"].to_i == 25     
                              @status = "Account Budget not Enough"
                          end
                          
                          
                          if job["network_type"].to_s == "shenma"
                            
                              @link = "/campaigns/"+level_data["campaign_id"].to_s+"/shenma/"+level_data["network_id"].to_s+"/overview"
                              
                              if shenma_report_hash["campaign_id"+level_data['campaign_id'].to_s+"display"]
                                  @impression = shenma_report_hash["campaign_id"+level_data['campaign_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if shenma_report_hash["campaign_id"+level_data['campaign_id'].to_s+"clicks"]
                                  @click = shenma_report_hash["campaign_id"+level_data['campaign_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if shenma_report_hash["campaign_id"+level_data['campaign_id'].to_s+"total_cost"]
                                  @total_cost = shenma_report_hash["campaign_id"+level_data['campaign_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if shenma_report_hash["campaign_id"+level_data['campaign_id'].to_s+"avg_position"]
                                  @avg_pos = shenma_report_hash["campaign_id"+level_data['campaign_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              @data_conversion = conversion_hash["campaign_id"+level_data["campaign_id"].to_s]
                              @data_revenue = conversion_hash["campaign_id"+level_data["campaign_id"].to_s+"revenue"].to_f  
                          
                          
                          elsif job["network_type"].to_s == "baidu"    
                            
                              @link = "/campaigns/"+level_data["campaign_id"].to_s+"/baidu/"+level_data["network_id"].to_s+"/overview"
                              
                              if baidu_report_hash["campaign_id"+level_data['campaign_id'].to_s+"display"]
                                  @impression = baidu_report_hash["campaign_id"+level_data['campaign_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if baidu_report_hash["campaign_id"+level_data['campaign_id'].to_s+"clicks"]
                                  @click = baidu_report_hash["campaign_id"+level_data['campaign_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if baidu_report_hash["campaign_id"+level_data['campaign_id'].to_s+"total_cost"]
                                  @total_cost = baidu_report_hash["campaign_id"+level_data['campaign_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if baidu_report_hash["campaign_id"+level_data['campaign_id'].to_s+"avg_position"]
                                  @avg_pos = baidu_report_hash["campaign_id"+level_data['campaign_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              @data_conversion = conversion_hash["campaign_id"+level_data["campaign_id"].to_s]
                              @data_revenue = conversion_hash["campaign_id"+level_data["campaign_id"].to_s+"revenue"].to_f
                              
                            
                          elsif job["network_type"].to_s == "sogou"
                             
                              @link = "/campaigns/"+level_data["cpc_plan_id"].to_s+"/sogou/"+level_data["network_id"].to_s+"/overview"
                              
                              if sogou_report_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"display"]
                                  @impression = sogou_report_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if sogou_report_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"clicks"]
                                  @click = sogou_report_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if sogou_report_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"total_cost"]
                                  @total_cost = sogou_report_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if sogou_report_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"avg_position"]
                                  @avg_pos = sogou_report_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              @data_conversion = conversion_hash["campaign_id"+level_data["cpc_plan_id"].to_s]
                              @data_revenue = conversion_hash["campaign_id"+level_data["cpc_plan_id"].to_s+"revenue"].to_f
                          
                          
                          elsif job["network_type"].to_s == "360"
                            
                              @link = "/campaigns/"+level_data["campaign_id"].to_s+"/threesixty/"+level_data["network_id"].to_s+"/overview"
                              
                              if threesixty_report_hash["campaign_id"+level_data['campaign_id'].to_s+"display"]
                                  @impression = threesixty_report_hash["campaign_id"+level_data['campaign_id'].to_s+"display"]
                              else
                                  @impression = 0
                              end
                              
                              if threesixty_report_hash["campaign_id"+level_data['campaign_id'].to_s+"clicks"]
                                  @click = threesixty_report_hash["campaign_id"+level_data['campaign_id'].to_s+"clicks"]
                              else
                                  @click = 0
                              end
                              
                              if threesixty_report_hash["campaign_id"+level_data['campaign_id'].to_s+"total_cost"]
                                  @total_cost = threesixty_report_hash["campaign_id"+level_data['campaign_id'].to_s+"total_cost"]
                              else
                                  @total_cost = 0
                              end
                              
                              if threesixty_report_hash["campaign_id"+level_data['campaign_id'].to_s+"avg_position"]
                                  @avg_pos = threesixty_report_hash["campaign_id"+level_data['campaign_id'].to_s+"avg_position"]
                              else
                                  @avg_pos = 0
                              end
                              
                              @data_conversion = conversion_hash["campaign_id"+level_data["campaign_id"].to_s]
                              @data_revenue = conversion_hash["campaign_id"+level_data["campaign_id"].to_s+"revenue"].to_f
                          end
                      end
                      
                      if @total_cost.to_f > 0 && @click.to_f > 0
                          @cpc = @total_cost.to_f/@click.to_f
                      end
                      
                      if @click.to_f > 0 && @impression.to_f > 0
                          @ctr = (@click.to_f/@impression.to_f)*100
                      end
                      
                      if @avg_pos > 0 && @impression > 0
                          @avg_pos = @avg_pos.to_f / @impression.to_f
                      end
                      
                      if @data_conversion.to_i > 0 && @click > 0
                          @conv_rate = (@data_conversion.to_f / @click.to_f) * 100
                      end
                      
                      if @data_conversion.to_i > 0 && @total_cost > 0
                          @cpa = @total_cost.to_f / @data_conversion.to_f
                      end
                      
                      
                      
                      if job["apply_level"].to_s == "Campaign"
                        
                          if @data_revenue.to_f > 0 && @total_cost.to_f > 0
                              roi = @data_revenue.to_f / @total_cost.to_f
                              roi = roi.round(2)
                          else
                              roi = 0
                          end
                          
                          if job["network_type"].to_s == "sogou"
                              
                              tmp_data_array = [level_data["cpc_plan_id"].to_i,@status.to_s,level_data["campaign_name"].to_s,@link,@network_type,level_data["network_id"].to_s,@network_name,@network_currency.upcase,@impression,@click.to_i,@total_cost.to_f,@cpc,@ctr, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue,"0",@avg_pos.to_f,"0","0",roi]
                              
                              if @all_conversion_business_type.count.to_i > 0
      
                                  if @all_conversion_business_type_hash["id_"+level_data["cpc_plan_id"].to_s].nil?
                                    @all_conversion_business_type.each do |all_conversion_business_type_d|
                                      # need to do 2 time because need the type count and the revuenue
                                      tmp_data_array << 0
                                      tmp_data_array << 0
                                    end
                                  else
                                    
                                    @all_conversion_business_type_hash["id_"+level_data["cpc_plan_id"].to_s].each do |all_conversion_business_type_hash_d|
                                      tmp_data_array << all_conversion_business_type_hash_d[1]
                                    end
                                  end
                                end
                                
                                data_array << tmp_data_array
                              # data_array << [level_data["cpc_plan_id"].to_i,@status.to_s,level_data["campaign_name"].to_s,@link,@network_type,level_data["network_id"].to_s,@network_name,@network_currency.upcase,@impression,@click.to_i,@total_cost.to_f,@cpc,@ctr, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue,"0",@avg_pos.to_f,"0","0",roi]
                          elsif job["network_type"].to_s == "360"
                            
                              tmp_data_array = [level_data["campaign_id"].to_i,@status.to_s,level_data["campaign_name"].to_s,@link,@network_type,level_data["network_id"].to_s,@network_name,@network_currency.upcase,@impression,@click.to_i,@total_cost.to_f,@cpc, @ctr, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue,"0",@avg_pos.to_f,"0","0",roi]
                            
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["campaign_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["campaign_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              # data_array << [level_data["campaign_id"].to_i,@status.to_s,level_data["campaign_name"].to_s,@link,@network_type,level_data["network_id"].to_s,@network_name,@network_currency.upcase,@impression,@click.to_i,@total_cost.to_f,@cpc, @ctr, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue,"0",@avg_pos.to_f,"0","0",roi]
                          elsif job["network_type"].to_s == "baidu"
                              
                              tmp_data_array = [level_data["campaign_id"].to_i,@status.to_s,level_data["campaign_name"].to_s,@link,@network_type,level_data["network_id"].to_s,@network_name,@network_currency.upcase,@impression,@click.to_i,@total_cost.to_f,@cpc, @ctr, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue,"0",@avg_pos.to_f,"0","0",roi]
                              
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["campaign_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["campaign_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              
                              # data_array << [level_data["campaign_id"].to_i,@status.to_s,level_data["campaign_name"].to_s,@link,@network_type,level_data["network_id"].to_s,@network_name,@network_currency.upcase,@impression,@click.to_i,@total_cost.to_f,@cpc, @ctr, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue,"0",@avg_pos.to_f,"0","0",roi]
                          elsif job["network_type"].to_s == "shenma"
                            
                              tmp_data_array = [level_data["campaign_id"].to_i,@status.to_s,level_data["campaign_name"].to_s,@link,@network_type,level_data["network_id"].to_s,@network_name,@network_currency.upcase,@impression,@click.to_i,@total_cost.to_f,@cpc, @ctr, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue,"0",@avg_pos.to_f,"0","0",roi]
                              
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["campaign_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["campaign_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              
                              # data_array << [level_data["campaign_id"].to_i,@status.to_s,level_data["campaign_name"].to_s,@link,@network_type,level_data["network_id"].to_s,@network_name,@network_currency.upcase,@impression,@click.to_i,@total_cost.to_f,@cpc, @ctr, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue,"0",@avg_pos.to_f,"0","0",roi]
                          end
                      
                      
                      elsif job["apply_level"].to_s == "Ad Groups"
                          
                          
                          if @data_revenue.to_f > 0 && @total_cost.to_f > 0
                              roi = @data_revenue.to_f / @total_cost.to_f
                              roi = roi.round(2)
                          else
                              roi = 0
                          end
                          
                          if job["network_type"].to_s == "shenma"
                            
                              tmp_data_array = [level_data["adgroup_id"].to_i, @status.to_s, @name.to_s,level_data["campaign_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],job["network_type"].to_s,level_data["network_id"].to_i,@network_name, @max_cpc.to_f, @impression.to_i ,@click.to_i, @click_rate, @total_cost.to_f,@cpc.to_f,@data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,0,@avg_pos.to_f,0,0,roi]
                            
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["adgroup_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["adgroup_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              
                              # data_array << [level_data["adgroup_id"].to_i, @status.to_s, @name.to_s,level_data["campaign_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],job["network_type"].to_s,level_data["network_id"].to_i,@network_name, @max_cpc.to_f, @impression.to_i ,@click.to_i, @click_rate, @total_cost.to_f,@cpc.to_f,@data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,0,@avg_pos.to_f,0,0,roi]
                          elsif job["network_type"].to_s == "baidu"
                            
                              tmp_data_array = [level_data["adgroup_id"].to_i, @status.to_s, @name.to_s,level_data["campaign_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],job["network_type"].to_s,level_data["network_id"].to_i,@network_name, @max_cpc.to_f, @impression.to_i ,@click.to_i, @click_rate, @total_cost.to_f,@cpc.to_f,@data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,0,@avg_pos.to_f,0,0,roi]
                              
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["adgroup_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["adgroup_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              
                              # data_array << [level_data["adgroup_id"].to_i, @status.to_s, @name.to_s,level_data["campaign_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],job["network_type"].to_s,level_data["network_id"].to_i,@network_name, @max_cpc.to_f, @impression.to_i ,@click.to_i, @click_rate, @total_cost.to_f,@cpc.to_f,@data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,0,@avg_pos.to_f,0,0,roi]
                          elsif job["network_type"].to_s == "sogou"
                            
                              tmp_data_array = [level_data["cpc_grp_id"].to_i, @status.to_s, @name.to_s,level_data["cpc_plan_id"].to_i,campaign_name_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"campaign_name"],job["network_type"].to_s,level_data["network_id"].to_i,@network_name, @max_cpc.to_f, @impression.to_i ,@click.to_i, @click_rate, @total_cost.to_f,@cpc.to_f,@data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,0,@avg_pos.to_f,0,0,roi] 
                            
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["cpc_grp_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["cpc_grp_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              
                              # data_array << [level_data["cpc_grp_id"].to_i, @status.to_s, @name.to_s,level_data["cpc_plan_id"].to_i,campaign_name_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"campaign_name"],job["network_type"].to_s,level_data["network_id"].to_i,@network_name, @max_cpc.to_f, @impression.to_i ,@click.to_i, @click_rate, @total_cost.to_f,@cpc.to_f,@data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,0,@avg_pos.to_f,0,0,roi]
                          elsif job["network_type"].to_s == "360"
                            
                              tmp_data_array = [level_data["adgroup_id"].to_i, @status.to_s, @name.to_s,level_data["campaign_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],job["network_type"].to_s,level_data["network_id"].to_i,@network_name, @max_cpc.to_f, @impression.to_i ,@click.to_i, @click_rate, @total_cost.to_f,@cpc.to_f,@data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,0,@avg_pos.to_f,0,0,roi]
                              
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["adgroup_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["adgroup_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              # data_array << [level_data["adgroup_id"].to_i, @status.to_s, @name.to_s,level_data["campaign_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],job["network_type"].to_s,level_data["network_id"].to_i,@network_name, @max_cpc.to_f, @impression.to_i ,@click.to_i, @click_rate, @total_cost.to_f,@cpc.to_f,@data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,0,@avg_pos.to_f,0,0,roi]
                          end
                      
                      
                      elsif job["apply_level"].to_s == "Ads"
                          
                          if job["action"].to_s != "Make Changes"
                              if @visiturl.to_s.include?("durl")
                                  @visiturl_array = @visiturl.split("durl=")
                                  
                                  @visiturl = CGI.escape(@visiturl_array[1].to_s)
                              end
                              
                              if @m_visiturl.to_s.include?("durl")
                                  @m_visiturl_array = @m_visiturl.split("durl=")
                                  
                                  @m_visiturl = CGI.escape(@m_visiturl_array[1].to_s)
                              end
                          end
                          
                          
                          if job["network_type"].to_s == "shenma"
                            
                              tmp_data_array = [level_data["ad_id"].to_i,@status.to_s,@name.to_s,level_data["adgroup_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],level_data["campaign_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i,@network_name,@title.to_s,@desc1.to_s,@desc2.to_s,@showurl.to_s,@visiturl.to_s,@m_showurl.to_s,@m_visiturl.to_s,@cpc.to_f,@impression.to_i,@click.to_i,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,@avg_pos.to_f]
                              
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["ad_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["ad_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                               
                              # data_array << [level_data["ad_id"].to_i,@status.to_s,@name.to_s,level_data["adgroup_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],level_data["campaign_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i,@network_name,@title.to_s,@desc1.to_s,@desc2.to_s,@showurl.to_s,@visiturl.to_s,@m_showurl.to_s,@m_visiturl.to_s,@cpc.to_f,@impression.to_i,@click.to_i,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,@avg_pos.to_f]
                          elsif job["network_type"].to_s == "baidu"
                            
                              tmp_data_array = [level_data["ad_id"].to_i,@status.to_s,@name.to_s,level_data["adgroup_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],level_data["campaign_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i,@network_name,@title.to_s,@desc1.to_s,@desc2.to_s,@showurl.to_s,@visiturl.to_s,@m_showurl.to_s,@m_visiturl.to_s,@cpc.to_f,@impression.to_i,@click.to_i,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,@avg_pos.to_f]
                              
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["ad_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["ad_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              
                              # data_array << [level_data["ad_id"].to_i,@status.to_s,@name.to_s,level_data["adgroup_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],level_data["campaign_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i,@network_name,@title.to_s,@desc1.to_s,@desc2.to_s,@showurl.to_s,@visiturl.to_s,@m_showurl.to_s,@m_visiturl.to_s,@cpc.to_f,@impression.to_i,@click.to_i,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,@avg_pos.to_f]
                          elsif job["network_type"].to_s == "sogou"
                            
                              tmp_data_array = [level_data["cpc_idea_id"].to_i,@status.to_s,@name.to_s,level_data["cpc_grp_id"].to_i,campaign_name_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"campaign_name"],level_data["cpc_plan_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i,@network_name,@title.to_s,@desc1.to_s,@desc2.to_s,@showurl.to_s,@visiturl.to_s,@m_showurl.to_s,@m_visiturl.to_s,@cpc.to_f,@impression.to_i,@click.to_i,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,@avg_pos.to_f]
                              
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["cpc_idea_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["cpc_idea_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              # data_array << [level_data["cpc_idea_id"].to_i,@status.to_s,@name.to_s,level_data["cpc_grp_id"].to_i,campaign_name_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"campaign_name"],level_data["cpc_plan_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i,@network_name,@title.to_s,@desc1.to_s,@desc2.to_s,@showurl.to_s,@visiturl.to_s,@m_showurl.to_s,@m_visiturl.to_s,@cpc.to_f,@impression.to_i,@click.to_i,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,@avg_pos.to_f]
                          
                          elsif job["network_type"].to_s == "360"
                            
                              tmp_data_array = [level_data["ad_id"].to_i,@status.to_s,@name.to_s,level_data["adgroup_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],level_data["campaign_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i,@network_name,@title.to_s,@desc1.to_s,@desc2.to_s,@showurl.to_s,@visiturl.to_s,@m_showurl.to_s,@m_visiturl.to_s,@cpc.to_f,@impression.to_i,@click.to_i,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,@avg_pos.to_f]
                              
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["ad_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["ad_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                               
                              # data_array << [level_data["ad_id"].to_i,@status.to_s,@name.to_s,level_data["adgroup_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],level_data["campaign_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i,@network_name,@title.to_s,@desc1.to_s,@desc2.to_s,@showurl.to_s,@visiturl.to_s,@m_showurl.to_s,@m_visiturl.to_s,@cpc.to_f,@impression.to_i,@click.to_i,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i,@conv_rate.to_f,@cpa.to_f,@data_revenue.to_f,@avg_pos.to_f]
                          end
                      
                      
                      elsif job["apply_level"].to_s == "Keywords"
                        
                          if job["action"].to_s != "Make Changes"
                              if @visiturl.to_s.include?("durl")
                                  @visiturl_array = @visiturl.split("durl=")
                                  
                                  @visiturl = CGI.escape(@visiturl_array[1].to_s)
                              end
                              
                              if @m_visiturl.to_s.include?("durl")
                                  @m_visiturl_array = @m_visiturl.split("durl=")
                                  
                                  @m_visiturl = CGI.escape(@m_visiturl_array[1].to_s)
                              end
                          end
                          
                          if @data_revenue.to_f > 0 && @total_cost.to_f > 0
                              roi = @data_revenue.to_f / @total_cost.to_f
                              roi = roi.round(2)
                          else
                              roi = 0
                          end
                        
                          if job["network_type"].to_s == "shenma"
                            
                              tmp_data_array = [level_data["keyword_id"].to_i,@status.to_s,@name.to_s,level_data["adgroup_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],level_data["campaign_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i, @network_name, level_data["keyword"].to_s,@match.to_s,@visit_url.to_s,@m_visit_url.to_s,@max_cpc.to_f,level_data["price"].to_f,@cpc.to_f,@impression.to_i,@click.to_f,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i, @conv_rate.to_f,  @cpa.to_f, 0, @data_revenue.to_f, 0,@avg_pos.to_f ,0,0,roi]
                              
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["keyword_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["keyword_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              
                              # data_array << [level_data["keyword_id"].to_i,@status.to_s,@name.to_s,level_data["adgroup_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],level_data["campaign_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i, @network_name, level_data["keyword"].to_s,@match.to_s,@visit_url.to_s,@m_visit_url.to_s,@max_cpc.to_f,level_data["price"].to_f,@cpc.to_f,@impression.to_i,@click.to_f,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i, @conv_rate.to_f,  @cpa.to_f, 0, @data_revenue.to_f, 0,@avg_pos.to_f ,0,0,roi]
                          elsif job["network_type"].to_s == "baidu"
                            
                              tmp_data_array = [level_data["keyword_id"].to_i,@status.to_s,@name.to_s,level_data["adgroup_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],level_data["campaign_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i, @network_name, level_data["keyword"].to_s,@match.to_s,@visit_url.to_s,@m_visit_url.to_s,@max_cpc.to_f,level_data["price"].to_f,@cpc.to_f,@impression.to_i,@click.to_f,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i, @conv_rate.to_f,  @cpa.to_f, 0, @data_revenue.to_f, 0,@avg_pos.to_f ,0,0,roi]
                            
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["keyword_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["keyword_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              
                              # data_array << [level_data["keyword_id"].to_i,@status.to_s,@name.to_s,level_data["adgroup_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],level_data["campaign_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i, @network_name, level_data["keyword"].to_s,@match.to_s,@visit_url.to_s,@m_visit_url.to_s,@max_cpc.to_f,level_data["price"].to_f,@cpc.to_f,@impression.to_i,@click.to_f,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i, @conv_rate.to_f,  @cpa.to_f, 0, @data_revenue.to_f, 0,@avg_pos.to_f ,0,0,roi]
                          elsif job["network_type"].to_s == "sogou"
                            
                              tmp_data_array = [level_data["keyword_id"].to_i,@status.to_s,@name.to_s,level_data["cpc_grp_id"].to_i,campaign_name_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"campaign_name"],level_data["cpc_plan_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i, @network_name, level_data["keyword"].to_s,@match.to_s,@visit_url.to_s,@m_visit_url.to_s,@max_cpc.to_f,level_data["price"].to_f,@cpc.to_f,@impression.to_i,@click.to_f,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i, @conv_rate.to_f,  @cpa.to_f, 0, @data_revenue.to_f, 0,@avg_pos.to_f, 0,0,roi]
                              
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["keyword_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["keyword_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              # data_array << [level_data["keyword_id"].to_i,@status.to_s,@name.to_s,level_data["cpc_grp_id"].to_i,campaign_name_hash["campaign_id"+level_data['cpc_plan_id'].to_s+"campaign_name"],level_data["cpc_plan_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i, @network_name, level_data["keyword"].to_s,@match.to_s,@visit_url.to_s,@m_visit_url.to_s,@max_cpc.to_f,level_data["price"].to_f,@cpc.to_f,@impression.to_i,@click.to_f,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i, @conv_rate.to_f,  @cpa.to_f, 0, @data_revenue.to_f, 0,@avg_pos.to_f, 0,0,roi]
                          
                          elsif job["network_type"].to_s == "360"
                            
                              tmp_data_array = [level_data["keyword_id"].to_i,@status.to_s,@name.to_s,level_data["adgroup_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],level_data["campaign_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i, @network_name, level_data["keyword"].to_s,@match.to_s,@visit_url.to_s,@m_visit_url.to_s,@max_cpc.to_f,level_data["price"].to_f,@cpc.to_f,@impression.to_i,@click.to_f,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i, @conv_rate.to_f,  @cpa.to_f, 0, @data_revenue.to_f, 0,@avg_pos.to_f ,0,0,roi] 
                              
                              if @all_conversion_business_type.count.to_i > 0
      
                                if @all_conversion_business_type_hash["id_"+level_data["keyword_id"].to_s].nil?
                                  @all_conversion_business_type.each do |all_conversion_business_type_d|
                                    # need to do 2 time because need the type count and the revuenue
                                    tmp_data_array << 0
                                    tmp_data_array << 0
                                  end
                                else
                                  
                                  @all_conversion_business_type_hash["id_"+level_data["keyword_id"].to_s].each do |all_conversion_business_type_hash_d|
                                    tmp_data_array << all_conversion_business_type_hash_d[1]
                                  end
                                end
                              end
                              
                              data_array << tmp_data_array
                              # data_array << [level_data["keyword_id"].to_i,@status.to_s,@name.to_s,level_data["adgroup_id"].to_i,campaign_name_hash["campaign_id"+level_data['campaign_id'].to_s+"campaign_name"],level_data["campaign_id"].to_i,job["network_type"].to_s,level_data["network_id"].to_i, @network_name, level_data["keyword"].to_s,@match.to_s,@visit_url.to_s,@m_visit_url.to_s,@max_cpc.to_f,level_data["price"].to_f,@cpc.to_f,@impression.to_i,@click.to_f,@click_rate.to_f,@total_cost.to_f, @data_conversion.to_i, @conv_rate.to_f,  @cpa.to_f, 0, @data_revenue.to_f, 0,@avg_pos.to_f ,0,0,roi]
                          end
                          
                      else
                          data_array = []
                      end
                      
                  end
              end  
              
              
              if data_array.count.to_i > 0
                  
                  if job["apply_level"].to_s == "Campaign"
                      if !job["filter_object"].nil?
                          data_array = filter_object_campaign(job["filter_object"], data_array)
                      end
                      @csv_head = ["\xEF\xBB\xBFID","\xEF\xBB\xBFStatus", "\xEF\xBB\xBFCampaign", "\xEF\xBB\xBFLink", "\xEF\xBB\xBFChannel", "\xEF\xBB\xBFChannel ID", "\xEF\xBB\xBFAccount Name", "Currency", "Impr.", "Clicks", "Cost", "CPC", "CTR", "Conversion", "Conv. Rate", "CPA", "Revenue", "Profit", "Avg. Pos.", "RPA", "ROAS","ROI"]
                  
                  
                  elsif job["apply_level"].to_s == "Ad Groups"
                      if !job["filter_object"].nil?
                          data_array = filter_object_adgroup(job["filter_object"], data_array)
                      end
                      @csv_head = ["\xEF\xBB\xBFAd Group ID", "\xEF\xBB\xBFStatus", "\xEF\xBB\xBFAd Group Name", "\xEF\xBB\xBF﻿Campaign ID", "\xEF\xBB\xBF﻿Campaign Name", "\xEF\xBB\xBF﻿Channel Type", "\xEF\xBB\xBFChannel ID", "\xEF\xBB\xBFChannel Name", "\xEF\xBB\xBFDefault Max. CPC", "Impr.", "Clicks", "CTR", "Cost", "Avg.CPC", "Conversions", "Conv. Rate", "CPA", "Revenue", "Profit", "Avg.pos", "RPA", "ROAS","ROI"]
                   
                  
                  elsif job["apply_level"].to_s == "Ads"
                      if !job["filter_object"].nil?
                          data_array = filter_object_ad(job["filter_object"], data_array)
                      end
                      @csv_head = ["\xEF\xBB\xBFAd ID", "\xEF\xBB\xBFStatus", "\xEF\xBB\xBFAd Group Name", "\xEF\xBB\xBFAd Group ID", "\xEF\xBB\xBF﻿Campaign Name", "\xEF\xBB\xBF﻿Campaign ID", "\xEF\xBB\xBF﻿Channel Type", "\xEF\xBB\xBFChannel ID", "\xEF\xBB\xBFChannel Name", "\xEF\xBB\xBFHeadline","\xEF\xBB\xBFDescription Line1","\xEF\xBB\xBFDescription Line2", "Display Url", "Landing Page URL", "Mobile Display Url", "Mobile Landing Page URL", "Avg. CPC","Impr.", "Clicks", "CTR", "Cost", "Conversions", "Conv. Rate", "CPA", "Revenue",  "Avg.pos","ROI"]
                  
                  elsif job["apply_level"].to_s == "Keywords"
                      if !job["filter_object"].nil?
                          data_array = filter_object_keyword(job["filter_object"], data_array)
                      end
                      @csv_head = ["\xEF\xBB\xBFKeyword ID", "\xEF\xBB\xBFStatus", "\xEF\xBB\xBFAd Group Name", "\xEF\xBB\xBFAd Group ID", "\xEF\xBB\xBF﻿Campaign Name", "\xEF\xBB\xBF﻿Campaign ID", "\xEF\xBB\xBF﻿Channel Type", "\xEF\xBB\xBFChannel ID", "\xEF\xBB\xBFChannel Name", "\xEF\xBB\xBFKeyword", "Match Type", "Landing Page URL","Mobile Landing Page URL", "Default Max. CPC", "Price", "Avg. CPC","Impr.", "Clicks", "CTR", "Cost", "Conversions", "Conv. Rate", "CPA", "CPM", "Revenue", "Profit", "Avg.pos", "RPA", "ROAS","ROI"]
                  end
                  
                  
                  if @all_conversion_business_type.count.to_i > 0
                    @all_conversion_business_type.each do |all_conversion_business_type_d|
                      @csv_head << all_conversion_business_type_d
                      @csv_head << all_conversion_business_type_d+" Revenue"
                    end
                  end
                  
              end    
              
              
              if !job["edit_status"].nil?
                  @action_name = "update Status "+job["edit_status"].to_s
              end
              
              if !job["action_type"].nil?
                  if job["action_type"].include?("cpc")
                    @action_name =  job["action_type"].gsub("_", "")+ " by "+job["action_value"].to_s+""+job["action_classifier"]
                  
                  
                  elsif job["action_type"].to_s == "find_and_replace"
                    @action_name =  job["find_and_replace_name"]+" "+job["find_and_replace_find"].to_s+" with "+job["find_and_replace_value"]
                  end
              end
              
              
                  
              if job["action"].to_s != "Make Changes"
                
                  @action_name = job["action"].to_s
                  
                  @filename = @network_name.to_s + "_" + job["apply_level"].to_s + "_" + @action_name + "_" +@now.to_s
                  begin
                      if job["user_email"].to_s == "admin@adeqo.com"
                          send_csv(@filename,@csv_head,data_array,"jkwan@bmgww.com")
                      else
                          send_csv(@filename,@csv_head,data_array,job["user_email"].to_s)
                      end
                      @db["advancesearchjob"].find('_id' => job["_id"]).update_one('$set'=> { 'msg' => @db_msg.to_s ,'process' => 2, 'last_update' => @now})
                      @db.close
                      
                  rescue Exception
                    
                      unzip_folder = '/home/bmg/worker/public/advancedsearch/download/'+@filename+'.xlsx'
                      if File.exists?(unzip_folder)
                          File.delete(unzip_folder)
                      end
                    
                      @db["advancesearchjob"].find('_id' => job["_id"]).update_one('$set'=> { 'process' => 0, 'msg' => "", 'last_update' => @now})
                      @db.close
                  end
              else
                  
                  if data_array.count.to_i > 0
                      @filename = @network_name.to_s + "_" + job["apply_level"].to_s + "_" + @action_name + "_" +@now.to_s
                      # @filter = job["filter_object"]
                      # @test = data_array
                      id_data_array = data_array.collect {|ind| ind[0]}
                      result = ""
                      if job["apply_level"].to_s == "Campaign"
                        
                          if id_data_array.count.to_i > 0
                            if job["network_type"].to_s == "sogou"
                               result_msg = updatesogoucampaign(id_data_array,job["edit_status"],job["network_id"])
                            
                            
                            elsif job["network_type"].to_s == "360"
                               result_msg = updatethreesixtycampaign(id_data_array,job["edit_status"],job["network_id"])
                            
                            elsif job["network_type"].to_s == "baidu"
                                result_msg = updatebaiducampaign(id_data_array,job["edit_status"],job["network_id"])
                                
                            elsif job["network_type"].to_s == "shenma"
                                result_msg = updateshenmacampaign(id_data_array,job["edit_status"],job["network_id"])
                            end
                          end
                          
                      
                      
                      elsif job["apply_level"].to_s == "Ad Groups"
                        
                          if job["network_type"].to_s == "shenma"
                            
                              if !job["edit_status"].nil?
                                  result_msg = updateshenmaadgroup(id_data_array,job["edit_status"],job["network_id"])
                              end
                              
                              if !job["action_type"].nil?
                                  if job["action_type"].include?("cpc")
                                    result_msg = bidupdateshenmaadgroup(id_data_array,job["action_type"],job["action_value"],job["action_classifier"],job["network_id"])
                                  
                                  
                                  elsif job["action_type"].to_s == "find_and_replace"
                                    result_msg = findupdateshenmaadgroup(id_data_array,job["find_and_replace_name"],job["find_and_replace_find"],job["find_and_replace_value"],job["network_id"])
                                  end
                              end
                            
                            
                        
                          elsif job["network_type"].to_s == "baidu"
                        
                              if !job["edit_status"].nil?
                                  result_msg = updatebaiduadgroup(id_data_array,job["edit_status"],job["network_id"])
                              end
                              
                              if !job["action_type"].nil?
                                  if job["action_type"].include?("cpc")
                                    result_msg = bidupdatebaiduadgroup(id_data_array,job["action_type"],job["action_value"],job["action_classifier"],job["network_id"])
                                  
                                  
                                  elsif job["action_type"].to_s == "find_and_replace"
                                    result_msg = findupdatebaiduadgroup(id_data_array,job["find_and_replace_name"],job["find_and_replace_find"],job["find_and_replace_value"],job["network_id"])
                                  end
                              end
                              
                          elsif job["network_type"].to_s == "sogou"
                            
                              if !job["edit_status"].nil?
                                  result_msg = updatesogouadgroup(id_data_array,job["edit_status"],job["network_id"])
                              end
                              
                              if !job["action_type"].nil?
                                  if job["action_type"].include?("cpc")
                                    result_msg = bidupdatesogouadgroup(id_data_array,job["action_type"],job["action_value"],job["action_classifier"],job["network_id"])
                                  
                                  
                                  elsif job["action_type"].to_s == "find_and_replace"
                                    result_msg = findupdatesogouadgroup(id_data_array,job["find_and_replace_name"],job["find_and_replace_find"],job["find_and_replace_value"],job["network_id"])
                                  end
                              end
                          
                          
                          elsif job["network_type"].to_s == "360"
                              if !job["edit_status"].nil?
                                  result_msg = updatethreesixtyadgroup(id_data_array,job["edit_status"],job["network_id"])
                              end
                              
                              if !job["action_type"].nil?
                                  if job["action_type"].include?("cpc")
                                      result_msg = bidupdatethreesixtyadgroup(id_data_array,job["action_type"],job["action_value"],job["action_classifier"],job["network_id"])
                                  
                                  elsif job["action_type"].to_s == "find_and_replace"
                                      result_msg = findupdatethreesixtyadgroup(id_data_array,job["find_and_replace_name"],job["find_and_replace_find"],job["find_and_replace_value"],job["network_id"])
                                  end
                              end
                          end
                          
                      
                      
                      elsif job["apply_level"].to_s == "Ads"
                          
                          
                          
                          if job["network_type"].to_s == "shenma"
                            
                              if !job["edit_status"].nil?
                                  result_msg = updateshenmaad(id_data_array,job["edit_status"],job["network_id"])
                              end
                              
                              if !job["action_type"].nil?
                                  if job["action_type"].to_s == "find_and_replace"
                                      result_msg = findupdateshenmaad(id_data_array,job["find_and_replace_name"],job["find_and_replace_find"],job["find_and_replace_value"],job["network_id"])
                                  end
                              end
                            
                          elsif job["network_type"].to_s == "baidu"
                              
                              if !job["edit_status"].nil?
                                  result_msg = updatebaiduad(id_data_array,job["edit_status"],job["network_id"])
                              end
                              
                              if !job["action_type"].nil?
                                  if job["action_type"].to_s == "find_and_replace"
                                      result_msg = findupdatebaiduad(id_data_array,job["find_and_replace_name"],job["find_and_replace_find"],job["find_and_replace_value"],job["network_id"])
                                  end
                              end
                              
                          elsif job["network_type"].to_s == "sogou"
                              if !job["edit_status"].nil?
                                  result_msg = updatesogouad(id_data_array,job["edit_status"],job["network_id"])
                              end
                              
                              if !job["action_type"].nil?
                                  if job["action_type"].to_s == "find_and_replace"
                                      result_msg = findupdatesogouad(id_data_array,job["find_and_replace_name"],job["find_and_replace_find"],job["find_and_replace_value"],job["network_id"])
                                  end
                              end
                          
                          
                          elsif job["network_type"].to_s == "360"
                              if !job["edit_status"].nil?
                                  result_msg = updatethreesixtyad(id_data_array,job["edit_status"],job["network_id"])
                              end
                          
                              if !job["action_type"].nil?
                                  if job["action_type"].to_s == "find_and_replace"
                                      result_msg = findupdatethreesixtyad(id_data_array,job["find_and_replace_name"],job["find_and_replace_find"],job["find_and_replace_value"],job["network_id"])
                                  end
                              end
                          
                          end
                        
                      
                      
                      elsif job["apply_level"].to_s == "Keywords"
                          
                          
                          
                          if job["network_type"].to_s == "shenma"
                            
                              if !job["edit_status"].nil?
                                  result_msg = updateshenmakeyword(id_data_array,job["edit_status"],job["network_id"])
                              end
                              
                              
                              if !job["action_type"].nil?
                                  if job["action_type"].include?("cpc")
                                    result_msg = bidupdateshenmakeyword(id_data_array,job["action_type"],job["action_value"],job["action_classifier"],job["network_id"])
                                  
                                  
                                  elsif job["action_type"].to_s == "find_and_replace"
                                    result_msg = findupdateshenmakeyword(id_data_array,job["find_and_replace_name"],job["find_and_replace_find"],job["find_and_replace_value"],job["network_id"])
                                  end
                              end
                            
                            
                          elsif job["network_type"].to_s == "baidu"
                          
                              if !job["edit_status"].nil?
                                  result_msg = updatebaidukeyword(id_data_array,job["edit_status"],job["network_id"])
                              end
                              
                              
                              if !job["action_type"].nil?
                                  if job["action_type"].include?("cpc")
                                    result_msg = bidupdatebaidukeyword(id_data_array,job["action_type"],job["action_value"],job["action_classifier"],job["network_id"])
                                  
                                  
                                  elsif job["action_type"].to_s == "find_and_replace"
                                    result_msg = findupdatebaidukeyword(id_data_array,job["find_and_replace_name"],job["find_and_replace_find"],job["find_and_replace_value"],job["network_id"])
                                  end
                              end
                              
                          
                          elsif job["network_type"].to_s == "sogou"
                              if !job["edit_status"].nil?
                                  result_msg = updatesogoukeyword(id_data_array,job["edit_status"],job["network_id"])
                              end
                              
                              if !job["action_type"].nil?
                                  if job["action_type"].include?("cpc")
                                    result_msg = bidupdatesogoukeyword(id_data_array,job["action_type"],job["action_value"],job["action_classifier"],job["network_id"])
                                  
                                  
                                  elsif job["action_type"].to_s == "find_and_replace"
                                    result_msg = findupdatesogoukeyword(id_data_array,job["find_and_replace_name"],job["find_and_replace_find"],job["find_and_replace_value"],job["network_id"])
                                  end
                              end
                          
                          
                          elsif job["network_type"].to_s == "360"
                              if !job["edit_status"].nil?
                                  result_msg = updatethreesixtykeyword(id_data_array,job["edit_status"],job["network_id"])
                              end
                              
                              if !job["action_type"].nil?
                                  if job["action_type"].include?("cpc")
                                    result_msg = bidupdatethreesixtykeyword(id_data_array,job["action_type"],job["action_value"],job["action_classifier"],job["network_id"])
                                  
                                  
                                  elsif job["action_type"].to_s == "find_and_replace"
                                    result_msg = findupdatethreesixtykeyword(id_data_array,job["find_and_replace_name"],job["find_and_replace_find"],job["find_and_replace_value"],job["network_id"])
                                  end
                              end
                              
                          end
                          
                      end
                  else
                      result_msg = "Your request has been completed, No match data found/changed."
                  end     
                  # data = {:message => "advancedsearchjob done", :result => result, :id_data_array => id_data_array, :status => "false"}
                  # return render :json => data, :status => :ok
                  
                  
                  begin
                      mg_client = Mailgun::Client.new("key-c72a65e7d3d818852d40757182bd82c9")  
                      mb_obj = Mailgun::MessageBuilder.new()
                
                      mb_obj.set_from_address("do-not-reply@adeqo.com", {"first"=>"Adeqo", "last" => ""});

                      if job["user_email"].to_s == "admin@adeqo.com"
                          mb_obj.add_recipient(:to, "jkwan@bmgww.com", {"first" => "", "last" => ""});
                      else
                          mb_obj.add_recipient(:to, job["user_email"].to_s, {"first" => "", "last" => ""});
                      end
                      
                      # mb_obj.add_recipient(:cc, "ttung@bmgww.com", {"first" => "", "last" => ""});
                      mb_obj.add_recipient(:cc, "jkwan@bmgww.com", {"first" => "", "last" => ""});
                      mb_obj.add_recipient(:cc, "xfung@bmgww.com", {"first" => "", "last" => ""});
                      mb_obj.set_subject("Adeqo | Advance Search Report: "+ @filename.to_s);  
                      # mb_obj.set_text_body(result_msg);
                      result_msg = result_msg + "<p>To view further details visit:</p>"
                      result_msg = result_msg + "<p><a href='http://china.adeqo.com/advancedsearchistory'>http://china.adeqo.com/advancedsearchistory</a></p>"
                      result_msg = result_msg + "<p>Team Adeqo</p>"
                      mb_obj.set_html_body(result_msg);
                      mail = mg_client.send_message("china.adeqo.com", mb_obj)
                      
                  rescue Exception
                      @logger.info mail        
                  end
                  
                  @db["advancesearchjob"].find('_id' => job["_id"]).update_one('$set'=> {'process' => 2, 'last_update' => @now})
                  @db.close
              end
        end
    end
     
    @logger.info "advancesearchjob done once at "+ @now.to_s            
    data = {:message => "advancedsearchjob done", :status => "false"}
    return render :json => data, :status => :ok
     
  end
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  # _________________________________________________________________________________
  
  
  
  def findupdateshenmakeyword(id_array,find_and_replace_name,find_and_replace_find,find_and_replace_value,network_id)
      
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      update_msg_array = []
      db_name = "keyword_shenma_"+network_id.to_s
      
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  service = "account"
                  method = "getAccount"
                  
                  json = {'header' => { 
                                          'token' => network_d["api_token"].to_s,
                                          'username' => network_d["username"].to_s,
                                          'password' => network_d["password"].to_s
                                      },
                           'body'  => {
                                          'requestData' => ["account_all"]
                                      }
                          }
                          
                          
                  @account_info = shenma_api(service,method,json)
                  
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                      @header = @account_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return  msg
                  end
                 
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  requesttypearray = []
                  
                  @keyword = @baidu_db[db_name].find('keyword_id' => { "$in" => id_array})
                  @baidu_db.close()
                  
                  data_arr = []
                  
                  @keyword.no_cursor_timeout.each do |keyword_d|
                      
                      @final_url = keyword_d["visit_url"]
                      
                      requesttype = {}
                      requesttype[:keywordId]    =     keyword_d["keyword_id"].to_i
                      
                      
                      if find_and_replace_name.to_s == "keyword_replace_destination_url"
                         if @final_url.include?(".adeqo.")
                           tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                           tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                         else
                           tmp_find_and_replace_find = find_and_replace_find
                           tmp_find_and_replace_value = find_and_replace_value
                         end
                         @final_url = @final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                      end
                      
                      
                      requesttype[:destinationUrl]    =     @final_url
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      service = "keyword"
                      method = "updateKeyword"
                      
                      json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                },
                           'body'  => {
                                  'keywordTypes' => requesttypearray
                                }
                          }       
                          
                      @update_info = shenma_api(service,method,json)
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["leftQuota"]
                          
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                        
                          if find_and_replace_name.to_s == "keyword_replace_destination_url"
                              # @baidu_db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s })  
                              
                              set_detail_hash = {}
                              set_detail_hash[:visit_url] = @final_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:keyword_id] = keyword_d["keyword_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @baidu_db[db_name].bulk_write(data_arr)
                                  @baidu_db.close()  
                                  
                                  data_arr = []
                              end
                              
                          end
                          
                          
                          success_array << keyword_d["keyword_id"].to_i
                      else
                          fail_array << keyword_d["keyword_id"].to_i
                          
                          key = keyword_d["keyword_id"].to_s
                          fail_msg[key] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 100
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                                
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                      
                      data_arr = []
                  end
                  
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('keyword_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["keyword_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated "+ find_and_replace_name +" Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  def findupdatebaidukeyword(id_array,find_and_replace_name,find_and_replace_find,find_and_replace_value,network_id)
      
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      update_msg_array = []
      db_name = "keyword_baidu_"+network_id.to_s
      
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  service = "AccountService"
                  method = "getAccountInfo"
                  
                  json = {'header' => { 
                              'token' => network_d["api_token"].to_s,
                              'username' => network_d["username"].to_s,
                              'password' => network_d["password"].to_s 
                            },
                          'body'  => {
                              'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                            }
                      }       
                      
                  @account_info = baidu_api(service,method,json)
                  
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                      @header = @account_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return  msg
                  end
                 
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  requesttypearray = []
                  
                  @keyword = @baidu_db[db_name].find('keyword_id' => { "$in" => id_array})
                  @baidu_db.close()
                  
                  data_arr = []
                  
                  @keyword.no_cursor_timeout.each do |keyword_d|
                      
                      @final_url = keyword_d["visit_url"]
                      @m_final_url = keyword_d["mobile_visit_url"]
                      
                      requesttype = {}
                      requesttype[:keywordId]    =     keyword_d["keyword_id"].to_i
                      requesttype[:campaignId]    =     0
                      requesttype[:adgroupId]    =     0
                      requesttype[:status]    =     0
                      
                      
                      if find_and_replace_name.to_s == "keyword_replace_destination_url"
                         if @final_url.include?(".adeqo.")
                           tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                           tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                         else
                           tmp_find_and_replace_find = find_and_replace_find
                           tmp_find_and_replace_value = find_and_replace_value
                         end
                         @final_url = @final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                      end
                      
                      if find_and_replace_name.to_s == "keyword_replace_mobile_destination_url"
                          if @m_final_url.include?(".adeqo.")
                            tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                            tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          end
                          @m_final_url = @m_final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                          requesttype[:mobileDestinationUrl] =  @m_final_url
                      end
                      
                      requesttype[:pcDestinationUrl]    =     @final_url
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      service = "KeywordService"
                      method = "updateWord"
                      
                      json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                },
                           'body'  => {
                                  'keywordTypes' => requesttypearray
                                }
                          }       
                          
                      @update_info = baidu_api(service,method,json)
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["rquota"]
                          
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                        
                          if find_and_replace_name.to_s == "keyword_replace_destination_url"
                              # @baidu_db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s })  
                              
                              set_detail_hash = {}
                              set_detail_hash[:visit_url] = @final_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:keyword_id] = keyword_d["keyword_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @baidu_db[db_name].bulk_write(data_arr)
                                  @baidu_db.close()  
                                  
                                  data_arr = []
                              end
                              
                          end
                          
                          if find_and_replace_name.to_s == "keyword_replace_mobile_destination_url"
                              # @baidu_db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> { 'mobile_visit_url' => @m_final_url.to_s })
                              
                              set_detail_hash = {}
                              set_detail_hash[:mobile_visit_url] = @m_final_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:keyword_id] = keyword_d["keyword_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @baidu_db[db_name].bulk_write(data_arr)
                                  @baidu_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          # @baidu_db.close()                                
                          
                          success_array << keyword_d["keyword_id"].to_i
                      else
                          fail_array << keyword_d["keyword_id"].to_i
                          
                          key = keyword_d["keyword_id"].to_s
                          fail_msg[key] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                                
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                      
                      data_arr = []
                  end
                  
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('keyword_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["keyword_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated "+ find_and_replace_name +" Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  

  def findupdatesogoukeyword(id_array,find_and_replace_name,find_and_replace_find,find_and_replace_value,network_id)
      
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      update_msg_array = []
      db_name = "keyword_sogou_"+network_id.to_s
      
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                  sogou_result = @sogou_api.call(:get_account_info)
                 
                  if sogou_result.header[:res_header][:rquota].to_i <= 500
                      msg = "You don't have enough quote, your request cannot be done."
                      return  msg
                  end
                    
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcService")
                  requesttypearray = []
                  
                  @keyword = @sogou_db[db_name].find('keyword_id' => { "$in" => id_array})
                  @sogou_db.close()
                  
                  data_arr = []
                  
                  @keyword.no_cursor_timeout.each do |keyword_d|
                      
                      @final_url = keyword_d["visit_url"]
                      @m_final_url = keyword_d["mobile_visit_url"]
                      
                      requesttype = {}
                      requesttype[:cpcId]    =     keyword_d["keyword_id"].to_i
                      requesttype[:cpc]    =     0
                      requesttype[:cpcGrpId]    =     0
                      
                      
                      if find_and_replace_name.to_s == "keyword_replace_destination_url"
                         if @final_url.include?(".adeqo.")
                            tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                            tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                         else
                            tmp_find_and_replace_find = find_and_replace_find
                            tmp_find_and_replace_value = find_and_replace_value
                         end
                         @final_url = @final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                         requesttype[:visitUrl]    =     @final_url
                      end
                      
                      if find_and_replace_name.to_s == "keyword_replace_mobile_destination_url"
                          if @m_final_url.include?(".adeqo.")
                              tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          else
                              tmp_find_and_replace_find = find_and_replace_find
                              tmp_find_and_replace_value = find_and_replace_value
                          end
                          @m_final_url = @m_final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                          requesttype[:mobileVisitUrl] =  @m_final_url
                      end
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      @update_status = @sogou_api.call(:update_cpc, message: { cpcTypes: requesttypearray })
                                                                                           
                      @header = @update_status.header.to_hash
                      @logger.info @header 
                      # @return_num =  @header[:res_header][:oprs]
                      
                      requesttypearray = []
                      
                      @msg = @header[:res_header][:desc]
                      remain_quote = @header[:res_header][:rquota]
                      
                      if @msg.to_s.downcase == "success"
                          
                          if find_and_replace_name.to_s == "keyword_replace_destination_url"
                              # @sogou_db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s })
                              
                              
                              set_detail_hash = {}
                              set_detail_hash[:visit_url] = @final_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:keyword_id] = keyword_d["keyword_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @sogou_db[db_name].bulk_write(data_arr)
                                  @sogou_db.close()  
                                  
                                  data_arr = []
                              end
                                
                          end
                          
                          if find_and_replace_name.to_s == "keyword_replace_mobile_destination_url"
                              # @sogou_db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> { 'mobile_visit_url' => @m_final_url.to_s })
                              
                              
                              set_detail_hash = {}
                              set_detail_hash[:mobile_visit_url] = @m_final_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:keyword_id] = keyword_d["keyword_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @sogou_db[db_name].bulk_write(data_arr)
                                  @sogou_db.close()  
                                  
                                  data_arr = []
                              end
                              
                          end
                          # @sogou_db.close()                                
                          
                          success_array << keyword_d["keyword_id"].to_i
                      else
                          fail_array << keyword_d["keyword_id"].to_i
                          
                          key = keyword_d["keyword_id"].to_s
                          fail_msg[key] = @header[:res_header][:failures][:message].to_s
                      end
                      
                      if remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                                
                      @sogou_db[db_name].bulk_write(data_arr)
                      @sogou_db.close()  
                      
                      data_arr = []
                  end
                              
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @sogou_db[db_name].find('keyword_id' => { "$in" => fail_array})
                      @sogou_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["keyword_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated "+ find_and_replace_name +" Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  
  def bidupdateshenmakeyword(id_array,action_type,action_value,action_classifier,network_id)
      
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      update_msg_array = []
      db_name = "keyword_shenma_"+network_id.to_s
      
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  service = "account"
                  method = "getAccount"
                  
                  json = {'header' => { 
                                          'token' => network_d["api_token"].to_s,
                                          'username' => network_d["username"].to_s,
                                          'password' => network_d["password"].to_s
                                      },
                           'body'  => {
                                          'requestData' => ["account_all"]
                                      }
                          }
                          
                          
                  @account_info = shenma_api(service,method,json)
                  
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                      @header = @account_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return  msg
                  end
                      
                    
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  requesttypearray = []
                  
                  @keyword = @baidu_db[db_name].find('keyword_id' => { "$in" => id_array})
                  @baidu_db.close()
                  
                  data_arr = []
                  
                  @keyword.no_cursor_timeout.each do |keyword_d|
                    
                      @price = keyword_d["price"]
                      
                      requesttype = {}
                      requesttype[:keywordId]    =     keyword_d["keyword_id"].to_i
                      
                      if action_type.to_s == "set_cpc"
                          @new_price = action_value.to_f
                          requesttype[:price]         =     @new_price  
                      end
                      
                      if action_type.to_s == "increase_cpc"
                          if action_classifier.to_s == "RMB"
                              @new_price = @price.to_f + action_value.to_f
                              requesttype[:price]         =     @new_price.to_f
                          end
                          
                          if action_classifier.to_s == "%"
                              @new_price = @price.to_f + (@price.to_f*action_value.to_f)/100
                              requesttype[:price]         =     @new_price
                          end
                            
                      end
                      
                      if action_type.to_s == "decrease_cpc"
                          if action_classifier.to_s == "RMB"
                              @new_price = @price.to_f - action_value.to_f
                              requesttype[:price]         =     @new_price.to_f
                          end
                          
                          if action_classifier.to_s == "%"
                              @new_price = @price.to_f - (@price.to_f*action_value.to_f)/100
                              requesttype[:price]         =     @new_price
                          end
                      end
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      service = "keyword"
                      method = "updateKeyword"
                      
                      json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                },
                           'body'  => {
                                  'keywordTypes' => requesttypearray
                                }
                          }       
                          
                      @update_info = shenma_api(service,method,json)
                                                                                           
                      @logger.info @update_info 
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                        
                        
                          # @baidu_db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> { 'price' => @new_price.to_f })
                          # @baidu_db.close()
                          
                          set_detail_hash = {}
                          set_detail_hash[:price] = @new_price.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:keyword_id] = keyword_d["keyword_id"].to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @baidu_db[db_name].bulk_write(data_arr)
                              @baidu_db.close()  
                              
                              data_arr = []
                          end                                
                          
                          success_array << keyword_d["keyword_id"].to_i
                      else
                          fail_array << keyword_d["keyword_id"].to_i
                          
                          key = keyword_d["keyword_id"].to_s
                          fail_msg[key] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 100
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('keyword_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["keyword_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated bid Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end 
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  def bidupdatebaidukeyword(id_array,action_type,action_value,action_classifier,network_id)
      
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      update_msg_array = []
      db_name = "keyword_baidu_"+network_id.to_s
      
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  service = "AccountService"
                  method = "getAccountInfo"
                  
                  json = {'header' => { 
                              'token' => network_d["api_token"].to_s,
                              'username' => network_d["username"].to_s,
                              'password' => network_d["password"].to_s 
                            },
                          'body'  => {
                              'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                            }
                      }       
                      
                  @account_info = baidu_api(service,method,json)
                  
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                      @header = @account_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return  msg
                  end
                      
                    
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  requesttypearray = []
                  
                  @keyword = @baidu_db[db_name].find('keyword_id' => { "$in" => id_array})
                  @baidu_db.close()
                  
                  data_arr = []
                  
                  @keyword.no_cursor_timeout.each do |keyword_d|
                    
                      @price = keyword_d["price"]
                      
                      requesttype = {}
                      requesttype[:keywordId]    =     keyword_d["keyword_id"].to_i
                      requesttype[:campaignId]    =     0
                      requesttype[:adgroupId]    =     0
                      requesttype[:status]    =     0
                      
                      if action_type.to_s == "set_cpc"
                          @new_price = action_value.to_f
                          requesttype[:price]         =     @new_price  
                      end
                      
                      if action_type.to_s == "increase_cpc"
                          if action_classifier.to_s == "RMB"
                              @new_price = @price.to_f + action_value.to_f
                              requesttype[:price]         =     @new_price.to_f
                          end
                          
                          if action_classifier.to_s == "%"
                              @new_price = @price.to_f + (@price.to_f*action_value.to_f)/100
                              requesttype[:price]         =     @new_price
                          end
                            
                      end
                      
                      if action_type.to_s == "decrease_cpc"
                          if action_classifier.to_s == "RMB"
                              @new_price = @price.to_f - action_value.to_f
                              requesttype[:price]         =     @new_price.to_f
                          end
                          
                          if action_classifier.to_s == "%"
                              @new_price = @price.to_f - (@price.to_f*action_value.to_f)/100
                              requesttype[:price]         =     @new_price
                          end
                      end
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      service = "KeywordService"
                      method = "updateWord"
                      
                      json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                },
                           'body'  => {
                                  'keywordTypes' => requesttypearray
                                }
                          }       
                          
                      @update_info = baidu_api(service,method,json)
                                                                                           
                      @logger.info @update_info 
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                        
                        
                          # @baidu_db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> { 'price' => @new_price.to_f })
                          # @baidu_db.close()
                          
                          set_detail_hash = {}
                          set_detail_hash[:price] = @new_price.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:keyword_id] = keyword_d["keyword_id"].to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @baidu_db[db_name].bulk_write(data_arr)
                              @baidu_db.close()  
                              
                              data_arr = []
                          end                                
                          
                          success_array << keyword_d["keyword_id"].to_i
                      else
                          fail_array << keyword_d["keyword_id"].to_i
                          
                          key = keyword_d["keyword_id"].to_s
                          fail_msg[key] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('keyword_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["keyword_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated bid Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end 
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  
  
  
  
  def bidupdatesogoukeyword(id_array,action_type,action_value,action_classifier,network_id)
      
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      update_msg_array = []
      db_name = "keyword_sogou_"+network_id.to_s
      
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                  sogou_result = @sogou_api.call(:get_account_info)
                 
                  if sogou_result.header[:res_header][:rquota].to_i <= 500
                      msg = "You don't have enough quote, your request cannot be done."
                      return  msg
                  end
                    
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcService")
                  requesttypearray = []
                  
                  @keyword = @sogou_db[db_name].find('keyword_id' => { "$in" => id_array})
                  @sogou_db.close()
                  
                  data_arr = []
                  
                  @keyword.no_cursor_timeout.each do |keyword_d|
                    
                      @price = keyword_d["price"]
                      
                      requesttype = {}
                      requesttype[:cpcId]    =     keyword_d["keyword_id"].to_i
                      requesttype[:cpc]    =     0
                      requesttype[:cpcGrpId]    =     0
                      
                      if action_type.to_s == "set_cpc"
                          @new_price = action_value.to_f
                          requesttype[:price]         =     @new_price  
                      end
                      
                      if action_type.to_s == "increase_cpc"
                          if action_classifier.to_s == "RMB"
                              @new_price = @price.to_f + action_value.to_f
                              requesttype[:price]         =     @new_price.to_f
                          end
                          
                          if action_classifier.to_s == "%"
                              @new_price = @price.to_f + (@price.to_f*action_value.to_f)/100
                              requesttype[:price]         =     @new_price
                          end
                            
                      end
                      
                      if action_type.to_s == "decrease_cpc"
                          if action_classifier.to_s == "RMB"
                              @new_price = @price.to_f - action_value.to_f
                              requesttype[:price]         =     @new_price.to_f
                          end
                          
                          if action_classifier.to_s == "%"
                              @new_price = @price.to_f - (@price.to_f*action_value.to_f)/100
                              requesttype[:price]         =     @new_price
                          end
                      end
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      @update_status = @sogou_api.call(:update_cpc, message: { cpcTypes: requesttypearray })
                                                                                           
                      @header = @update_status.header.to_hash
                      @logger.info @header 
                      # @return_num =  @header[:res_header][:oprs]
                      
                      requesttypearray = []
                      
                      @msg = @header[:res_header][:desc]
                      remain_quote = @header[:res_header][:rquota]
                      
                      if @msg.to_s.downcase == "success"
                          # @sogou_db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> { 'price' => @new_price.to_f })
                          # @sogou_db.close()                     
                          
                          set_detail_hash = {}
                          set_detail_hash[:price] = @new_price.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:keyword_id] = keyword_d["keyword_id"].to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @sogou_db[db_name].bulk_write(data_arr)
                              @sogou_db.close()  
                              
                              data_arr = []
                          end           
                          
                          success_array << keyword_d["keyword_id"].to_i
                      else
                          fail_array << keyword_d["keyword_id"].to_i
                          
                          key = keyword_d["keyword_id"].to_s
                          fail_msg[key] = @header[:res_header][:failures][:message].to_s
                      end
                      
                      if remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 100
                      @sogou_db[db_name].bulk_write(data_arr)
                      @sogou_db.close()  
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @sogou_db[db_name].find('keyword_id' => { "$in" => fail_array})
                      @sogou_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["keyword_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated bid Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  def updateshenmakeyword(id_array,status,network_id)
      
      if status.to_s == "inactive"
          pause = "true"
      end
      if status.to_s == "active"
          pause = "false"
      end
      
      db_name = "keyword_shenma_"+network_id.to_s
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
       
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  service = "account"
                  method = "getAccount"
                  
                  json = {'header' => { 
                                          'token' => network_d["api_token"].to_s,
                                          'username' => network_d["username"].to_s,
                                          'password' => network_d["password"].to_s
                                      },
                           'body'  => {
                                          'requestData' => ["account_all"]
                                      }
                          }
                          
                          
                  @account_info = shenma_api(service,method,json)
                  
                  
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                      @header = @account_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return msg
                  end
                 
                    
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
              
                  data_arr = []
                  id_array.each do |id_array_d|
                      
                      requesttype = {}
                      requesttype[:keywordId]    =     id_array_d.to_i
                      requesttype[:pause]    =     pause
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      service = "keyword"
                      method = "updateKeyword"
                      
                      json = {'header' => { 
                                      'token' => network_d["api_token"].to_s,
                                      'username' => network_d["username"].to_s,
                                      'password' => network_d["password"].to_s 
                                    },
                               'body'  => {
                                      'keywordTypes' => requesttypearray
                                    }
                              }       
                          
                      @update_info = baidu_api(service,method,json)
                      @logger.info @update_info 
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                        
                          # @baidu_db[db_name].find('keyword_id' => id_array_d.to_i).update_one('$set'=> { 'pause' => pause.to_s, 'status' => @update_info["body"]["data"][0]["status"].to_i })
                          # @baidu_db.close()
                          
                          set_detail_hash = {}
                          set_detail_hash[:pause] = pause.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:keyword_id] = id_array_d.to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @baidu_db[db_name].bulk_write(data_arr)
                              @baidu_db.close()  
                              
                              data_arr = []
                          end
                          
                          success_array << id_array_d.to_i
                      else
                          fail_array << id_array_d.to_i
                          
                          fail_msg[id_array_d.to_s] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 100
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  
                  if data_arr.count.to_i > 0
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["db_name"].find('keyword_id' => { "$in" => success_array})
#                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["keyword"].to_s + " updated status Successful."
                      # end
                  # end
                   
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('keyword_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["keyword_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated status Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  def updatebaidukeyword(id_array,status,network_id)
      
      if status.to_s == "inactive"
          pause = "true"
      end
      if status.to_s == "active"
          pause = "false"
      end
      
      db_name = "keyword_baidu_"+network_id.to_s
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
       
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  service = "AccountService"
                  method = "getAccountInfo"
                  
                  json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                },
                              'body'  => {
                                  'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                                }
                          }       
                      
                  @account_info = baidu_api(service,method,json)
                  
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                      @header = @account_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return msg
                  end
                 
                    
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
              
                  data_arr = []
                  id_array.each do |id_array_d|
                      
                      requesttype = {}
                      requesttype[:keywordId]    =     id_array_d.to_i
                      requesttype[:campaignId]    =     0
                      requesttype[:adgroupId]    =     0
                      requesttype[:status]    =     0
                      
                      requesttype[:pause]    =     pause
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      service = "KeywordService"
                      method = "updateWord"
                      
                      json = {'header' => { 
                                      'token' => network_d["api_token"].to_s,
                                      'username' => network_d["username"].to_s,
                                      'password' => network_d["password"].to_s 
                                    },
                               'body'  => {
                                      'keywordTypes' => requesttypearray
                                    }
                              }       
                          
                      @update_info = baidu_api(service,method,json)
                      @logger.info @update_info 
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                        
                          # @baidu_db[db_name].find('keyword_id' => id_array_d.to_i).update_one('$set'=> { 'pause' => pause.to_s, 'status' => @update_info["body"]["data"][0]["status"].to_i })
                          # @baidu_db.close()
                          
                          set_detail_hash = {}
                          set_detail_hash[:pause] = pause.to_s
                          set_detail_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:keyword_id] = id_array_d.to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @baidu_db[db_name].bulk_write(data_arr)
                              @baidu_db.close()  
                              
                              data_arr = []
                          end
                          
                          success_array << id_array_d.to_i
                      else
                          fail_array << id_array_d.to_i
                          
                          fail_msg[id_array_d.to_s] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  
                  if data_arr.count.to_i > 0
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["db_name"].find('keyword_id' => { "$in" => success_array})
#                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["keyword"].to_s + " updated status Successful."
                      # end
                  # end
                   
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('keyword_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["keyword_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated status Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  
  
  
  def updatesogoukeyword(id_array,status,network_id)
      
      if status.to_s == "inactive"
          pause = "true"
      end
      if status.to_s == "active"
          pause = "false"
      end
      
      db_name = "keyword_sogou_"+network_id.to_s
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
       
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                  sogou_result = @sogou_api.call(:get_account_info)
                 
                  if sogou_result.header[:res_header][:rquota].to_i <= 500
                      msg = "You don't have enough quote, your request cannot be done."
                      return  msg
                  end
                  
                    
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcService")
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
              
                  data_arr = []
                  id_array.each do |id_array_d|
                      
                      requesttype = {}
                      requesttype[:cpcId]    =     id_array_d.to_i
                      requesttype[:cpcGrpId]    =     0
                      requesttype[:cpc]    =     0
                      
                      requesttype[:pause]    =     pause
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      @update_status = @sogou_api.call(:update_cpc, message: { cpcTypes: requesttypearray })
                                                                                           
                      @header = @update_status.header.to_hash
                      @logger.info @header 
                      
                      @msg = @header[:res_header][:desc]
                      remain_quote = @header[:res_header][:rquota]
                      
                      requesttypearray = []
                      
                      if @msg.to_s.downcase == "success"
                          # @sogou_db[db_name].find('keyword_id' => id_array_d.to_i).update_one('$set'=> { 'pause' => pause.to_s })
                          # @sogou_db.close()
                          
                          
                          set_detail_hash = {}
                          set_detail_hash[:pause] = pause.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:keyword_id] = id_array_d.to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @sogou_db[db_name].bulk_write(data_arr)
                              @sogou_db.close()  
                              
                              data_arr = []
                          end
                          
                          
                          success_array << id_array_d.to_i
                      else
                          fail_array << id_array_d.to_i
                          
                          fail_msg[id_array_d.to_s] = @header[:res_header][:failures][:message].to_s
                      end
                      
                      if remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  
                  if data_arr.count.to_i > 0
                      @sogou_db[db_name].bulk_write(data_arr)
                      @sogou_db.close()  
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["db_name"].find('keyword_id' => { "$in" => success_array})
#                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["keyword"].to_s + " updated status Successful."
                      # end
                  # end
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @sogou_db[db_name].find('keyword_id' => { "$in" => fail_array})
                      @sogou_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["keyword_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated status Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  def findupdateshenmaad(id_array,find_and_replace_name,find_and_replace_find,find_and_replace_value,network_id)
      
      db_name = "ad_shenma_"+network_id.to_s
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
       
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  
                  
                  service = "account"
                  method = "getAccount"
                  
                  json = {'header' => { 
                                          'token' => network_d["api_token"].to_s,
                                          'username' => network_d["username"].to_s,
                                          'password' => network_d["password"].to_s
                                      },
                           'body'  => {
                                          'requestData' => ["account_all"]
                                      }
                          }
                          
                          
                  @account_info = shenma_api(service,method,json)
                  
                  
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                      @header = @account_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return msg
                  end    
                  
                  
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  @ad = @baidu_db[db_name].find('ad_id' => { "$in" => id_array})
                  @baidu_db.close()
                  
                  
                  # @logger.info find_and_replace_find
                  # @logger.info "//////////////////////////"
                  # @logger.info find_and_replace_value
                  # @logger.info "//////////////////////////"
                  
                  data_arr = []
                  
                  @ad.no_cursor_timeout.each do |ad_d|
                      
                      @title = ad_d["title"]
                      @description = ad_d["description"]
                      @display_url = ad_d["show_url"]
                      @final_url = ad_d["visit_url"]
                      
                      
                      requesttype = {}
                      requesttype[:creativeId]    =     ad_d["ad_id"].to_i
                      requesttype[:adgroupId]    =     0
                      requesttype[:status]    =     0
                      
                      if find_and_replace_name.to_s == "replace_headline"
                          @title = @title.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                      end
                      
                      if find_and_replace_name.to_s == "replace_desc_1"
                          @description = @description.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                      end
                      
                      
                      if find_and_replace_name.to_s == "replace_display_url"
                          if @display_url.include?(".adeqo.")
                              tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          else
                              tmp_find_and_replace_find = find_and_replace_find
                              tmp_find_and_replace_value = find_and_replace_value
                          end
                        
                          @display_url = @display_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                          requesttype[:displayUrl]         =     @display_url  
                      end
                      
                      if find_and_replace_name.to_s == "replace_destination_url"
                          if @final_url.include?(".adeqo.")
                              tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          else
                              tmp_find_and_replace_find = find_and_replace_find
                              tmp_find_and_replace_value = find_and_replace_value
                          end
                        
                          @final_url = @final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                      end
                      
                      # if find_and_replace_name.to_s == "replace_mobile_display_url"
                          # if @m_display_url.include?(".adeqo.")
                              # tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              # tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          # else
                              # tmp_find_and_replace_find = find_and_replace_find
                              # tmp_find_and_replace_value = find_and_replace_value
                          # end
#                           
                          # @m_display_url = @m_display_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                          # requesttype[:mobileDisplayUrl]   =  @m_display_url  
                      # end
#                       
                      # if find_and_replace_name.to_s == "replace_mobile_destination_url"
                          # if @m_final_url.include?(".adeqo.")
                              # tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              # tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          # else
                              # tmp_find_and_replace_find = find_and_replace_find
                              # tmp_find_and_replace_value = find_and_replace_value
                          # end
#                           
                          # @m_final_url = @m_final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                          # requesttype[:mobileDestinationUrl] =    @m_final_url
                      # end
                      
                      requesttype[:title] = @title
                      requesttype[:description1] = @description_1
                      requesttype[:destinationUrl]    =     @final_url
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      service = "creative"
                      method = "updateCreative"
                      
                      json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                },
                           'body'  => {
                                  'creativeTypes' => requesttypearray
                                }
                          }       
                          
                      @update_info = shenma_api(service,method,json)
                      
                      # @logger.info json.to_s
                      # @logger.info "//////////////////////////"
                      # @logger.info @update_info
                      
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                                        
                          if find_and_replace_name.to_s == "replace_headline"
                              # @baidu_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'title' => @title.to_s })
                              # @baidu_db.close()  
                              
                              set_detail_hash = {}
                              set_detail_hash[:title] = @title.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:ad_id] = ad_d["ad_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @baidu_db[db_name].bulk_write(data_arr)
                                  @baidu_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_desc_1"
                              # @baidu_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'description_1' => @description_1.to_s })
                              # @baidu_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:description] = @description.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:ad_id] = ad_d["ad_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @baidu_db[db_name].bulk_write(data_arr)
                                  @baidu_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          
                          if find_and_replace_name.to_s == "replace_display_url"
                              # @baidu_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'show_url' => @display_url.to_s })
                              # @baidu_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:show_url] = @display_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:ad_id] = ad_d["ad_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @baidu_db[db_name].bulk_write(data_arr)
                                  @baidu_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_destination_url"
                              # @baidu_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s })
                              # @baidu_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:visit_url] = @final_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:ad_id] = ad_d["ad_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @sogou_db[db_name].bulk_write(data_arr)
                                  @sogou_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          
                          success_array << ad_d["ad_id"].to_i
                      else
                          fail_array << ad_d["ad_id"].to_i
                          
                          key = ad_d["ad_id"].to_s
                          fail_msg[key] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 100
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 100
                                
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                      
                  end
                  
                  msg = "Your request is Processed. Please wait for the channel approve your request before you submit your changes.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["db_name"].find('cpc_idea_id' => { "$in" => success_array})
                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["name"].to_s + " updated status Successful."
                      # end
                           
                  # end
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('ad_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["ad_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["title"].to_s + " updated "+ find_and_replace_name +" Fail: " + fail_msg[key]
                      end
                  end
                  return msg
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
           
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  def findupdatebaiduad(id_array,find_and_replace_name,find_and_replace_find,find_and_replace_value,network_id)
      
      db_name = "ad_baidu_"+network_id.to_s
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
       
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  
                  
                  service = "AccountService"
                  method = "getAccountInfo"
                  
                  json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                },
                           'body'  => {
                                  'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                                }
                          }       
                      
                  @account_info = baidu_api(service,method,json)
                  
                  
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                      @header = @account_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return msg
                  end    
                  
                  
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  @ad = @baidu_db[db_name].find('ad_id' => { "$in" => id_array})
                  @baidu_db.close()
                  
                  
                  # @logger.info find_and_replace_find
                  # @logger.info "//////////////////////////"
                  # @logger.info find_and_replace_value
                  # @logger.info "//////////////////////////"
                  
                  data_arr = []
                  
                  @ad.no_cursor_timeout.each do |ad_d|
                      
                      @title = ad_d["title"]
                      @description_1 = ad_d["description_1"]
                      @description_2 = ad_d["description_2"]
                      @display_url = ad_d["show_url"]
                      @final_url = ad_d["visit_url"]
                      @m_display_url = ad_d["mobile_show_url"]
                      @m_final_url = ad_d["mobile_visit_url"]
                      
                      
                      requesttype = {}
                      requesttype[:creativeId]    =     ad_d["ad_id"].to_i
                      requesttype[:adgroupId]    =     0
                      requesttype[:status]    =     0
                      
                      if find_and_replace_name.to_s == "replace_headline"
                          @title = @title.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                      end
                      
                      if find_and_replace_name.to_s == "replace_desc_1"
                          @description_1 = @description_1.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                      end
                      
                      if find_and_replace_name.to_s == "replace_desc_2"
                          @description_2 = @description_2.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                          requesttype[:description2] = @description_2
                      end
                      
                      if find_and_replace_name.to_s == "replace_display_url"
                          if @display_url.include?(".adeqo.")
                              tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          else
                              tmp_find_and_replace_find = find_and_replace_find
                              tmp_find_and_replace_value = find_and_replace_value
                          end
                        
                          @display_url = @display_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                          requesttype[:pcDisplayUrl]         =     @display_url  
                      end
                      
                      if find_and_replace_name.to_s == "replace_destination_url"
                          if @final_url.include?(".adeqo.")
                              tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          else
                              tmp_find_and_replace_find = find_and_replace_find
                              tmp_find_and_replace_value = find_and_replace_value
                          end
                        
                          @final_url = @final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                      end
                      
                      if find_and_replace_name.to_s == "replace_mobile_display_url"
                          if @m_display_url.include?(".adeqo.")
                              tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          else
                              tmp_find_and_replace_find = find_and_replace_find
                              tmp_find_and_replace_value = find_and_replace_value
                          end
                          
                          @m_display_url = @m_display_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                          requesttype[:mobileDisplayUrl]   =  @m_display_url  
                      end
                      
                      if find_and_replace_name.to_s == "replace_mobile_destination_url"
                          if @m_final_url.include?(".adeqo.")
                              tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          else
                              tmp_find_and_replace_find = find_and_replace_find
                              tmp_find_and_replace_value = find_and_replace_value
                          end
                          
                          @m_final_url = @m_final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                          requesttype[:mobileDestinationUrl] =    @m_final_url
                      end
                      
                      requesttype[:title] = @title
                      requesttype[:description1] = @description_1
                      requesttype[:pcDestinationUrl]    =     @final_url
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      service = "CreativeService"
                      method = "updateCreative"
                      
                      json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                },
                           'body'  => {
                                  'creativeTypes' => requesttypearray
                                }
                          }       
                          
                      @update_info = baidu_api(service,method,json)
                      
                      # @logger.info json.to_s
                      # @logger.info "//////////////////////////"
                      # @logger.info @update_info
                      
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                                        
                          if find_and_replace_name.to_s == "replace_headline"
                              # @baidu_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'title' => @title.to_s })
                              # @baidu_db.close()  
                              
                              set_detail_hash = {}
                              set_detail_hash[:title] = @title.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:ad_id] = ad_d["ad_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @baidu_db[db_name].bulk_write(data_arr)
                                  @baidu_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_desc_1"
                              # @baidu_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'description_1' => @description_1.to_s })
                              # @baidu_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:description_1] = @description_1.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:ad_id] = ad_d["ad_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @baidu_db[db_name].bulk_write(data_arr)
                                  @baidu_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_desc_2"
                              # @baidu_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'description_2' => @description_2.to_s })
                              # @baidu_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:description_2] = @description_2.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:ad_id] = ad_d["ad_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @baidu_db[db_name].bulk_write(data_arr)
                                  @baidu_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_display_url"
                              # @baidu_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'show_url' => @display_url.to_s })
                              # @baidu_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:show_url] = @display_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:ad_id] = ad_d["ad_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @baidu_db[db_name].bulk_write(data_arr)
                                  @baidu_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_destination_url"
                              # @baidu_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s })
                              # @baidu_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:visit_url] = @final_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:ad_id] = ad_d["ad_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @sogou_db[db_name].bulk_write(data_arr)
                                  @sogou_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_mobile_display_url"
                              # @baidu_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'mobile_show_url' => @m_display_url.to_s })
                              # @baidu_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:mobile_show_url] = @m_display_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:ad_id] = ad_d["ad_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @baidu_db[db_name].bulk_write(data_arr)
                                  @baidu_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_mobile_destination_url"
                              # @baidu_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'mobile_visit_url' => @m_final_url.to_s })
                              # @baidu_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:mobile_visit_url] = @m_final_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:ad_id] = ad_d["ad_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @baidu_db[db_name].bulk_write(data_arr)
                                  @baidu_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          
                          success_array << ad_d["ad_id"].to_i
                      else
                          fail_array << ad_d["ad_id"].to_i
                          
                          key = ad_d["ad_id"].to_s
                          fail_msg[key] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 100
                                
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                      
                  end
                  
                  msg = "Your request is Processed. Please wait for the channel approve your request before you submit your changes.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["db_name"].find('cpc_idea_id' => { "$in" => success_array})
                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["name"].to_s + " updated status Successful."
                      # end
                           
                  # end
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('ad_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["ad_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["title"].to_s + " updated "+ find_and_replace_name +" Fail: " + fail_msg[key]
                      end
                  end
                  return msg
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
           
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  
  
  
  
  def findupdatesogouad(id_array,find_and_replace_name,find_and_replace_find,find_and_replace_value,network_id)
      
      db_name = "ad_sogou_"+network_id.to_s
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
       
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  
                  
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                  sogou_result = @sogou_api.call(:get_account_info)
                  
                  if sogou_result.header[:res_header][:rquota].to_i <= 500
                      msg = "You don't have enough quote, your request cannot be done."
                      return  msg
                  end
                  
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcIdeaService")
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  @ad = @sogou_db[db_name].find('cpc_idea_id' => { "$in" => id_array})
                  @sogou_db.close()
                  
                  data_arr = []
                  
                  @ad.no_cursor_timeout.each do |ad_d|
                      
                      @title = ad_d["title"]
                      @description_1 = ad_d["description_1"]
                      @description_2 = ad_d["description_2"]
                      @display_url = ad_d["show_url"]
                      @final_url = ad_d["visit_url"]
                      @m_display_url = ad_d["mobile_show_url"]
                      @m_final_url = ad_d["mobile_visit_url"]
                            
                      requesttype = {}
                      # requesttype[:cpcIdeaId]    =     0
                      requesttype[:cpcIdeaId]    =     ad_d["cpc_idea_id"].to_i
                      requesttype[:cpcGrpId]    =     0
                      
                      if find_and_replace_name.to_s == "replace_headline"
                          @title = @title.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                          requesttype[:title] = @title
                      end
                      
                      if find_and_replace_name.to_s == "replace_desc_1"
                          @description_1 = @description_1.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                          requesttype[:description1] = @description_1
                      end
                      
                      if find_and_replace_name.to_s == "replace_desc_2"
                          @description_2 = @description_2.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                          requesttype[:description2] = @description_2
                      end
                      
                      if find_and_replace_name.to_s == "replace_display_url"
                          if @display_url.include?(".adeqo.")
                              tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          else
                              tmp_find_and_replace_find = find_and_replace_find
                              tmp_find_and_replace_value = find_and_replace_value
                          end
                        
                          @display_url = @display_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                          requesttype[:showUrl]         =     @display_url  
                      end
                      
                      if find_and_replace_name.to_s == "replace_destination_url"
                          if @final_url.include?(".adeqo.")
                              tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          else
                              tmp_find_and_replace_find = find_and_replace_find
                              tmp_find_and_replace_value = find_and_replace_value
                          end
                        
                          @final_url = @final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                          requesttype[:visitUrl]    =     @final_url
                      end
                      
                      if find_and_replace_name.to_s == "replace_mobile_display_url"
                          if @m_display_url.include?(".adeqo.")
                              tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          else
                              tmp_find_and_replace_find = find_and_replace_find
                              tmp_find_and_replace_value = find_and_replace_value
                          end
                          
                          @m_display_url = @m_display_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                          requesttype[:mobileShowUrl]   =  @m_display_url  
                      end
                      
                      if find_and_replace_name.to_s == "replace_mobile_destination_url"
                          if @m_final_url.include?(".adeqo.")
                              tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                              tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                          else
                              tmp_find_and_replace_find = find_and_replace_find
                              tmp_find_and_replace_value = find_and_replace_value
                          end
                          
                          @m_final_url = @m_final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                          requesttype[:mobileVisitUrl] =    @m_final_url
                      end
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      @update_status = @sogou_api.call(:update_cpc_idea, message: { cpcIdeaTypes: requesttypearray })
                      
                      @logger.info requesttypearray                                                                     
                      @header = @update_status.header.to_hash
                      @logger.info @header 
                      
                      @msg = @header[:res_header][:desc]
                      remain_quote = @header[:res_header][:rquota]
                      
                      
                      requesttypearray = []
                      
                      if @msg.to_s.downcase == "success"
                          if find_and_replace_name.to_s == "replace_headline"
                              # @sogou_db[db_name].find('cpc_idea_id' => ad_d["cpc_idea_id"].to_i).update_one('$set'=> { 'title' => @title.to_s })
                              # @sogou_db.close()  
                              
                              set_detail_hash = {}
                              set_detail_hash[:title] = @title.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:cpc_idea_id] = ad_d["cpc_idea_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @sogou_db[db_name].bulk_write(data_arr)
                                  @sogou_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_desc_1"
                              # @sogou_db[db_name].find('cpc_idea_id' => ad_d["cpc_idea_id"].to_i).update_one('$set'=> { 'description_1' => @description_1.to_s })
                              # @sogou_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:description_1] = @description_1.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:cpc_idea_id] = ad_d["cpc_idea_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @sogou_db[db_name].bulk_write(data_arr)
                                  @sogou_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_desc_2"
                              # @sogou_db[db_name].find('cpc_idea_id' => ad_d["cpc_idea_id"].to_i).update_one('$set'=> { 'description_2' => @description_2.to_s })
                              # @sogou_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:description_2] = @description_2.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:cpc_idea_id] = ad_d["cpc_idea_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @sogou_db[db_name].bulk_write(data_arr)
                                  @sogou_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_display_url"
                              # @sogou_db[db_name].find('cpc_idea_id' => ad_d["cpc_idea_id"].to_i).update_one('$set'=> { 'show_url' => @display_url.to_s })
                              # @sogou_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:show_url] = @display_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:cpc_idea_id] = ad_d["cpc_idea_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @sogou_db[db_name].bulk_write(data_arr)
                                  @sogou_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_destination_url"
                              # @sogou_db[db_name].find('cpc_idea_id' => ad_d["cpc_idea_id"].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s })
                              # @sogou_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:visit_url] = @final_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:cpc_idea_id] = ad_d["cpc_idea_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @sogou_db[db_name].bulk_write(data_arr)
                                  @sogou_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_mobile_display_url"
                              # @sogou_db[db_name].find('cpc_idea_id' => ad_d["cpc_idea_id"].to_i).update_one('$set'=> { 'mobile_show_url' => @m_display_url.to_s })
                              # @sogou_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:mobile_show_url] = @m_display_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:cpc_idea_id] = ad_d["cpc_idea_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @sogou_db[db_name].bulk_write(data_arr)
                                  @sogou_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          if find_and_replace_name.to_s == "replace_mobile_destination_url"
                              # @sogou_db[db_name].find('cpc_idea_id' => ad_d["cpc_idea_id"].to_i).update_one('$set'=> { 'mobile_visit_url' => @m_final_url.to_s })
                              # @sogou_db.close()
                              
                              set_detail_hash = {}
                              set_detail_hash[:mobile_visit_url] = @m_final_url.to_s
                              
                              set_hash = {}
                              set_hash['$set'] = set_detail_hash
                              
                              filter_hash = {}
                              filter_hash[:cpc_idea_id] = ad_d["cpc_idea_id"].to_i
                              
                              update_hash = {}
                              update_hash[:filter] = filter_hash
                              update_hash[:update] = set_hash
                              
                              data_hash = {}
                              data_hash[:update_one] = update_hash
                              
                              data_arr << data_hash
                              
                              if data_arr.count.to_i > 100
                                
                                  @sogou_db[db_name].bulk_write(data_arr)
                                  @sogou_db.close()  
                                  
                                  data_arr = []
                              end
                          end
                          
                          success_array << ad_d["cpc_idea_id"].to_i
                      else
                          fail_array << ad_d["cpc_idea_id"].to_i
                          
                          key = ad_d["cpc_idea_id"].to_s
                          fail_msg[key] = @header[:res_header][:failures][:message].to_s
                      end
                      
                      if remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                                
                      @sogou_db[db_name].bulk_write(data_arr)
                      @sogou_db.close()  
                      
                  end
                  
                  msg = "Your request is Processed. Please wait for the channel approve your request before you submit your changes.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["db_name"].find('cpc_idea_id' => { "$in" => success_array})
                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["name"].to_s + " updated status Successful."
                      # end
                           
                  # end
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @sogou_db[db_name].find('cpc_idea_id' => { "$in" => fail_array})
                      @sogou_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["cpc_idea_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["title"].to_s + " updated "+ find_and_replace_name +" Fail: " + fail_msg[key]
                      end
                  end
                  return msg
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
           
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  
  def updateshenmaad(id_array,status,network_id)
      
      if status.to_s == "inactive"
          pause = "true"
      end
      if status.to_s == "active"
          pause = "false"
      end
      
      db_name = "ad_shenma_"+network_id.to_s
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
       
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  service = "account"
                  method = "getAccount"
                  
                  json = {'header' => { 
                                          'token' => network_d["api_token"].to_s,
                                          'username' => network_d["username"].to_s,
                                          'password' => network_d["password"].to_s
                                      },
                           'body'  => {
                                          'requestData' => ["account_all"]
                                      }
                          }
                          
                          
                  @account_info = shenma_api(service,method,json)
                 
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                      @header = @account_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return msg
                  end
                  
                    
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
              
                  data_arr = []
                  id_array.each do |id_array_d|
                      
                      requesttype = {}
                      requesttype[:adgroupId]    =     id_array_d.to_i
                      requesttype[:pause]    =     pause
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      service = "creative"
                      method = "updateCreative"
                      
                      json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                },
                           'body'  => {
                                  'creativeTypes' => requesttypearray
                                }
                          }       
                          
                      @update_info = baidu_api(service,method,json)
                      @logger.info @update_info
                      
                      
                      requesttypearray = []
                      
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                        
                          @header = @update_info["header"]
                          @remain_quote = @header["leftQuota"]
                        
                          # @baidu_db[db_name].find('ad_id' => id_array_d.to_i).update_one('$set'=> { 'pause' => pause.to_s, 'status' => @update_info["body"]["data"][0]["status"].to_i })
                          # @baidu_db.close()
                          
                          set_detail_hash = {}
                          set_detail_hash[:pause] = pause.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:ad_id] = id_array_d.to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @baidu_db[db_name].bulk_write(data_arr)
                              @baidu_db.close()  
                              
                              data_arr = []
                          end
                          
                          success_array << id_array_d.to_i
                      else
                          fail_array << id_array_d.to_i
                          
                          fail_msg[id_array_d.to_s] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 100
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                            
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                      
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["db_name"].find('cpc_idea_id' => { "$in" => success_array})
#                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["name"].to_s + " updated status Successful."
                      # end
#                           
                  # end
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('ad_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["ad_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["title"].to_s + " updated status Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  def updatebaiduad(id_array,status,network_id)
      
      if status.to_s == "inactive"
          pause = "true"
      end
      if status.to_s == "active"
          pause = "false"
      end
      
      db_name = "ad_baidu_"+network_id.to_s
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
       
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  service = "AccountService"
                  method = "getAccountInfo"
                  
                  json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                },
                           'body'  => {
                                  'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                                }
                          }       
                      
                  @account_info = baidu_api(service,method,json)
                 
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                      @header = @account_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return msg
                  end
                  
                    
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
              
                  data_arr = []
                  id_array.each do |id_array_d|
                      
                      requesttype = {}
                      requesttype[:creativeId]    =     id_array_d.to_i
                      requesttype[:adgroupId]    =     0
                      requesttype[:status]    =     0
                      requesttype[:pause]    =     pause
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      service = "CreativeService"
                      method = "updateCreative"
                      
                      json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                },
                           'body'  => {
                                  'creativeTypes' => requesttypearray
                                }
                          }       
                          
                      @update_info = baidu_api(service,method,json)
                      @logger.info @update_info
                      
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                        
                          # @baidu_db[db_name].find('ad_id' => id_array_d.to_i).update_one('$set'=> { 'pause' => pause.to_s, 'status' => @update_info["body"]["data"][0]["status"].to_i })
                          # @baidu_db.close()
                          
                          set_detail_hash = {}
                          set_detail_hash[:pause] = pause.to_s
                          set_detail_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:ad_id] = id_array_d.to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @baidu_db[db_name].bulk_write(data_arr)
                              @baidu_db.close()  
                              
                              data_arr = []
                          end
                          
                          success_array << id_array_d.to_i
                      else
                          fail_array << id_array_d.to_i
                          
                          fail_msg[id_array_d.to_s] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                            
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                      
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["db_name"].find('cpc_idea_id' => { "$in" => success_array})
#                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["name"].to_s + " updated status Successful."
                      # end
#                           
                  # end
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('ad_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["ad_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["title"].to_s + " updated status Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  def updatesogouad(id_array,status,network_id)
      
      if status.to_s == "inactive"
          pause = "true"
      end
      if status.to_s == "active"
          pause = "false"
      end
      
      db_name = "ad_sogou_"+network_id.to_s
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
       
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                  sogou_result = @sogou_api.call(:get_account_info)
                 
                  if sogou_result.header[:res_header][:rquota].to_i <= 500
                      msg = "You don't have enough quote, your request cannot be done."
                      return  msg
                  end
                  
                    
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcIdeaService")
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
              
                  data_arr = []
                  
                  id_array.each do |id_array_d|
                      
                      requesttype = {}
                      requesttype[:cpcIdeaId]    =     id_array_d.to_i
                      requesttype[:cpcGrpId]    =     0
                      
                      requesttype[:pause]    =     pause
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      @update_status = @sogou_api.call(:update_cpc_idea, message: { cpcIdeaTypes: requesttypearray })
                                                                                           
                      @header = @update_status.header.to_hash
                      @logger.info @header 
                      
                      @msg = @header[:res_header][:desc]
                      remain_quote = @header[:res_header][:rquota]
                      
                      requesttypearray = []
                      
                      if @msg.to_s.downcase == "success"
                          # @sogou_db[db_name].find('cpc_idea_id' => id_array_d.to_i).update_one('$set'=> { 'pause' => pause.to_s })
                          # @sogou_db.close()
                          
                          
                          set_detail_hash = {}
                          set_detail_hash[:pause] = pause.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:cpc_idea_id] = id_array_d.to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @sogou_db[db_name].bulk_write(data_arr)
                              @sogou_db.close()  
                              
                              data_arr = []
                          end
                          
                          success_array << id_array_d.to_i
                      else
                          fail_array << id_array_d.to_i
                          
                          fail_msg[id_array_d.to_s] = @header[:res_header][:failures][:message].to_s
                      end
                      
                      if remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                            
                      @sogou_db[db_name].bulk_write(data_arr)
                      @sogou_db.close()  
                      
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["db_name"].find('cpc_idea_id' => { "$in" => success_array})
#                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["name"].to_s + " updated status Successful."
                      # end
#                           
                  # end
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @sogou_db[db_name].find('cpc_idea_id' => { "$in" => fail_array})
                      @sogou_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["cpc_idea_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["title"].to_s + " updated status Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  def findupdatesogouadgroup(id_array,find_and_replace_name,find_and_replace_find,find_and_replace_value,network_id)
      
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      update_msg_array = []
      db_name = "adgroup_sogou_"+network_id.to_s
       
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                  sogou_result = @sogou_api.call(:get_account_info)
                 
                  if sogou_result.header[:res_header][:rquota].to_i <= 500
                      msg = "You don't have enough quote, your request cannot be done."
                      return  msg
                  end
                  
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcGrpService")
                  requesttypearray = []
                  
                  
                  @adgroup = @sogou_db[db_name].find('cpc_grp_id' => { "$in" => id_array})
                  @sogou_db.close()
                  
                  data_arr = []
                  
                  @adgroup.no_cursor_timeout.each do |adgroup_d|
                    
                      @name = adgroup_d["name"]
                      
                      requesttype = {}
                      requesttype[:cpcGrpId]    =     adgroup_d["cpc_grp_id"].to_i
                      requesttype[:cpcPlanId]    =     0
                      
                      if find_and_replace_name.to_s == "replace_adgroup_name"
                        @name = @name.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                        requesttype[:cpcGrpName]    =     @name
                      end
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      @update_status = @sogou_api.call(:update_cpc_grp, message: { cpcGrpTypes: requesttypearray })
                                                                                           
                      @header = @update_status.header.to_hash
                      @logger.info @header 
                      # @return_num =  @header[:res_header][:oprs]
                      
                      requesttypearray = []
                      
                      @msg = @header[:res_header][:desc]
                      remain_quote = @header[:res_header][:rquota]
                      
                      if @msg.to_s.downcase == "success"
                          # @sogou_db[db_name].find('cpc_grp_id' => adgroup_d["cpc_grp_id"].to_i).update_one('$set'=> { 'name' => @name.to_s })
                          # @sogou_db.close()             
                          
                          
                          set_detail_hash = {}
                          set_detail_hash[:name] = @name.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:cpc_grp_id] = adgroup_d["cpc_grp_id"].to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @sogou_db[db_name].bulk_write(data_arr)
                              @sogou_db.close()  
                              
                              data_arr = []
                          end
                                             
                          
                          success_array << adgroup_d["cpc_grp_id"].to_i
                      else
                          fail_array << adgroup_d["cpc_grp_id"].to_i
                          
                          key = adgroup_d["cpc_grp_id"].to_s
                          fail_msg[key] = @header[:res_header][:failures][:message].to_s            
                      end
                      
                      if remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                      @sogou_db[db_name].bulk_write(data_arr)
                      @sogou_db.close()  
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @sogou_db[db_name].find('cpc_grp_id' => { "$in" => fail_array})
                      @sogou_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["cpc_grp_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["name"].to_s + " updated "+find_and_replace_name.to_s+" Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  
  def findupdateshenmaadgroup(id_array,find_and_replace_name,find_and_replace_find,find_and_replace_value,network_id)
      
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      update_msg_array = []
      db_name = "adgroup_shenma_"+network_id.to_s
       
      # @logger.info network_id.to_s
      # @logger.info @network.to_s
      
      if @network.count.to_i > 0
          @network.no_cursor_timeout.each do |network_d|
              begin
                  service = "account"
                  method = "getAccount"
                  
                  json = {'header' => { 
                                          'token' => network_d["api_token"].to_s,
                                          'username' => network_d["username"].to_s,
                                          'password' => network_d["password"].to_s
                                      },
                           'body'  => {
                                          'requestData' => ["account_all"]
                                      }
                          }
                          
                          
                  @account_info = shenma_api(service,method,json)
                  @logger.info @account_info
                 
                 
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                      @header = @account_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return msg
                  end
                  
                  
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  
                  @adgroup = @baidu_db[db_name].find('adgroup_id' => { "$in" => id_array})
                  @baidu_db.close()
                  
                  
                  service = "adgroup"
                  method = "updateAdgroup"
                  
                  data_arr = []
                  
                  @adgroup.no_cursor_timeout.each do |adgroup_d|
                    
                      @name = adgroup_d["adgroup_name"]
                      
                      requesttype = {}
                      requesttype[:adgroupId]    =     adgroup_d["adgroup_id"].to_i
                      
                      if find_and_replace_name.to_s == "replace_adgroup_name"
                        @name = @name.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                        requesttype[:adgroupName]    =     @name
                      end
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      json = {'header' => { 
                                      'token' => network_d["api_token"].to_s,
                                      'username' => network_d["username"].to_s,
                                      'password' => network_d["password"].to_s 
                                    },
                               'body'  => {
                                      'adgroupTypes' => requesttypearray
                                    }
                              }       
                          
                      @update_info = baidu_api(service,method,json)
                      @logger.info @update_info
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                          
                          # @baidu_db[db_name].find('adgroup_id' => adgroup_d["adgroup_id"].to_i).update_one('$set'=> { 'name' => @name.to_s })
                          # @baidu_db.close()                                
                          
                          set_detail_hash = {}
                          set_detail_hash[:name] = @name.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:adgroup_id] = adgroup_d["adgroup_id"].to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @baidu_db[db_name].bulk_write(data_arr)
                              @baidu_db.close()  
                              
                              data_arr = []
                          end
                          
                          success_array << adgroup_d["adgroup_id"].to_i
                      else
                          fail_array << adgroup_d["adgroup_id"].to_i
                          
                          key = adgroup_d["adgroup_id"].to_s
                          fail_msg[key] = @update_info["header"]["failures"][0]["message"].to_s            
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 100
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  
                  if data_arr.count.to_i > 0
                            
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                      
                  end
                  
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('adgroup_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.no_cursor_timeout.each do |all_fail_array_d|
                          key = all_fail_array_d["adgroup_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["name"].to_s + " updated "+find_and_replace_name.to_s+" Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  def findupdatebaiduadgroup(id_array,find_and_replace_name,find_and_replace_find,find_and_replace_value,network_id)
      
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      update_msg_array = []
      db_name = "adgroup_baidu_"+network_id.to_s
       
      # @logger.info network_id.to_s
      # @logger.info @network.to_s
      
      if @network.count.to_i > 0
          @network.each do |network_d|
              begin
                  service = "AccountService"
                  method = "getAccountInfo"
                  
                  json = {'header' => { 
                              'token' => network_d["api_token"].to_s,
                              'username' => network_d["username"].to_s,
                              'password' => network_d["password"].to_s 
                            },
                       'body'  => {
                              'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                            }
                      }       
                      
                  @account_info = baidu_api(service,method,json)
                  @logger.info @account_info
                 
                 
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                      @header = @account_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return msg
                  end
                  
                  
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  
                  @adgroup = @baidu_db[db_name].find('adgroup_id' => { "$in" => id_array})
                  @baidu_db.close()
                  
                  
                  service = "AdgroupService"
                  method = "updateAdgroup"
                  
                  data_arr = []
                  
                  @adgroup.each do |adgroup_d|
                    
                      @name = adgroup_d["name"]
                      
                      requesttype = {}
                      requesttype[:adgroupId]    =     adgroup_d["adgroup_id"].to_i
                      requesttype[:campaignId]    =     0
                      
                      if find_and_replace_name.to_s == "replace_adgroup_name"
                        @name = @name.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                        requesttype[:adgroupName]    =     @name
                      end
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      json = {'header' => { 
                                      'token' => network_d["api_token"].to_s,
                                      'username' => network_d["username"].to_s,
                                      'password' => network_d["password"].to_s 
                                    },
                               'body'  => {
                                      'adgroupTypes' => requesttypearray
                                    }
                              }       
                          
                      @update_info = baidu_api(service,method,json)
                      @logger.info @update_info
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                          
                          # @baidu_db[db_name].find('adgroup_id' => adgroup_d["adgroup_id"].to_i).update_one('$set'=> { 'name' => @name.to_s })
                          # @baidu_db.close()                                
                          
                          set_detail_hash = {}
                          set_detail_hash[:name] = @name.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:adgroup_id] = adgroup_d["adgroup_id"].to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @baidu_db[db_name].bulk_write(data_arr)
                              @baidu_db.close()  
                              
                              data_arr = []
                          end
                          
                          success_array << adgroup_d["adgroup_id"].to_i
                      else
                          fail_array << adgroup_d["adgroup_id"].to_i
                          
                          key = adgroup_d["adgroup_id"].to_s
                          fail_msg[key] = @update_info["header"]["failures"][0]["message"].to_s            
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  
                  if data_arr.count.to_i > 0
                            
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                      
                  end
                  
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('adgroup_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.each do |all_fail_array_d|
                          key = all_fail_array_d["adgroup_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["name"].to_s + " updated "+find_and_replace_name.to_s+" Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  
  def bidupdateshenmaadgroup(id_array,action_type,action_value,action_classifier,network_id)
      
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      update_msg_array = []
      db_name = "adgroup_shenma_"+network_id.to_s
      
      if @network.count.to_i > 0
          @network.each do |network_d|
              begin
                  service = "account"
                  method = "getAccount"
                  
                  json = {'header' => { 
                                          'token' => network_d["api_token"].to_s,
                                          'username' => network_d["username"].to_s,
                                          'password' => network_d["password"].to_s
                                      },
                           'body'  => {
                                          'requestData' => ["account_all"]
                                      }
                          }
                          
                          
                  @account_info = shenma_api(service,method,json)
                  
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                      @header = @account_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                    
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return  msg
                  end
                 
                  
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  
                  @adgroup = @baidu_db[db_name].find('adgroup_id' => { "$in" => id_array})
                  @baidu_db.close()
                  
                  service = "adgroup"
                  method = "updateAdgroup"
                  
                  data_arr = []
                  
                  @adgroup.each do |adgroup_d|
                    
                      @price = adgroup_d["max_price"]
                      
                      requesttype = {}
                      requesttype[:adgroupId]    =     adgroup_d["adgroup_id"].to_i
                      
                      if action_type.to_s == "set_cpc"
                          @new_price = action_value.to_f
                          requesttype[:maxPrice]         =     @new_price  
                      end
                      
                      if action_type.to_s == "increase_cpc"
                          if action_classifier.to_s == "RMB"
                              @new_price = @price.to_f + action_value.to_f
                              requesttype[:maxPrice]         =     @new_price.to_f
                          end
                          
                          if action_classifier.to_s == "%"
                              @new_price = @price.to_f + (@price.to_f*action_value.to_f)/100
                              requesttype[:maxPrice]         =     @new_price
                          end
                      end
                      
                      if action_type.to_s == "decrease_cpc"
                          if action_classifier.to_s == "RMB"
                              @new_price = @price.to_f - action_value.to_f
                              requesttype[:maxPrice]         =     @new_price.to_f
                          end
                          
                          if action_classifier.to_s == "%"
                              @new_price = @price.to_f - (@price.to_f*action_value.to_f)/100
                              requesttype[:maxPrice]         =     @new_price
                          end
                      end
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                    },
                               'body'  => {
                                      'adgroupTypes' => requesttypearray
                                    }
                              }       
                          
                      @update_info = shenma_api(service,method,json)
                      @logger.info @update_info
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                          
                          # @baidu_db[db_name].find('adgroup_id' => adgroup_d["adgroup_id"].to_i).update_one('$set'=> { 'max_price' => @new_price.to_f })
                          # @baidu_db.close()
                          
                          set_detail_hash = {}
                          set_detail_hash[:max_price] = @new_price.to_f
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:adgroup_id] = adgroup_d["adgroup_id"].to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @baidu_db[db_name].bulk_write(data_arr)
                              @baidu_db.close()  
                              
                              data_arr = []
                          end                                
                          
                          success_array << adgroup_d["adgroup_id"].to_i
                      else
                          key = adgroup_d["adgroup_id"].to_s
                          fail_msg[key] = @update_info["header"]["failures"][0]["message"].to_s
                          fail_array << adgroup_d["adgroup_id"].to_i
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 100
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                            
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                      
                  end
                  
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('adgroup_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.each do |all_fail_array_d|
                          key = all_fail_array_d["cpc_grp_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["name"].to_s + " updated bid Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  def bidupdatebaiduadgroup(id_array,action_type,action_value,action_classifier,network_id)
      
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      update_msg_array = []
      db_name = "adgroup_baidu_"+network_id.to_s
      
      if @network.count.to_i > 0
          @network.each do |network_d|
              begin
                  service = "AccountService"
                  method = "getAccountInfo"
                  
                  json = {'header' => { 
                              'token' => network_d["api_token"].to_s,
                              'username' => network_d["username"].to_s,
                              'password' => network_d["password"].to_s 
                            },
                           'body'  => {
                                  'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                                }
                          }       
                      
                  @account_info = baidu_api(service,method,json)
                  
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                      @header = @account_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                    
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return  msg
                  end
                 
                  
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  
                  @adgroup = @baidu_db[db_name].find('adgroup_id' => { "$in" => id_array})
                  @baidu_db.close()
                  
                  service = "AdgroupService"
                  method = "updateAdgroup"
                  
                  data_arr = []
                  
                  @adgroup.each do |adgroup_d|
                    
                      @price = adgroup_d["max_price"]
                      
                      requesttype = {}
                      requesttype[:adgroupId]    =     adgroup_d["adgroup_id"].to_i
                      requesttype[:campaignId]    =     0
                      
                      if action_type.to_s == "set_cpc"
                          @new_price = action_value.to_f
                          requesttype[:maxPrice]         =     @new_price  
                      end
                      
                      if action_type.to_s == "increase_cpc"
                          if action_classifier.to_s == "RMB"
                              @new_price = @price.to_f + action_value.to_f
                              requesttype[:maxPrice]         =     @new_price.to_f
                          end
                          
                          if action_classifier.to_s == "%"
                              @new_price = @price.to_f + (@price.to_f*action_value.to_f)/100
                              requesttype[:maxPrice]         =     @new_price
                          end
                      end
                      
                      if action_type.to_s == "decrease_cpc"
                          if action_classifier.to_s == "RMB"
                              @new_price = @price.to_f - action_value.to_f
                              requesttype[:maxPrice]         =     @new_price.to_f
                          end
                          
                          if action_classifier.to_s == "%"
                              @new_price = @price.to_f - (@price.to_f*action_value.to_f)/100
                              requesttype[:maxPrice]         =     @new_price
                          end
                      end
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                    },
                               'body'  => {
                                      'adgroupTypes' => requesttypearray
                                    }
                              }       
                          
                      @update_info = baidu_api(service,method,json)
                      @logger.info @update_info
                      
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                          
                          # @baidu_db[db_name].find('adgroup_id' => adgroup_d["adgroup_id"].to_i).update_one('$set'=> { 'max_price' => @new_price.to_f })
                          # @baidu_db.close()
                          
                          set_detail_hash = {}
                          set_detail_hash[:max_price] = @new_price.to_f
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:adgroup_id] = adgroup_d["adgroup_id"].to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @baidu_db[db_name].bulk_write(data_arr)
                              @baidu_db.close()  
                              
                              data_arr = []
                          end                                
                          
                          success_array << adgroup_d["adgroup_id"].to_i
                      else
                          key = adgroup_d["adgroup_id"].to_s
                          fail_msg[key] = @update_info["header"]["failures"][0]["message"].to_s
                          fail_array << adgroup_d["adgroup_id"].to_i
                      end
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                            
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                      
                  end
                  
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('adgroup_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.each do |all_fail_array_d|
                          key = all_fail_array_d["cpc_grp_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["name"].to_s + " updated bid Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  
  
  
  
  
  def bidupdatesogouadgroup(id_array,action_type,action_value,action_classifier,network_id)
      
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      update_msg_array = []
      db_name = "adgroup_sogou_"+network_id.to_s
      
      if @network.count.to_i > 0
          @network.each do |network_d|
              begin
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                  sogou_result = @sogou_api.call(:get_account_info)
                 
                  if sogou_result.header[:res_header][:rquota].to_i <= 500
                      msg = "You don't have enough quote, your request cannot be done."
                      return  msg
                  end
                    
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcGrpService")
                  requesttypearray = []
                  
                  
                  @adgroup = @sogou_db[db_name].find('cpc_grp_id' => { "$in" => id_array})
                  @sogou_db.close()
                  
                  data_arr = []
                  @adgroup.each do |adgroup_d|
                    
                      @price = adgroup_d["max_price"]
                      
                      requesttype = {}
                      requesttype[:cpcGrpId]    =     adgroup_d["cpc_grp_id"].to_i
                      requesttype[:cpcPlanId]    =     0
                      
                      if action_type.to_s == "set_cpc"
                          @new_price = action_value.to_f
                          requesttype[:maxPrice]         =     @new_price  
                      end
                      
                      if action_type.to_s == "increase_cpc"
                          if action_classifier.to_s == "RMB"
                              @new_price = @price.to_f + action_value.to_f
                              requesttype[:maxPrice]         =     @new_price.to_f
                          end
                          
                          if action_classifier.to_s == "%"
                              @new_price = @price.to_f + (@price.to_f*action_value.to_f)/100
                              requesttype[:maxPrice]         =     @new_price
                          end
                            
                      end
                      
                      if action_type.to_s == "decrease_cpc"
                          if action_classifier.to_s == "RMB"
                              @new_price = @price.to_f - action_value.to_f
                              requesttype[:maxPrice]         =     @new_price.to_f
                          end
                          
                          if action_classifier.to_s == "%"
                              @new_price = @price.to_f - (@price.to_f*action_value.to_f)/100
                              requesttype[:maxPrice]         =     @new_price
                          end
                      end
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      @update_status = @sogou_api.call(:update_cpc_grp, message: { cpcGrpTypes: requesttypearray })
                                                                                           
                      @header = @update_status.header.to_hash
                      @logger.info @header 
                      # @return_num =  @header[:res_header][:oprs]
                      
                      requesttypearray = []
                      
                      @msg = @header[:res_header][:desc]
                      remain_quote = @header[:res_header][:rquota]
                      
                      if @msg.to_s.downcase == "success"
                          # @sogou_db[db_name].find('cpc_grp_id' => adgroup_d["cpc_grp_id"].to_i).update_one('$set'=> { 'max_price' => @new_price.to_f })
                          # @sogou_db.close()                                
                          
                          set_detail_hash = {}
                          set_detail_hash[:max_price] = @new_price.to_f
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:cpc_grp_id] = adgroup_d["cpc_grp_id"].to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @sogou_db[db_name].bulk_write(data_arr)
                              @sogou_db.close()  
                              
                              data_arr = []
                          end
                          
                          success_array << adgroup_d["cpc_grp_id"].to_i
                      else
                          key = adgroup_d["cpc_grp_id"].to_s
                          fail_msg[key] = @header[:res_header][:failures][:message].to_s
                          fail_array << adgroup_d["cpc_grp_id"].to_i
                      end
                      
                      if remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  
                  if data_arr.count.to_i > 0
                            
                      @sogou_db[db_name].bulk_write(data_arr)
                      @sogou_db.close()  
                      
                  end
                  
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @sogou_db[db_name].find('cpc_grp_id' => { "$in" => fail_array})
                      @sogou_db.close()
                      
                      all_fail_array.each do |all_fail_array_d|
                          key = all_fail_array_d["cpc_grp_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["name"].to_s + " updated bid Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  def updateshenmaadgroup(id_array,status,network_id)
      
      if status.to_s == "inactive"
          pause = "true"
      end
      if status.to_s == "active"
          pause = "false"
      end
      
      db_name = "adgroup_shenma_"+network_id.to_s
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
       
      if @network.count.to_i > 0
          @network.each do |network_d|
              begin
              
                  service = "account"
                  method = "getAccount"
                  
                  json = {'header' => { 
                                          'token' => network_d["api_token"].to_s,
                                          'username' => network_d["username"].to_s,
                                          'password' => network_d["password"].to_s
                                      },
                           'body'  => {
                                          'requestData' => ["account_all"]
                                      }
                          }
                          
                          
                  @account_info = shenma_api(service,method,json)
              
              
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                      @header = @account_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return msg
                  end
              
                  # sad                  
                    
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
              
                  service = "adgroup"
                  method = "updateAdgroup"
                  
                  data_arr = []
              
                  id_array.each do |id_array_d|
                      
                      requesttype = {}
                      requesttype[:adgroupId]    =     id_array_d.to_i
                      requesttype[:pause]    =     pause
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      json = {'header' => { 
                                      'token' => network_d["api_token"].to_s,
                                      'username' => network_d["username"].to_s,
                                      'password' => network_d["password"].to_s 
                                    },
                               'body'  => {
                                      'adgroupTypes' => requesttypearray
                                    }
                              }       
                          
                      @update_info = shenma_api(service,method,json)
                      
                      @logger.info @update_info
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                          
                          # @baidu_db[db_name].find('adgroup_id' => id_array_d.to_i).update_one('$set'=> { 'status' => @update_info["body"]["data"][0]["status"].to_i, 'pause' => pause.to_s })
                          # @baidu_db.close()
                          
                          
                          set_detail_hash = {}
                          set_detail_hash[:pause] = pause.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:adgroup_id] = id_array_d.to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @baidu_db[db_name].bulk_write(data_arr)
                              @baidu_db.close()  
                              
                              data_arr = []
                          end
                          
                          success_array << id_array_d.to_i
                      else  
                        
                          fail_array << id_array_d.to_i
                          fail_msg[id_array_d.to_s] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 100
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                            
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                      
                  end
                  
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["db_name"].find('cpc_grp_id' => { "$in" => success_array})
                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["name"].to_s + " updated status Successful."
                      # end
                           
                  # end
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('adgroup_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.each do |all_fail_array_d|
                          key = all_fail_array_d["adgroup_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["name"].to_s + " updated status Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg 
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  def updatebaiduadgroup(id_array,status,network_id)
      
      if status.to_s == "inactive"
          pause = "true"
      end
      if status.to_s == "active"
          pause = "false"
      end
      
      db_name = "adgroup_baidu_"+network_id.to_s
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
       
      if @network.count.to_i > 0
          @network.each do |network_d|
              begin
              
                  service = "AccountService"
                  method = "getAccountInfo"
                  
                  json = {'header' => { 
                                  'token' => network_d["api_token"].to_s,
                                  'username' => network_d["username"].to_s,
                                  'password' => network_d["password"].to_s 
                                },
                           'body'  => {
                                  'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                                }
                          }       
                      
                  @account_info = baidu_api(service,method,json)
              
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                      @header = @account_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  
                  else
                      msg = "Your Api info is not correct on Adeqo, please check."
                      return msg
                  end
              
                  # sad                  
                    
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
              
                  service = "AdgroupService"
                  method = "updateAdgroup"
                  
                  data_arr = []
              
                  id_array.each do |id_array_d|
                      
                      requesttype = {}
                      requesttype[:adgroupId]    =     id_array_d.to_i
                      requesttype[:campaignId]    =     0
                      requesttype[:status]    =     0
                      requesttype[:pause]    =     pause
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      json = {'header' => { 
                                      'token' => network_d["api_token"].to_s,
                                      'username' => network_d["username"].to_s,
                                      'password' => network_d["password"].to_s 
                                    },
                               'body'  => {
                                      'adgroupTypes' => requesttypearray
                                    }
                              }       
                          
                      @update_info = baidu_api(service,method,json)
                      
                      @logger.info @update_info
                      requesttypearray = []
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                          
                          # @baidu_db[db_name].find('adgroup_id' => id_array_d.to_i).update_one('$set'=> { 'status' => @update_info["body"]["data"][0]["status"].to_i, 'pause' => pause.to_s })
                          # @baidu_db.close()
                          
                          
                          set_detail_hash = {}
                          set_detail_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                          set_detail_hash[:pause] = pause.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:adgroup_id] = id_array_d.to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @baidu_db[db_name].bulk_write(data_arr)
                              @baidu_db.close()  
                              
                              data_arr = []
                          end
                          
                          success_array << id_array_d.to_i
                      else  
                        
                          fail_array << id_array_d.to_i
                          fail_msg[id_array_d.to_s] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  if data_arr.count.to_i > 0
                            
                      @baidu_db[db_name].bulk_write(data_arr)
                      @baidu_db.close()  
                      
                  end
                  
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["db_name"].find('cpc_grp_id' => { "$in" => success_array})
                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["name"].to_s + " updated status Successful."
                      # end
                           
                  # end
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @baidu_db[db_name].find('adgroup_id' => { "$in" => fail_array})
                      @baidu_db.close()
                      
                      all_fail_array.each do |all_fail_array_d|
                          key = all_fail_array_d["adgroup_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["name"].to_s + " updated status Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg 
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  def updatesogouadgroup(id_array,status,network_id)
      
      if status.to_s == "inactive"
          pause = "true"
          db_status = 22
      end
      if status.to_s == "active"
          pause = "false"
          db_status = 21
      end
      
      db_name = "adgroup_sogou_"+network_id.to_s
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
       
      if @network.count.to_i > 0
          @network.each do |network_d|
              begin
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                  sogou_result = @sogou_api.call(:get_account_info)
                 
                  if sogou_result.header[:res_header][:rquota].to_i <= 500
                      msg = "You don't have enough quote, your request cannot be done."
                      return  msg
                  end
                  
                    
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcGrpService")
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
              
                  data_arr = []
                  id_array.each do |id_array_d|
                      
                      requesttype = {}
                      requesttype[:cpcGrpId]    =     id_array_d.to_i
                      requesttype[:cpcPlanId]    =     0
                      
                      requesttype[:pause]    =     pause
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      @update_status = @sogou_api.call(:update_cpc_grp, message: { cpcGrpTypes: requesttypearray })
                                                                                           
                      @header = @update_status.header.to_hash
                      @logger.info @header 
                      
                      @msg = @header[:res_header][:desc]
                      remain_quote = @header[:res_header][:rquota]
                      
                      requesttypearray = []
                      
                      if @msg.to_s.downcase == "success"
                          # @sogou_db[db_name].find('cpc_grp_id' => id_array_d.to_i).update_one('$set'=> { 'status' => db_status.to_i })
                          # @sogou_db.close()
                          
                          
                          set_detail_hash = {}
                          set_detail_hash[:status] = db_status.to_i
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:cpc_grp_id] = id_array_d.to_i
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @sogou_db[db_name].bulk_write(data_arr)
                              @sogou_db.close()  
                              
                              data_arr = []
                          end
                          
                          success_array << id_array_d.to_i
                      else
                          fail_array << id_array_d.to_i
                          fail_msg[id_array_d.to_s] = @header[:res_header][:failures][:message].to_s
                      end
                      
                      if remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 20
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  
                  if data_arr.count.to_i > 0
                            
                      @sogou_db[db_name].bulk_write(data_arr)
                      @sogou_db.close()  
                      
                      data_arr = []
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["db_name"].find('cpc_grp_id' => { "$in" => success_array})
                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["name"].to_s + " updated status Successful."
                      # end
                           
                  # end
                  
                  if fail_array.count.to_i > 0
                      msg = msg + "<br /><br /><br />"
                      all_fail_array = @sogou_db[db_name].find('cpc_grp_id' => { "$in" => fail_array})
                      @sogou_db.close()
                      
                      all_fail_array.each do |all_fail_array_d|
                          key = all_fail_array_d["cpc_grp_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["name"].to_s + " updated status Fail: " + fail_msg[key]
                      end
                  end
                  
                  return msg
                  
              rescue Exception
                  msg = "Your Api info is not correct on Adeqo, please check."
                  return msg
              end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end



  
  
  def findupdatethreesixtyad(id_array,find_and_replace_name,find_and_replace_find,find_and_replace_value,network_id)
      
      # ******************************************************set db name here
      db_name = "ad_360_"+network_id.to_s
      # ******************************************************set db name here
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
                                
      if @network.count.to_i > 0
        
          @network.each do |network_d|
                begin
                  
                    requesttypearraycount = []
                    success_array = []
                    fail_array = []
                    fail_msg = {}
                    
                    @username = network_d["username"]
                    @password = network_d["password"]
                    @apitoken = network_d["api_token"]
                    @apisecret = network_d["api_secret"]
                                         
                    login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                    @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                    
                    if !@refresh_token.nil?
                        
                        @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "account", "getInfo")
                        if @response.headers["quotaremain"].to_i <= 500
                            msg = "You don't have enough quote, your request cannot be done."
                            return msg
                        end
                        
                        @ad = @threesixty_db[db_name].find('ad_id' => { "$in" => id_array})
                        @threesixty_db.close()
                        
                        data_arr = []
                        
                        @ad.each do |ad_d|
                                                                          
                                @title = ad_d["title"]
                                @description = ad_d["description"]
                                @display_url = ad_d["show_url"]
                                @final_url = ad_d["visit_url"]
                                @m_display_url = ad_d["mobile_show_url"] 
                                @m_final_url = ad_d["mobile_visit_url"]
                              
                              
                                requesttypearray = []
                                
                                if find_and_replace_name.to_s == "replace_headline"
                                    @title = @title.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                                    request_str = '{"id":'+ad_d["ad_id"].to_s+',"title":"'+@title+'"}'
                                end
                                
                                if find_and_replace_name.to_s == "replace_desc_1"
                                    @description = @description.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                                    request_str = '{"id":'+ad_d["ad_id"].to_s+',"description1":"'+@description+'"}'
                                end
                                
                                if find_and_replace_name.to_s == "replace_display_url"
                                    if @display_url.include?(".adeqo.")
                                        tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                                        tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                                    else
                                        tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                                        tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                                    end
                                    
                                    @display_url = @display_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                                    request_str = '{"id":'+ad_d["ad_id"].to_s+',"displayUrl":"'+@display_url+'"}'
                                end
                                
                                if find_and_replace_name.to_s == "replace_destination_url"
                                    if @final_url.include?(".adeqo.")
                                        tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                                        tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                                    else
                                        tmp_find_and_replace_find = find_and_replace_find
                                        tmp_find_and_replace_value = find_and_replace_value
                                    end
                                    
                                    @final_url = @final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                                    request_str = '{"id":'+ad_d["ad_id"].to_s+',"destinationUrl":"'+@final_url+'"}'
                                end
                                
                                if find_and_replace_name.to_s == "replace_mobile_display_url"
                                    if @m_display_url.include?(".adeqo.")
                                        tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                                        tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                                    else
                                        tmp_find_and_replace_find = find_and_replace_find
                                        tmp_find_and_replace_value = find_and_replace_value
                                    end
                                    
                                    @m_display_url = @m_display_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                                    request_str = '{"id":'+ad_d["ad_id"].to_s+',"mobileDisplayUrl":"'+@m_display_url+'"}'
                                end
                                
                                if find_and_replace_name.to_s == "replace_mobile_destination_url"
                                    if @m_final_url.include?(".adeqo.")
                                        tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                                        tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                                    else
                                        tmp_find_and_replace_find = find_and_replace_find
                                        tmp_find_and_replace_value = find_and_replace_value
                                    end
                                    
                                    @m_final_url = @m_final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                                    request_str = '{"id":'+ad_d["ad_id"].to_s+',"mobileDestinationUrl":"'+@m_final_url+'"}'
                                end  
                                  
                                
                                requesttypearray << request_str
                                request = '['+requesttypearray.join(",")+']'
                                
                                body = { 
                                    'creatives' => request
                                }
                                
                                @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "creative", "update", body)
                                @affectedRecords = @update_res["creative_update_response"]
                                
                                requesttypearraycount << body
                                
                                @logger.info @response.headers["quotaremain"]
                                @logger.info body
                                # @logger.info @affectedRecords
                                @logger.info @update_res
                              
                                if @update_res["creative_update_response"]["failures"] || @update_res["creative_update_response"]["affectedRecords"].to_i == 0
                                    fail_array << ad_d["ad_id"].to_i
                                    
                                    key = ad_d["ad_id"].to_s
                                    
                                    if @update_res["creative_update_response"]["failures"]["item"]["message"]
                                        fail_msg[key] = @update_res["creative_update_response"]["failures"]["item"]["message"].to_s
                                    else
                                        fail_msg[key] = ""
                                    end
                                else
                                    success_array << ad_d["ad_id"].to_i
                                    
                                    if find_and_replace_name.to_s == "replace_headline"
                                        # @threesixty_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'title' => @title.to_s })
                                        # @threesixty_db.close()
                                        
                                        set_detail_hash = {}
                                        set_detail_hash[:title] = @title.to_s
                                        
                                        set_hash = {}
                                        set_hash['$set'] = set_detail_hash
                                        
                                        filter_hash = {}
                                        filter_hash[:ad_id] = ad_d["ad_id"].to_i
                                        
                                        update_hash = {}
                                        update_hash[:filter] = filter_hash
                                        update_hash[:update] = set_hash
                                        
                                        data_hash = {}
                                        data_hash[:update_one] = update_hash
                                        
                                        data_arr << data_hash
                                        
                                        if data_arr.count.to_i > 100
                                          
                                            @threesixty_db[db_name].bulk_write(data_arr)
                                            @threesixty_db.close()  
                                            
                                            data_arr = []
                                        end
                                    end
                                    
                                    if find_and_replace_name.to_s == "replace_desc_1"
                                        # @threesixty_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'description' => @description.to_s })
                                        # @threesixty_db.close()
                                        
                                        set_detail_hash = {}
                                        set_detail_hash[:description] = @description.to_s
                                        
                                        set_hash = {}
                                        set_hash['$set'] = set_detail_hash
                                        
                                        filter_hash = {}
                                        filter_hash[:ad_id] = ad_d["ad_id"].to_i
                                        
                                        update_hash = {}
                                        update_hash[:filter] = filter_hash
                                        update_hash[:update] = set_hash
                                        
                                        data_hash = {}
                                        data_hash[:update_one] = update_hash
                                        
                                        data_arr << data_hash
                                        
                                        if data_arr.count.to_i > 100
                                          
                                            @threesixty_db[db_name].bulk_write(data_arr)
                                            @threesixty_db.close()  
                                            
                                            data_arr = []
                                        end
                                    end
                                    
                                    if find_and_replace_name.to_s == "replace_display_url"
                                        # @threesixty_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'show_url' => @display_url.to_s })
                                        # @threesixty_db.close()
                                        
                                        set_detail_hash = {}
                                        set_detail_hash[:show_url] = @display_url.to_s
                                        
                                        set_hash = {}
                                        set_hash['$set'] = set_detail_hash
                                        
                                        filter_hash = {}
                                        filter_hash[:ad_id] = ad_d["ad_id"].to_i
                                        
                                        update_hash = {}
                                        update_hash[:filter] = filter_hash
                                        update_hash[:update] = set_hash
                                        
                                        data_hash = {}
                                        data_hash[:update_one] = update_hash
                                        
                                        data_arr << data_hash
                                        
                                        if data_arr.count.to_i > 100
                                          
                                            @threesixty_db[db_name].bulk_write(data_arr)
                                            @threesixty_db.close()  
                                            
                                            data_arr = []
                                        end
                                    end
                                    
                                    if find_and_replace_name.to_s == "replace_destination_url"
                                        # @threesixty_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s })
                                        # @threesixty_db.close()
                                        
                                        set_detail_hash = {}
                                        set_detail_hash[:visit_url] = @final_url.to_i
                                        
                                        set_hash = {}
                                        set_hash['$set'] = set_detail_hash
                                        
                                        filter_hash = {}
                                        filter_hash[:ad_id] = ad_d["ad_id"].to_i
                                        
                                        update_hash = {}
                                        update_hash[:filter] = filter_hash
                                        update_hash[:update] = set_hash
                                        
                                        data_hash = {}
                                        data_hash[:update_one] = update_hash
                                        
                                        data_arr << data_hash
                                        
                                        if data_arr.count.to_i > 100
                                          
                                            @threesixty_db[db_name].bulk_write(data_arr)
                                            @threesixty_db.close()  
                                            
                                            data_arr = []
                                        end
                                    end
                                    
                                    if find_and_replace_name.to_s == "replace_mobile_display_url"
                                        # @threesixty_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'mobile_show_url' => @m_display_url.to_s })
                                        # @threesixty_db.close()
                                        
                                        set_detail_hash = {}
                                        set_detail_hash[:mobile_show_url] = @m_display_url.to_s
                                        
                                        set_hash = {}
                                        set_hash['$set'] = set_detail_hash
                                        
                                        filter_hash = {}
                                        filter_hash[:ad_id] = ad_d["ad_id"].to_i
                                        
                                        update_hash = {}
                                        update_hash[:filter] = filter_hash
                                        update_hash[:update] = set_hash
                                        
                                        data_hash = {}
                                        data_hash[:update_one] = update_hash
                                        
                                        data_arr << data_hash
                                        
                                        if data_arr.count.to_i > 100
                                          
                                            @threesixty_db[db_name].bulk_write(data_arr)
                                            @threesixty_db.close()  
                                            
                                            data_arr = []
                                        end
                                    end
                                    
                                    if find_and_replace_name.to_s == "replace_mobile_destination_url"
                                        # @threesixty_db[db_name].find('ad_id' => ad_d["ad_id"].to_i).update_one('$set'=> { 'mobile_visit_url' => @m_final_url.to_s })
                                        # @threesixty_db.close()
                                        
                                        set_detail_hash = {}
                                        set_detail_hash[:mobile_visit_url] = @m_final_url.to_s
                                        
                                        set_hash = {}
                                        set_hash['$set'] = set_detail_hash
                                        
                                        filter_hash = {}
                                        filter_hash[:ad_id] = ad_d["ad_id"].to_i
                                        
                                        update_hash = {}
                                        update_hash[:filter] = filter_hash
                                        update_hash[:update] = set_hash
                                        
                                        data_hash = {}
                                        data_hash[:update_one] = update_hash
                                        
                                        data_arr << data_hash
                                        
                                        if data_arr.count.to_i > 100
                                          
                                            @threesixty_db[db_name].bulk_write(data_arr)
                                            @threesixty_db.close()  
                                            
                                            data_arr = []
                                        end
                                    end
                                    
                                    # @threesixty_db.close()
                                end
                                
                                if @response.headers["quotaremain"].to_i <= 500
                                    msg = "You don't have enough quote, your request cannot be done."
                                    return msg
                                end
                                
                                if requesttypearraycount.count.to_i >= 10
                                    sleep 1
                                    requesttypearraycount = []
                                end
                        end
                    
                    else    
                        msg = "You Api info in Adeqo is not correct, please check."
                        return msg
                    end
                    
                    
                    if data_arr.count.to_i > 0
                                          
                        @threesixty_db[db_name].bulk_write(data_arr)
                        @threesixty_db.close()  
                        
                    end
                                        
                    msg = "Your request has been completed.<br />"
                      
                    msg = msg + success_array.count.to_s + " updated Successful. "
                    msg = msg + fail_array.count.to_s + " update Failed."
                    
                    if fail_array.count.to_i > 0
                        msg = msg + "<br /><br /><br />"
                        all_fail_array = @threesixty_db[db_name].find('ad_id' => { "$in" => fail_array})
                        @threesixty_db.close()
                        
                        all_fail_array.each do |all_fail_array_d|
                            key = all_fail_array_d["ad_id"].to_s
                            msg = msg + "<br />" + all_fail_array_d["title"].to_s + " updated "+find_and_replace_name.to_s+" Fail: " + fail_msg[key]
                        end
                    end
                    
                    return msg
                    
                rescue Exception
                    msg = "You Api info in Adeqo is not correct, please check."
                    return msg
                end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  
  def findupdatethreesixtykeyword(id_array,find_and_replace_name,find_and_replace_find,find_and_replace_value,network_id)
      
      
      # ******************************************************set db name here
      db_name = "keyword_360_"+network_id.to_s
      # ******************************************************set db name here
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
                                
      if @network.count.to_i > 0
        
          @network.each do |network_d|
                begin
                  
                    requesttypearraycount = []
                    success_array = []
                    fail_array = []
                    fail_msg = {}
                    
                    @username = network_d["username"]
                    @password = network_d["password"]
                    @apitoken = network_d["api_token"]
                    @apisecret = network_d["api_secret"]
                                         
                    login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                    @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                    
                    if !@refresh_token.nil?
                        
                        @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "account", "getInfo")
                        if @response.headers["quotaremain"].to_i <= 500
                            msg = "You don't have enough quote, your request cannot be done."
                            return msg
                        end
                      
                        @keyword = @threesixty_db[db_name].find('keyword_id' => { "$in" => id_array})
                        @threesixty_db.close()
                    
                        data_arr = []
                        
                        @keyword.each do |keyword_d|
                                          
                                @final_url = keyword_d["visit_url"]
                                @m_final_url = keyword_d["mobile_visit_url"]
                                
                                if find_and_replace_name.to_s == "keyword_replace_destination_url"
                                   if @final_url.include?(".adeqo.")
                                      tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                                      tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                                   else
                                      tmp_find_and_replace_find = find_and_replace_find
                                      tmp_find_and_replace_value = find_and_replace_value  
                                   end
                                   @final_url = @final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                                   request_str = '{"id":'+keyword_d["keyword_id"].to_s+',"url":"'+@final_url+'"}'
                                end
                                
                                if find_and_replace_name.to_s == "keyword_replace_mobile_destination_url"
                                    if @m_final_url.include?(".adeqo.")
                                        tmp_find_and_replace_find = CGI.escape(find_and_replace_find)
                                        tmp_find_and_replace_value = CGI.escape(find_and_replace_value)  
                                    else
                                        tmp_find_and_replace_find = find_and_replace_find
                                        tmp_find_and_replace_value = CGI.escape(find_and_replace_value)
                                    end
                                    @m_final_url = @m_final_url.gsub(tmp_find_and_replace_find.to_s, tmp_find_and_replace_value.to_s)
                                    request_str = '{"id":'+keyword_d["keyword_id"].to_s+',"mobileUrl":"'+@m_final_url+'"}'
                                end


                                
                                requesttypearray = []
                                requesttypearray << request_str
                                request = '['+requesttypearray.join(",")+']'
                                
                                body = { 
                                    'keywords' => request
                                }
                                
                                @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "keyword", "update", body)
                                @affectedRecords = @update_res["keyword_update_response"]
                                
                                requesttypearraycount << body
                                
                                @logger.info @response.headers["quotaremain"]
                                @logger.info body
                                # @logger.info @affectedRecords
                                @logger.info @update_res
                              
                                if @update_res["keyword_update_response"]["failures"] || @update_res["keyword_update_response"]["affectedRecords"].to_i == 0
                                    fail_array << keyword_d["keyword_id"].to_i
                                    
                                    key = keyword_d["keyword_id"].to_s
                                    if @update_res["keyword_update_response"]["failures"]["item"]["message"]
                                        fail_msg[key] = @update_res["keyword_update_response"]["failures"]["item"]["message"].to_s
                                    else
                                        fail_msg[key] = ""
                                    end
                                else
                                    success_array << keyword_d["keyword_id"].to_i
                                    
                                    if find_and_replace_name.to_s == "keyword_replace_destination_url"
                                        # @threesixty_db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> { 'visit_url' => @final_url.to_s })
                                        
                                        set_detail_hash = {}
                                        set_detail_hash[:visit_url] = @final_url.to_s
                                        
                                        set_hash = {}
                                        set_hash['$set'] = set_detail_hash
                                        
                                        filter_hash = {}
                                        filter_hash[:keyword_id] = keyword_d["keyword_id"].to_i
                                        
                                        update_hash = {}
                                        update_hash[:filter] = filter_hash
                                        update_hash[:update] = set_hash
                                        
                                        data_hash = {}
                                        data_hash[:update_one] = update_hash
                                        
                                        data_arr << data_hash
                                        
                                        if data_arr.count.to_i > 100
                                          
                                            @threesixty_db[db_name].bulk_write(data_arr)
                                            @threesixty_db.close()  
                                            
                                            data_arr = []
                                        end
                                    end
                                    
                                    if find_and_replace_name.to_s == "keyword_replace_mobile_destination_url"
                                        # @threesixty_db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> { 'mobile_visit_url' => @m_final_url.to_s })
                                        
                                        set_detail_hash = {}
                                        set_detail_hash[:mobile_visit_url] = @m_final_url.to_s
                                        
                                        set_hash = {}
                                        set_hash['$set'] = set_detail_hash
                                        
                                        filter_hash = {}
                                        filter_hash[:keyword_id] = keyword_d["keyword_id"].to_i
                                        
                                        update_hash = {}
                                        update_hash[:filter] = filter_hash
                                        update_hash[:update] = set_hash
                                        
                                        data_hash = {}
                                        data_hash[:update_one] = update_hash
                                        
                                        data_arr << data_hash
                                        
                                        if data_arr.count.to_i > 100
                                          
                                            @threesixty_db[db_name].bulk_write(data_arr)
                                            @threesixty_db.close()  
                                            
                                            data_arr = []
                                        end
                                    end
                                    
                                    # @threesixty_db.close()
                                end
                                
                                if @response.headers["quotaremain"].to_i <= 500
                                    msg = "You don't have enough quote, your request cannot be done."
                                    return msg
                                end
                                
                                if requesttypearraycount.count.to_i >= 10
                                    sleep 1
                                    requesttypearraycount = []
                                end
                        end
                    
                    else
                        msg = "You Api info in Adeqo is not correct, please check."
                        return msg    
                    end
                    
                    if data_arr.count.to_i > 0
                                          
                        @threesixty_db[db_name].bulk_write(data_arr)
                        @threesixty_db.close()  
                        
                    end
                                        
                    msg = "Your request has been completed.<br />"
                      
                    msg = msg + success_array.count.to_s + " updated Successful. "
                    msg = msg + fail_array.count.to_s + " update Failed."
                    
                    if fail_array.count.to_i > 0
                        msg = msg + "<br /><br /><br />"
                        all_fail_array = @threesixty_db[db_name].find('keyword_id' => { "$in" => fail_array})
                        @threesixty_db.close()
                        
                        all_fail_array.each do |all_fail_array_d|
                            msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated "+ find_and_replace_name +" update Failed."
                            
                            key = all_fail_array_d["keyword_id"].to_s
                            msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated "+ find_and_replace_name +" Fail: " + fail_msg[key]
                        end
                    end
                    
                    return msg
                    
                rescue Exception
                    msg = "You Api info in Adeqo is not correct, please check."
                    return msg
                end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  
  
  def bidupdatethreesixtykeyword(id_array,action_type,action_value,action_classifier,network_id)
      
      
      # ******************************************************set db name here
      db_name = "keyword_360_"+network_id.to_s
      # ******************************************************set db name here
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
                                
      if @network.count.to_i > 0
        
          @network.each do |network_d|
                begin
                  
                    requesttypearraycount = []
                    success_array = []
                    fail_array = []
                    fail_msg = {}
                    
                    @username = network_d["username"]
                    @password = network_d["password"]
                    @apitoken = network_d["api_token"]
                    @apisecret = network_d["api_secret"]
                                         
                    login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                    @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                    
                    if !@refresh_token.nil?
                        
                        @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "account", "getInfo")
                        if @response.headers["quotaremain"].to_i <= 500
                            msg = "You don't have enough quote, your request cannot be done."
                            return msg
                        end
                        
                        
                        @keyword = @threesixty_db[db_name].find('keyword_id' => { "$in" => id_array})
                        @threesixty_db.close()
                    
                        data_arr = []
                        @keyword.each do |keyword_d|
                                          
                                @price = keyword_d["price"]
                                
                                if action_type.to_s == "set_cpc"
                                    @new_price = action_value.to_f
                                end
                                
                                if action_type.to_s == "increase_cpc"
                                    if action_classifier.to_s == "RMB"
                                        @new_price = @price.to_f + action_value.to_f
                                    end
                                    
                                    if action_classifier.to_s == "%"
                                        @new_price = @price.to_f + (@price.to_f*action_value.to_f)/100
                                    end
                                      
                                end
                                
                                if action_type.to_s == "decrease_cpc"
                                    if action_classifier.to_s == "RMB"
                                        @new_price = @price.to_f - action_value.to_f
                                    end
                                    
                                    if action_classifier.to_s == "%"
                                        @new_price = @price.to_f - (@price.to_f*action_value.to_f)/100
                                    end
                                end
                                
                                requesttypearray = []
                                request_str = '{"id":'+keyword_d["keyword_id"].to_s+',"price":"'+@new_price.to_s+'"}'
                                requesttypearray << request_str
                                request = '['+requesttypearray.join(",")+']'
                                
                                body = { 
                                    'keywords' => request
                                }
                                
                                @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "keyword", "update", body)
                                @affectedRecords = @update_res["keyword_update_response"]
                                
                                requesttypearraycount << body
                                
                                @logger.info @response.headers["quotaremain"]
                                @logger.info body
                                # @logger.info @affectedRecords
                                @logger.info @update_res
                              
                                if @update_res["keyword_update_response"]["failures"] || @update_res["keyword_update_response"]["affectedRecords"].to_i == 0
                                    fail_array << keyword_d["keyword_id"].to_i
                                    
                                    key = keyword_d["keyword_id"].to_s
                                    
                                    if @update_res["keyword_update_response"]["failures"]["item"]["message"]
                                        fail_msg[key] = @update_res["keyword_update_response"]["failures"]["item"]["message"].to_s
                                    else
                                        fail_msg[key] = ""
                                    end
                                else
                                    success_array << keyword_d["keyword_id"].to_i
                                    # @threesixty_db[db_name].find('keyword_id' => keyword_d["keyword_id"].to_i).update_one('$set'=> { 'price' => @new_price.to_f })
                                    # @threesixty_db.close()
                                    
                                    set_detail_hash = {}
                                    set_detail_hash[:price] = @new_price.to_f
                                    
                                    set_hash = {}
                                    set_hash['$set'] = set_detail_hash
                                    
                                    filter_hash = {}
                                    filter_hash[:keyword_id] = keyword_d["keyword_id"].to_i
                                    
                                    update_hash = {}
                                    update_hash[:filter] = filter_hash
                                    update_hash[:update] = set_hash
                                    
                                    data_hash = {}
                                    data_hash[:update_one] = update_hash
                                    
                                    data_arr << data_hash
                                    
                                    if data_arr.count.to_i > 100
                                      
                                        @threesixty_db[db_name].bulk_write(data_arr)
                                        @threesixty_db.close()  
                                        
                                        data_arr = []
                                    end
                                end
                                
                                if @response.headers["quotaremain"].to_i <= 500
                                    msg = "You don't have enough quote, your request cannot be done."
                                    return msg
                                end
                                
                                if requesttypearraycount.count.to_i >= 10
                                    sleep 1
                                    requesttypearraycount = []
                                end
                        end
                    
                    else
                        msg = "You Api info in Adeqo is not correct, please check."
                        return msg    
                    end
                    
                    
                    if data_arr.count.to_i > 0
                                      
                        @threesixty_db[db_name].bulk_write(data_arr)
                        @threesixty_db.close()  
                        
                    end
                                    
                    msg = "Your request has been completed.<br />"
                      
                    msg = msg + success_array.count.to_s + " updated Successful. "
                    msg = msg + fail_array.count.to_s + " update Failed."
                    
                    if fail_array.count.to_i > 0
                        msg = msg + "<br /><br /><br />"
                        all_fail_array = @threesixty_db[db_name].find('keyword_id' => { "$in" => fail_array})
                        @threesixty_db.close()
                        
                        all_fail_array.each do |all_fail_array_d|
                            key = all_fail_array_d["keyword_id"].to_s
                            msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated bid Fail: " + fail_msg[key]
                        end
                    end
                    
                    return msg
                    
                rescue Exception
                    msg = "You Api info in Adeqo is not correct, please check."
                    return msg
                end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  
  
  
  
  def updatethreesixtykeyword(id_array,status,network_id)
      
      if status.to_s == "inactive"
          status = "pause"
          db_status = "暂停"
      end
      if status.to_s == "active"
          status = "enable"
          db_status = "启用"
      end
      
      # ******************************************************set db name here
      db_name = "keyword_360_"+network_id.to_s
      # ******************************************************set db name here
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
                                
      if @network.count.to_i > 0
        
          @network.each do |network_d|
                begin
                  
                    requesttypearraycount = []
                    success_array = []
                    fail_array = []
                    fail_msg = {}
                    
                    @username = network_d["username"]
                    @password = network_d["password"]
                    @apitoken = network_d["api_token"]
                    @apisecret = network_d["api_secret"]
                                         
                    login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                    @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                    
                    if !@refresh_token.nil?
                        
                        @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "account", "getInfo")
                        
                        if @response.headers["quotaremain"].to_i <= 500
                            msg = "You don't have enough quote, your request cannot be done."
                            return msg
                        end
                        
                        data_arr = []
                        
                        id_array.each do |id_array_d|
                                
                                requesttypearray = []
                                request_str = '{"id":' + id_array_d.to_s + ',"status":"' + status + '"}'
                                requesttypearray << request_str
                                request = '['+requesttypearray.join(",")+']'
                                
                                body = { 
                                    'keywords' => request
                                }
                                
                                @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "keyword", "update", body)
                                @affectedRecords = @update_res["keyword_update_response"]
                                
                                requesttypearraycount << body
                                
                                @logger.info @response.headers["quotaremain"]
                                @logger.info body
                                # @logger.info @affectedRecords
                                @logger.info @update_res
                              
                                if @update_res["keyword_update_response"]["failures"] || @update_res["keyword_update_response"]["affectedRecords"].to_i == 0
                                    fail_array << id_array_d.to_i
                                    
                                    if @update_res["keyword_update_response"]["failures"]["item"]["message"]
                                        fail_msg[id_array_d.to_s] = @update_res["keyword_update_response"]["failures"]["item"]["message"].to_s
                                    else
                                        fail_msg[id_array_d.to_s] = ""
                                    end
                                else
                                    success_array << id_array_d.to_i
                                    # @threesixty_db[db_name].find('keyword_id' => id_array_d.to_i).update_one('$set'=> { 'status' => db_status.to_s })
                                    # @threesixty_db.close()
                                    
                                    
                                    set_detail_hash = {}
                                    set_detail_hash[:status] = db_status.to_s
                                    
                                    set_hash = {}
                                    set_hash['$set'] = set_detail_hash
                                    
                                    filter_hash = {}
                                    filter_hash[:keyword_id] = id_array_d.to_i
                                    
                                    update_hash = {}
                                    update_hash[:filter] = filter_hash
                                    update_hash[:update] = set_hash
                                    
                                    data_hash = {}
                                    data_hash[:update_one] = update_hash
                                    
                                    data_arr << data_hash
                                    
                                    if data_arr.count.to_i > 100
                                      
                                        @threesixty_db[db_name].bulk_write(data_arr)
                                        @threesixty_db.close()  
                                        
                                        data_arr = []
                                    end
                                    
                                end
                                
                                if @response.headers["quotaremain"].to_i <= 500
                                    msg = "You don't have enough quote, your request cannot be done."
                                    return msg
                                end
                                
                                if requesttypearraycount.count.to_i >= 10
                                    sleep 1
                                    requesttypearraycount = []
                                end
                        end
                        
                        if data_arr.count.to_i > 0
                            @threesixty_db[db_name].bulk_write(data_arr)
                            @threesixty_db.close()  
                        end
                    else
                        msg = "You Api info in Adeqo is not correct, please check."
                        return msg    
                    end
                    
                    msg = "Your request has been completed.<br />"
                      
                    msg = msg + success_array.count.to_s + " updated Successful. "
                    msg = msg + fail_array.count.to_s + " update Failed."
                    
                    if fail_array.count.to_i > 0
                        msg = msg + "<br /><br /><br />"
                        all_fail_array = @threesixty_db[db_name].find('keyword_id' => { "$in" => fail_array})
                        @threesixty_db.close()
                        
                        all_fail_array.each do |all_fail_array_d|
                            key = all_fail_array_d["keyword_id"].to_s
                            msg = msg + "<br />" + all_fail_array_d["keyword"].to_s + " updated status Fail: " + fail_msg[key]
                        end
                    end
                    
                    return msg
                    
                rescue Exception
                    msg = "You Api info in Adeqo is not correct, please check."
                    return msg
                end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  
  
  def updatethreesixtyad(id_array,status,network_id)
      
      if status.to_s == "inactive"
          status = "pause"
          db_status = "暂停"
      end
      if status.to_s == "active"
          status = "enable"
          db_status = "启用"
      end
      
      # ******************************************************set db name here
      db_name = "ad_360_"+network_id.to_s
      # ******************************************************set db name here
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
                                
      if @network.count.to_i > 0
        
          @network.each do |network_d|
                begin
                  
                    requesttypearraycount = []
                    success_array = []
                    fail_array = []
                    fail_msg = {}
                    
                    @username = network_d["username"]
                    @password = network_d["password"]
                    @apitoken = network_d["api_token"]
                    @apisecret = network_d["api_secret"]
                                         
                    login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                    @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                    
                    if !@refresh_token.nil?
                        
                        @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "account", "getInfo")
                        if @response.headers["quotaremain"].to_i <= 500
                            msg = "You don't have enough quote, your request cannot be done."
                            return msg
                        end
                        
                        data_arr = []
                        
                        id_array.each do |id_array_d|
                                
                                requesttypearray = []
                                request_str = '{"id":' + id_array_d.to_s + ',"status":"' + status + '"}'
                                requesttypearray << request_str
                                request = '['+requesttypearray.join(",")+']'
                                
                                body = { 
                                    'creatives' => request
                                }
                                
                                @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "creative", "update", body)
                                @affectedRecords = @update_res["creative_update_response"]
                                
                                requesttypearraycount << body
                                
                                # @logger.info @response.headers["quotaremain"]
                                @logger.info body
                                # @logger.info @affectedRecords
                                @logger.info @update_res
                              
                                if @update_res["creative_update_response"]["failures"] || @update_res["creative_update_response"]["affectedRecords"].to_i == 0
                                    fail_array << id_array_d.to_i
                                    
                                    if @update_res["creative_update_response"]["failures"]["item"]["message"]
                                        fail_msg[id_array_d.to_s] = @update_res["creative_update_response"]["failures"]["item"]["message"].to_s
                                    else
                                        fail_msg[id_array_d.to_s] = ""
                                    end
                                else
                                    success_array << id_array_d.to_i
                                    
                                    # @threesixty_db[db_name].find('ad_id' => id_array_d.to_i).update_one('$set'=> { 'status' => db_status.to_s })
                                    # @threesixty_db.close()
                                    
                                    set_detail_hash = {}
                                    set_detail_hash[:status] = db_status.to_s
                                    
                                    set_hash = {}
                                    set_hash['$set'] = set_detail_hash
                                    
                                    filter_hash = {}
                                    filter_hash[:ad_id] = id_array_d.to_i
                                    
                                    update_hash = {}
                                    update_hash[:filter] = filter_hash
                                    update_hash[:update] = set_hash
                                    
                                    data_hash = {}
                                    data_hash[:update_one] = update_hash
                                    
                                    data_arr << data_hash
                                    
                                    if data_arr.count.to_i > 100
                                      
                                        @threesixty_db[db_name].bulk_write(data_arr)
                                        @threesixty_db.close()  
                                        
                                        data_arr = []
                                    end
                                end
                                
                                if @response.headers["quotaremain"].to_i <= 500
                                    msg = "You don't have enough quote, your request cannot be done."
                                    return msg
                                end
                                
                                if requesttypearraycount.count.to_i >= 10
                                    sleep 1
                                    requesttypearraycount = []
                                end
                        end
                        
                        if data_arr.count.to_i > 0
                                      
                            @threesixty_db[db_name].bulk_write(data_arr)
                            @threesixty_db.close()  
                            
                        end
                                    
                    else    
                        msg = "You Api info in Adeqo is not correct, please check."
                        return msg
                    end
                    
                    msg = "Your request has been completed.<br />"
                      
                    msg = msg + success_array.count.to_s + " updated Successful. "
                    msg = msg + fail_array.count.to_s + " update Failed."
                    
                    if fail_array.count.to_i > 0
                        msg = msg + "<br /><br /><br />"
                        all_fail_array = @threesixty_db[db_name].find('ad_id' => { "$in" => fail_array})
                        @threesixty_db.close()
                        
                        all_fail_array.each do |all_fail_array_d|
                            key = all_fail_array_d["ad_id"].to_s
                            msg = msg + "<br />" + all_fail_array_d["title"].to_s + " updated status Fail: " + fail_msg[key]
                        end
                    end
                    
                    return msg
                    
                rescue Exception
                    msg = "You Api info in Adeqo is not correct, please check."
                    return msg
                end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  
  def findupdatethreesixtyadgroup(id_array,find_and_replace_name,find_and_replace_find,find_and_replace_value,network_id)
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      
      db_name = "adgroup_360_"+network_id.to_s
      
      if @network.count.to_i > 0
        
          @network.each do |network_d|
                begin
                    requesttypearraycount = []
                    success_array = []
                    fail_array = []
                    fail_msg = {}
                    
                    @username = network_d["username"]
                    @password = network_d["password"]
                    @apitoken = network_d["api_token"]
                    @apisecret = network_d["api_secret"]
                                         
                    login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                    @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                    
                    if !@refresh_token.nil?
                        @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "account", "getInfo")
                        if @response.headers["quotaremain"].to_i <= 500
                            msg = "You don't have enough quote, your request cannot be done."
                            return msg
                        end
                    
                        # ******************************************************set db name here
                        
                        @adgroup = @threesixty_db[db_name].find('adgroup_id' => { "$in" => id_array})
                        @threesixty_db.close()
                        # ******************************************************set db name here
                    
                        data_arr = []
                        
                        @adgroup.each do |adgroup_d|
                                
                                @adgroup_name = adgroup_d["adgroup_name"]
                                          
                                body = {}
                                body[:id] = adgroup_d['adgroup_id'].to_i
                                
                                if find_and_replace_name.to_s == "replace_adgroup_name"
                                    @adgroup_name = @adgroup_name.gsub(find_and_replace_find.to_s, find_and_replace_value.to_s)
                                    body[:name] = @adgroup_name
                                end
                                
                                @logger.info body
                                
                                @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "group", "update", body)
                                @affectedRecords = @update_res["group_update_response"]
                                
                                requesttypearraycount << body
                                
                                # @logger.info "---"
                                
                                # @logger.info @affectedRecords
                                @logger.info @update_res
                              
                                if @update_res["group_update_response"]["failures"] || @update_res["group_update_response"]["affectedRecords"].to_i == 0
                                    fail_array << adgroup_d['adgroup_id'].to_i
                                    
                                    key = adgroup_d['adgroup_id'].to_s
                                    
                                    if @update_res["group_update_response"]["failures"]["item"]["message"]
                                        fail_msg[key] = @update_res["group_update_response"]["failures"]["item"]["message"].to_s
                                    else
                                        fail_msg[key] = ""
                                    end
                                else
                                    success_array << adgroup_d['adgroup_id'].to_i
                                    # @threesixty_db[db_name].find('adgroup_id' => adgroup_d['adgroup_id'].to_i).update_one('$set'=> { 'adgroup_name' => @adgroup_name.to_s })
                                    # @threesixty_db.close()
                                    
                                    
                                    set_detail_hash = {}
                                    set_detail_hash[:adgroup_name] = @adgroup_name.to_s
                                    
                                    set_hash = {}
                                    set_hash['$set'] = set_detail_hash
                                    
                                    filter_hash = {}
                                    filter_hash[:adgroup_id] = adgroup_d['adgroup_id'].to_i
                                    
                                    update_hash = {}
                                    update_hash[:filter] = filter_hash
                                    update_hash[:update] = set_hash
                                    
                                    data_hash = {}
                                    data_hash[:update_one] = update_hash
                                    
                                    data_arr << data_hash
                                    
                                    if data_arr.count.to_i > 100
                                      
                                        @threesixty_db[db_name].bulk_write(data_arr)
                                        @threesixty_db.close()  
                                        
                                        data_arr = []
                                    end
                                    
                                end
                                
                                if @response.headers["quotaremain"].to_i <= 500
                                    msg = "You don't have enough quote, your request cannot be done."
                                    return msg
                                end
                                
                                if requesttypearraycount.count.to_i >= 10
                                    sleep 1
                                    requesttypearraycount = []
                                end
                        end
                        
                        if data_arr.count.to_i > 0
                            @threesixty_db[db_name].bulk_write(data_arr)
                            @threesixty_db.close()  
                        end
                    
                    else    
                        msg = "You Api info in Adeqo is not correct, please check."
                        return msg
                    end
                    
                    msg = "Your request has been completed.<br />"
                      
                    msg = msg + success_array.count.to_s + " updated Successful. "
                    msg = msg + fail_array.count.to_s + " update Failed."
                    
                    if fail_array.count.to_i > 0
                        msg = msg + "<br /><br /><br />"
                        all_fail_array = @threesixty_db[db_name].find('adgroup_id' => { "$in" => fail_array})
                        @threesixty_db.close()
                        
                        all_fail_array.each do |all_fail_array_d|
                            key = all_fail_array_d["adgroup_id"].to_s
                            msg = msg + "<br />" + all_fail_array_d["adgroup_name"].to_s + " updated "+find_and_replace_name+" status Fail: " + fail_msg[key]
                        end
                    end
                    
                    return msg
                    
                rescue Exception
                    msg = "You Api info in Adeqo is not correct, please check."
                    return msg
                end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
      
      
  end
  
  
  
  def bidupdatethreesixtyadgroup(id_array,action_type,action_value,action_classifier,network_id)
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      
      db_name = "adgroup_360_"+network_id.to_s
      
      if @network.count.to_i > 0
        
          @network.each do |network_d|
                begin
                    requesttypearraycount = []
                    success_array = []
                    fail_array = []
                    fail_msg = {}
                    
                    @username = network_d["username"]
                    @password = network_d["password"]
                    @apitoken = network_d["api_token"]
                    @apisecret = network_d["api_secret"]
                                         
                    login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                    @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                    
                    if !@refresh_token.nil?
                      
                        @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "account", "getInfo")
                        if @response.headers["quotaremain"].to_i <= 500
                            msg = "You don't have enough quote, your request cannot be done."
                            return msg
                        end
                    
                        # ******************************************************set db name here
                        
                        @adgroup = @threesixty_db[db_name].find('adgroup_id' => { "$in" => id_array})
                        @threesixty_db.close()
                        # ******************************************************set db name here
                    
                        data_arr = []
                        @adgroup.each do |adgroup_d|
                                
                                @price = adgroup_d["price"]
                                          
                                body = {}
                                body[:id] = adgroup_d['adgroup_id'].to_i
                                
                                if action_type.to_s == "set_cpc"
                                    @new_price = action_value.to_f
                                    body[:price] = @new_price
                                end
                                
                                if action_type.to_s == "increase_cpc"
                                    if action_classifier.to_s == "RMB"
                                        @new_price = @price.to_f + action_value.to_f
                                        body[:price] = @new_price
                                    end
                                    
                                    if action_classifier.to_s == "%"
                                        @new_price = @price.to_f + (@price.to_f*action_value.to_f)/100
                                        body[:price] = @new_price
                                    end
                                      
                                end
                                
                                if action_type.to_s == "decrease_cpc"
                                    if action_classifier.to_s == "RMB"
                                        @new_price = @price.to_f - action_value.to_f
                                        body[:price] = @new_price
                                    end
                                    
                                    if action_classifier.to_s == "%"
                                        @new_price = @price.to_f - (@price.to_f*action_value.to_f)/100
                                        body[:price] = @new_price
                                    end
                                end
                                
                                @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "group", "update", body)
                                @affectedRecords = @update_res["group_update_response"]
                                
                                requesttypearraycount << body
                                
                                # @logger.info "---"
                                @logger.info body
                                # @logger.info @affectedRecords
                                @logger.info @update_res
                                
                                if @update_res["group_update_response"]["failures"] || @update_res["group_update_response"]["affectedRecords"].to_i == 0
                                    fail_array << adgroup_d['adgroup_id'].to_i
                                    
                                    key = adgroup_d['adgroup_id'].to_s
                                    
                                    if @update_res["group_update_response"]["failures"]["item"]["message"]
                                        fail_msg[key] = @update_res["group_update_response"]["failures"]["item"]["message"].to_s
                                    else
                                        fail_msg[key] = ""
                                    end
                                else
                                    success_array << adgroup_d['adgroup_id'].to_i
                                    # @threesixty_db[db_name].find('adgroup_id' => adgroup_d['adgroup_id'].to_i).update_one('$set'=> { 'price' => @new_price.to_f })
                                    # @threesixty_db.close()
                                    
                                    set_detail_hash = {}
                                    set_detail_hash[:price] = @new_price.to_s
                                    
                                    set_hash = {}
                                    set_hash['$set'] = set_detail_hash
                                    
                                    filter_hash = {}
                                    filter_hash[:adgroup_id] = adgroup_d['adgroup_id'].to_i
                                    
                                    update_hash = {}
                                    update_hash[:filter] = filter_hash
                                    update_hash[:update] = set_hash
                                    
                                    data_hash = {}
                                    data_hash[:update_one] = update_hash
                                    
                                    data_arr << data_hash
                                    
                                    if data_arr.count.to_i > 100
                                      
                                        @threesixty_db[db_name].bulk_write(data_arr)
                                        @threesixty_db.close()  
                                        
                                        data_arr = []
                                    end
                                end
                                
                                if @response.headers["quotaremain"].to_i <= 500
                                    msg = "You don't have enough quote, your request cannot be done."
                                    return msg
                                end
                                
                                if requesttypearraycount.count.to_i >= 10
                                    sleep 1
                                    requesttypearraycount = []
                                end
                        end
                        
                        if data_arr.count.to_i > 0
                            @threesixty_db[db_name].bulk_write(data_arr)
                            @threesixty_db.close()  
                        end
                        
                    else
                        msg = "You Api info in Adeqo is not correct, please check."
                        return msg    
                    end
                    
                    msg = "Your request has been completed.<br />"
                      
                    msg = msg + success_array.count.to_s + " updated Successful. "
                    msg = msg + fail_array.count.to_s + " update Failed."
                    
                    if fail_array.count.to_i > 0
                        msg = msg + "<br /><br /><br />"
                        all_fail_array = @threesixty_db[db_name].find('adgroup_id' => { "$in" => fail_array})
                        @threesixty_db.close()
                        
                        all_fail_array.each do |all_fail_array_d|
                            key = all_fail_array_d["adgroup_id"].to_s
                            msg = msg + "<br />" + all_fail_array_d["adgroup_name"].to_s + " updated bid Fail: " + fail_msg[key]
                        end
                    end
                    
                    return msg
                    
                rescue Exception
                    msg = "You Api info in Adeqo is not correct, please check."
                    return msg
                end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
      
      
  end
  
  
  
  def updatethreesixtyadgroup(id_array,status,network_id)
      
      if status.to_s == "inactive"
          status = "pause"
          db_status = "暂停"
      end
      if status.to_s == "active"
          status = "enable"
          db_status = "启用"
      end
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close

      # ******************************************************set db name here
      db_name = "adgroup_360_"+network_id.to_s
      # ******************************************************set db name here
      
      if @network.count.to_i > 0
        
          @network.each do |network_d|
                begin
                  
                    requesttypearraycount = []
                    success_array = []
                    fail_array = []
                    fail_msg = {}
                    
                    @username = network_d["username"]
                    @password = network_d["password"]
                    @apitoken = network_d["api_token"]
                    @apisecret = network_d["api_secret"]
                                         
                    login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                    @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                    
                    if !@refresh_token.nil?
                        
                        @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "account", "getInfo")
                        if @response.headers["quotaremain"].to_i <= 500
                            msg = "You don't have enough quote, your request cannot be done."
                            return msg
                        end
                        
                        data_arr = []
                        id_array.each do |id_array_d|
                                          
                                body = {}
                                body[:id] = id_array_d.to_i
                                body[:status] = status
                                
                                @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "group", "update", body)
                                @affectedRecords = @update_res["group_update_response"]
                                
                                requesttypearraycount << body
                                
                                # @logger.info "---"
                                # @logger.info body
                                # @logger.info @affectedRecords
                                @logger.info @update_res
                              
                                if @update_res["group_update_response"]["failures"] || @update_res["group_update_response"]["affectedRecords"].to_i == 0
                                    fail_array << id_array_d.to_i
                                    
                                    if @update_res["group_update_response"]["failures"]["item"]["message"]
                                        fail_msg[id_array_d.to_s] = @update_res["group_update_response"]["failures"]["item"]["message"].to_s
                                    else
                                        fail_msg[id_array_d.to_s] = ""
                                    end
                                else
                                    success_array << id_array_d.to_i
                                    # @threesixty_db[db_name].find('adgroup_id' => id_array_d.to_i).update_one('$set'=> { 'status' => db_status.to_s })
                                    # @threesixty_db.close()
                                    
                                    
                                    set_detail_hash = {}
                                    set_detail_hash[:status] = db_status.to_s
                                    
                                    set_hash = {}
                                    set_hash['$set'] = set_detail_hash
                                    
                                    filter_hash = {}
                                    filter_hash[:adgroup_id] = id_array_d.to_i
                                    
                                    update_hash = {}
                                    update_hash[:filter] = filter_hash
                                    update_hash[:update] = set_hash
                                    
                                    data_hash = {}
                                    data_hash[:update_one] = update_hash
                                    
                                    data_arr << data_hash
                                    
                                    if data_arr.count.to_i > 100
                                      
                                        @threesixty_db[db_name].bulk_write(data_arr)
                                        @threesixty_db.close()  
                                        
                                        data_arr = []
                                    end
                                end
                                
                                if @response.headers["quotaremain"].to_i <= 500
                                    msg = "You don't have enough quote, your request cannot be done."
                                    return msg
                                end
                                
                                if requesttypearraycount.count.to_i >= 10
                                    sleep 1
                                    requesttypearraycount = []
                                end
                        end
                    
                        if data_arr.count.to_i > 0
                            @threesixty_db[db_name].bulk_write(data_arr)
                            @threesixty_db.close()  
                        end
                                    
                    else
                        msg = "You don't have enough quote, your request cannot be done."
                        return msg    
                    end
                    
                    msg = "Your request has been completed.<br />"
                      
                    msg = msg + success_array.count.to_s + " updated Successful. "
                    msg = msg + fail_array.count.to_s + " update Failed."
                    
                    if fail_array.count.to_i > 0
                        msg = msg + "<br /><br /><br />"
                        all_fail_array = @threesixty_db[db_name].find('adgroup_id' => { "$in" => fail_array})
                        @threesixty_db.close()
                        
                        all_fail_array.each do |all_fail_array_d|
                            key = all_fail_array_d["adgroup_id"].to_s
                            msg = msg + "<br />" + all_fail_array_d["adgroup_name"].to_s + " updated status Fail: " + fail_msg[key]
                        end
                    end
                    
                    return msg
                    
                rescue Exception
                    msg = "You Api info in Adeqo is not correct, please check."
                    return msg
                end
          end
          
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
      
      
  end
  
  
  
  
  
  
  def updateshenmacampaign(id_array,status,network_id)
      
      id_array = id_array.sort
      
      if status.to_s.downcase == "inactive"
          pause = "true"
      end
      if status.to_s.downcase == "active"
          pause = "false"
      end
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      
      if @network.count.to_i > 0
          @network.each do |network_d|
              begin
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  
                  
                  service = "account"
                  method = "getAccount"
                  
                  json = {'header' => { 
                                          'token' => network_d["api_token"].to_s,
                                          'username' => network_d["username"].to_s,
                                          'password' => network_d["password"].to_s 
                                      },
                           'body'  => {
                                          'requestData' => ["account_all"]
                                      }
                          }
                          
                          
                  @account_info = shenma_api(service,method,json)
                  @logger.info @account_info
                
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"] == "执行成功"
                      @header = @account_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      msg = "You don't have enough quote, your request cannot be done."
                      return  msg
                  else
                      msg = "You Api info in Adeqo is not correct, please check."
                      return  msg   
                  end
                  
                  start from here
                               
                  requesttypearraycount = []
                  
                  data_arr = []
                  id_array.each do |id_array_d|
                    
                    
                      
                      service = "campaign"
                      method = "updateCampaign"
                      
                      json = {'header' => { 
                                              'token' => network_d["api_token"].to_s,
                                              'username' => network_d["username"].to_s,
                                              'password' => network_d["password"].to_s 
                                          },
                               'body'  => {
                                              'campaignTypes' => [{"campaignId" => id_array_d.to_i,"pause" => pause}]
                                          }
                              }
                              
                              
                      @update_info = shenma_api(service,method,json)
                      
                    
                    
                      requesttypearraycount << id_array_d.to_i
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["leftQuota"]
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"] == "执行成功"
                          
                          success_array << id_array_d.to_i
                          
                          
                          # @db["all_campaign"].find('campaign_id' => id_array_d.to_i,'network_type' => "baidu").update_one('$set'=> { 'status' => @update_info["body"]["data"][0]["status"].to_i,'pause' => pause.to_s })
                          # @db.close
                          
                          
                          
                          # @db["all_campaign"].find({ "$and" => [ {:campaign_id => id_array_d.to_i}, {:network_type => "baidu"} ] }).update_one('$set'=> { 'status' => @update_info["body"]["data"][0]["status"].to_i,'pause' => pause.to_s })
                          # @db.close
                          
                          
                          set_detail_hash = {}
                          set_detail_hash[:pause] = pause.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:campaign_id] = id_array_d.to_i
                          filter_hash[:network_type] = "shenma"
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @db["all_campaign"].bulk_write(data_arr)
                              @db.close  
                              
                              data_arr = []
                          end
                      else
                          fail_array << id_array_d.to_i
                          fail_msg[id_array_d.to_s] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 100
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  
                  if data_arr.count.to_i > 0
                      @db["all_campaign"].bulk_write(data_arr)
                      @db.close  
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["all_campaign"].find('cpc_plan_id' => { "$in" => success_array},'network_type' => "sogou")
#                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["campaign_name"].to_s + " updated status Successful."
                      # end
#                           
                  # end
                  
                  
                  if fail_array.count.to_i > 0
                      
                      msg = msg + "<br /><br /><br />"
                      # all_fail_array = @db["all_campaign"].find('campaign_id' => { "$in" => fail_array},'network_type' => "baidu")
                      
                      
                      all_fail_array = @db["all_campaign"].find({ "$and" => [ {:campaign_id => { "$in" => fail_array}}, {:network_type => "shenma"} ] })
                      @db.close
                      
                      all_fail_array.each do |all_fail_array_d|
                          key = all_fail_array_d["campaign_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["campaign_name"].to_s + " updated status Fail: " + fail_msg[key]
                      end
                  end
                  
                  
                  # @logger.info msg.to_s      
                  return  msg
                  
              rescue Exception
                  msg = "You Api info in Adeqo is not correct, please check."
                  # @logger.info msg.to_s
                  return  msg
              end
          end
      else
          msg = "Your request is invalid. Please check."
          # @logger.info msg.to_s
          return  msg
      end
  end
  
  
  
  
  
  
  
  def updatebaiducampaign(id_array,status,network_id)
      
      id_array = id_array.sort
      
      if status.to_s.downcase == "inactive"
          pause = "true"
      end
      if status.to_s.downcase == "active"
          pause = "false"
      end
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      
      if @network.count.to_i > 0
          @network.each do |network_d|
              begin
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  service = "AccountService"
                  method = "getAccountInfo"
                  
                  json = {'header' => { 
                                          'token' => network_d["api_token"].to_s,
                                          'username' => network_d["username"].to_s,
                                          'password' => network_d["password"].to_s 
                                      },
                           'body'  => {
                                          'accountFields' => ["userId","balance","cost","payment","budgetType","budget","regionTarget","excludeIp","openDomains","regDomain","budgetOfflineTime","weeklyBudget","userStat","isDynamicCreative","dynamicCreativeParam","pcBalance","mobileBalance"]
                                      }
                          }       
                          
                  @account_info = baidu_api(service,method,json)
                  @logger.info @account_info
                  
                  if !@account_info["header"]["desc"].nil? && @account_info["header"]["desc"].to_s == "success"
                    
                      @header = @account_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if @remain_quote.to_i <= 500  
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                  else
                      msg = "You Api info in Adeqo is not correct, please check."
                      return  msg
                  end
                               
                  requesttypearraycount = []
                  
                  data_arr = []
                  id_array.each do |id_array_d|
                    
                      service = "CampaignService"
                      method = "updateCampaign"
                      
                      json = {'header' => { 
                                              'token' => network_d["api_token"].to_s,
                                              'username' => network_d["username"].to_s,
                                              'password' => network_d["password"].to_s 
                                          },
                               'body'  => {
                                              'campaignTypes' => [{"campaignId" => id_array_d.to_i,"pause" => pause, "status" => 0}]
                                          }
                              }       
                              
                      @update_info = baidu_api(service,method,json)
                    
                      requesttypearraycount << id_array_d.to_i
                      
                      @header = @update_info["header"]
                      @remain_quote = @header["rquota"]
                      
                      if !@update_info["header"]["desc"].nil? && @update_info["header"]["desc"].to_s == "success"
                          
                          success_array << id_array_d.to_i
                          
                          
                          # @db["all_campaign"].find('campaign_id' => id_array_d.to_i,'network_type' => "baidu").update_one('$set'=> { 'status' => @update_info["body"]["data"][0]["status"].to_i,'pause' => pause.to_s })
                          # @db.close
                          
                          
                          
                          # @db["all_campaign"].find({ "$and" => [ {:campaign_id => id_array_d.to_i}, {:network_type => "baidu"} ] }).update_one('$set'=> { 'status' => @update_info["body"]["data"][0]["status"].to_i,'pause' => pause.to_s })
                          # @db.close
                          
                          
                          set_detail_hash = {}
                          set_detail_hash[:status] = @update_info["body"]["data"][0]["status"].to_i
                          set_detail_hash[:pause] = pause.to_s
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:campaign_id] = id_array_d.to_i
                          filter_hash[:network_type] = "baidu"
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @db["all_campaign"].bulk_write(data_arr)
                              @db.close  
                              
                              data_arr = []
                          end
                      else
                          fail_array << id_array_d.to_i
                          fail_msg[id_array_d.to_s] = @update_info["header"]["failures"][0]["message"].to_s
                      end
                      
                      
                      if @remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if requesttypearraycount.count.to_i >= 10
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  
                  if data_arr.count.to_i > 0
                      @db["all_campaign"].bulk_write(data_arr)
                      @db.close  
                  end
                          
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["all_campaign"].find('cpc_plan_id' => { "$in" => success_array},'network_type' => "sogou")
#                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["campaign_name"].to_s + " updated status Successful."
                      # end
#                           
                  # end
                  
                  
                  if fail_array.count.to_i > 0
                      
                      msg = msg + "<br /><br /><br />"
                      # all_fail_array = @db["all_campaign"].find('campaign_id' => { "$in" => fail_array},'network_type' => "baidu")
                      
                      
                      all_fail_array = @db["all_campaign"].find({ "$and" => [ {:campaign_id => { "$in" => fail_array}}, {:network_type => "baidu"} ] })
                      @db.close
                      
                      all_fail_array.each do |all_fail_array_d|
                          key = all_fail_array_d["campaign_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["campaign_name"].to_s + " updated status Fail: " + fail_msg[key]
                      end
                  end
                  
                  
                  # @logger.info msg.to_s      
                  return  msg
                  
              rescue Exception
                  msg = "You Api info in Adeqo is not correct, please check."
                  # @logger.info msg.to_s
                  return  msg
              end
          end
      else
          msg = "Your request is invalid. Please check."
          # @logger.info msg.to_s
          return  msg
      end
  end
  
  
  
  
  def updatesogoucampaign(id_array,status,network_id)
      
      id_array = id_array.sort
      
      if status.to_s.downcase == "inactive"
          db_status = 12
          pause = "true"
      end
      if status.to_s.downcase == "active"
          pause = "false"
          db_status = 11
      end
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      
      if @network.count.to_i > 0
          @network.each do |network_d|
              begin
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"AccountService")
                  sogou_result = @sogou_api.call(:get_account_info)
                
                  # sogou_body = sogou_result.body.to_hash
                  # sogou_body = sogou_body[:get_account_info_response][:account_info_type]
                  
                  if sogou_result.header[:res_header][:rquota].to_i <= 500
                      msg = "You don't have enough quote, your request cannot be done."
                      return  msg
                  end 
                               
                  sogou_api(network_d["username"],network_d["password"],network_d["api_token"],"CpcPlanService")
                  requesttypearray = []
                  requesttypearraycount = []
                  
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                  
                  data_arr = []
                  id_array.each do |id_array_d|
                      requesttype = {}
                                                    
                      requesttype[:cpcPlanId]    =  id_array_d.to_i
                      requesttype[:pause]    =  pause
                      
                      requesttypearray << requesttype
                      requesttypearraycount << requesttype
                      
                      @update_status = @sogou_api.call(:update_cpc_plan, message: { cpcPlanTypes: requesttypearray })
                      @header = @update_status.header.to_hash
                      @msg = @header[:res_header][:desc]
                      # @return_num =  @header[:res_header][:oprs]
                      # @update_status_body = @update_status.body.to_hash
                      # msg << @msg
                      @logger.info @header
                      remain_quote = @header[:res_header][:rquota]
                      
                      requesttypearray = []
                      
                      
                      if remain_quote.to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return  msg
                      end
                      
                      if @msg.to_s.downcase == "success"
                        
                          
                          # @db["all_campaign"].find({ "$and" => [ {:cpc_plan_id => id_array_d.to_i}, {:network_type => "sogou"} ] }).update_one('$set'=> { 'status' => db_status.to_i })
                          # @db.close 
                          
                          
                          set_detail_hash = {}
                          set_detail_hash[:status] = db_status.to_i
                          
                          set_hash = {}
                          set_hash['$set'] = set_detail_hash
                          
                          filter_hash = {}
                          filter_hash[:cpc_plan_id] = id_array_d.to_i
                          filter_hash[:network_type] = "sogou"
                          
                          update_hash = {}
                          update_hash[:filter] = filter_hash
                          update_hash[:update] = set_hash
                          
                          data_hash = {}
                          data_hash[:update_one] = update_hash
                          
                          data_arr << data_hash
                          
                          if data_arr.count.to_i > 100
                            
                              @db["all_campaign"].bulk_write(data_arr)
                              @db.close  
                              
                              data_arr = []
                          end
                          
                          
                          
                          success_array << id_array_d.to_i
                      else
                          fail_array << id_array_d.to_i
                          fail_msg[id_array_d.to_s] = @header[:res_header][:failures][:message].to_s
                      end
                      
                      if requesttypearraycount.count.to_i >= 10
                          sleep 1
                          requesttypearraycount = []
                      end
                  end
                  
                  
                  if data_arr.count.to_i > 0
                      @db["all_campaign"].bulk_write(data_arr)
                      @db.close  
                  end
                  
                  
                  msg = "Your request has been completed.<br />"
                  
                  msg = msg + success_array.count.to_s + " updated Successful. "
                  msg = msg + fail_array.count.to_s + " update Failed."
                  
                  # if success_array.count.to_i > 0
                      # msg = msg + "<br /><br /><br />"
                      # all_success_array = @db["all_campaign"].find('cpc_plan_id' => { "$in" => success_array},'network_type' => "sogou")
#                           
                      # all_success_array.each do |all_success_array_d|
                          # msg = msg + "<br />" + all_success_array_d["campaign_name"].to_s + " updated status Successful."
                      # end
#                           
                  # end
                  
                  
                  if fail_array.count.to_i > 0
                      
                      msg = msg + "<br /><br /><br />"
                      # all_fail_array = @db["all_campaign"].find('cpc_plan_id' => { "$in" => fail_array},'network_type' => "sogou")
                      
                      
                      all_fail_array = @db["all_campaign"].find({ "$and" => [ {:cpc_plan_id => { "$in" => fail_array}}, {:network_type => "sogou"} ] })
                      @db.close
                      
                      all_fail_array.each do |all_fail_array_d|
                          key = all_fail_array_d["cpc_plan_id"].to_s
                          msg = msg + "<br />" + all_fail_array_d["campaign_name"].to_s + " updated status Fail: " + fail_msg[key]
                      end
                  end
                  
                  
                  # @logger.info msg.to_s      
                  return  msg
                  
              rescue Exception
                  msg = "You Api info in Adeqo is not correct, please check."
                  # @logger.info msg.to_s
                  return  msg
              end
          end
      else
          msg = "Your request is invalid. Please check."
          # @logger.info msg.to_s
          return  msg
      end
  end
  
  
  
  def updatethreesixtycampaign(id_array,status,network_id)
      
      id_array = id_array.sort
      
      if status.to_s == "inactive"
          status_360 = "pause"
          db_status = "暂停"
          db_sys_status = "推广计划暂停"
      end
      if status.to_s == "active"
          status_360 = "enable"
          db_status = "启用"
          db_sys_status = "有效"
      end
      
      @network = @db[:network].find(id: network_id.to_i)
      @db.close
      
      # msg = []
      
      if @network.count.to_i > 0
          @network.each do |network_d|
              begin
                
                  requesttypearraycount = []
                  success_array = []
                  fail_array = []
                  fail_msg = {}
                      
                  @username = network_d["username"]
                  @password = network_d["password"]
                  @apitoken = network_d["api_token"]
                  @apisecret = network_d["api_secret"]
                                       
                  login_info = threesixty_api_login(@username,@password,@apitoken,@apisecret)
                  @refresh_token = login_info["account_clientLogin_response"]["accessToken"]
                  
                  if !@refresh_token.nil?
                    
                      @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "account", "getInfo")
                      if @response.headers["quotaremain"].to_i <= 500
                          msg = "You don't have enough quote, your request cannot be done."
                          return msg
                      end
                      
                      data_arr = []
                      id_array.each do |id_array_d|
                          
                              body = {}
                              body[:id] = id_array_d.to_i
                              body[:status] = status_360
                              
                              @update_res = threesixty_api( network_d["api_token"].to_s, @refresh_token, "campaign", "update", body)
                              @affectedRecords = @update_res["campaign_update_response"]
                              
                              requesttypearraycount << body
                              @logger.info @update_res.to_s
                              # @logger.info @response.headers["quotaremain"].to_s
                              
        
                              if @update_res["campaign_update_response"]["failures"] || @update_res["campaign_update_response"]["affectedRecords"].to_i == 0
                                  fail_array << id_array_d.to_i
                                  
                                  if !@update_res["campaign_update_response"]["failures"]["item"]["message"].nil?
                                      fail_msg[id_array_d.to_s] = @update_res["campaign_update_response"]["failures"]["item"]["message"].to_s
                                  else
                                      fail_msg[id_array_d.to_s] = ""
                                  end    
                              else
                                  success_array << id_array_d.to_i
                                  
                                  
                                  # @db["all_campaign"].find({ "$and" => [ {:campaign_id => id_array_d.to_i}, {:network_type => "360"} ] }).update_one('$set'=> { 'status' => db_status.to_s, 'sys_status' => db_sys_status.to_s })
                                  # @db.close
                                  
                                  
                                  set_detail_hash = {}
                                  set_detail_hash[:status] = db_status.to_s
                                  set_detail_hash[:sys_status] = db_sys_status.to_s
                                  
                                  set_hash = {}
                                  set_hash['$set'] = set_detail_hash
                                  
                                  filter_hash = {}
                                  filter_hash[:campaign_id] = id_array_d.to_i
                                  filter_hash[:network_type] = "360"
                                  
                                  update_hash = {}
                                  update_hash[:filter] = filter_hash
                                  update_hash[:update] = set_hash
                                  
                                  data_hash = {}
                                  data_hash[:update_one] = update_hash
                                  
                                  data_arr << data_hash
                                  
                                  if data_arr.count.to_i > 100
                                    
                                      @db["all_campaign"].bulk_write(data_arr)
                                      @db.close  
                                      
                                      data_arr = []
                                  end
                                  
                              end
                              
                              if @response.headers["quotaremain"].to_i <= 500
                                  msg = "You don't have enough quote, your request cannot be done."
                                  return msg
                              end
                              
                              if requesttypearraycount.count.to_i >= 10
                                  sleep 1
                                  requesttypearraycount = []
                              end
                      end
                      
                      if data_arr.count.to_i > 0
                          @db["all_campaign"].bulk_write(data_arr)
                          @db.close  
                      end
                       
                      msg = "Your request has been completed.<br />"
                      
                      msg = msg + success_array.count.to_s + " updated Successful. "
                      msg = msg + fail_array.count.to_s + " update Failed."
                      
                      # if success_array.count.to_i > 0
                          # msg = msg + "<br /><br /><br />"
                          # all_success_array = @db["all_campaign"].find('campaign_id' => { "$in" => success_array},'network_type' => "360")
#                           
                          # all_success_array.each do |all_success_array_d|
                              # msg = msg + "<br />" + all_success_array_d["campaign_name"].to_s + " updated status Successful."
                          # end
#                           
                      # end
                      
                      
                      if fail_array.count.to_i > 0
                          msg = msg + "<br /><br /><br />"
                          # all_fail_array = @db["all_campaign"].find('campaign_id' => { "$in" => fail_array},'network_type' => "360")
                          
                          
                          all_fail_array = @db["all_campaign"].find({ "$and" => [ {:campaign_id => { "$in" => fail_array}}, {:network_type => "360"} ] })
                          @db.close
                          
                          all_fail_array.each do |all_fail_array_d|
                              key = all_fail_array_d["campaign_id"].to_s
                              msg = msg + "<br />" + all_fail_array_d["campaign_name"].to_s + " updated status Fail: " + fail_msg[key]
                          end
                      end
                      
                      return msg
                      
                  else
                      msg = "You Api info in Adeqo is incorrect, please check."
                      return msg
                  end
                  
              rescue Exception
                  msg = "You Api info in Adeqo is incorrect, please check."
                  return msg
              end
          end
      
      else
          msg = "Your request is invalid. Please check."
          return msg
      end
  end
  
  
  
  def send_csv(name,head,array,email)
      
      p = Axlsx::Package.new
      wb = p.workbook
      
      # file = CSV.generate do |csv|
      # CSV.open("/datadrive/"+name+".csv", "wb") do |csv|  
          # csv << head
#           
          # array.each do |csv_data|
              # csv_data.each_with_index do |csv_data_d, index|
                  # if index.to_i == 1 || index.to_i == 4 
                        # csv_data_d = "\xEF\xBB\xBF"+csv_data_d.to_s                          
                  # end
              # end
#                
              # csv << csv_data
          # end                
      # end
      
      # @logger.info "send csv"
      
      wb.add_worksheet(:name => "Basic Worksheet") do |sheet|
          
          sheet.add_row head
          
          array.each_with_index do |csv, csv_index|
              sheet.add_row csv
          end
      end
      
      # @logger.info "done create excel"
      
      create_excel_path = '/home/bmg/worker/public/advancedsearch/download/'+name+'.xlsx'
      dl_excel_path = 'http://china.adeqo.com:'+@port.to_s+'/advancedsearch/download/'+name+'.xlsx'
      
      p.serialize(create_excel_path)
      
      @logger.info dl_excel_path
                  
      # begin      
          mg_client = Mailgun::Client.new("key-c72a65e7d3d818852d40757182bd82c9")  
          mb_obj = Mailgun::MessageBuilder.new()
    
          # Define the from address
          mb_obj.set_from_address("do-not-reply@adeqo.com", {"first"=>"Adeqo", "last" => ""});  
          # Define a to recipient
          mb_obj.add_recipient(:to, email, {"first" => "", "last" => ""});  
          
          mb_obj.add_recipient(:cc, "jkwan@bmgww.com", {"first" => "", "last" => ""});
          mb_obj.add_recipient(:cc, "xfung@bmgww.com", {"first" => "", "last" => ""});
          # Define a cc recipient
          # mb_obj.add_recipient(:cc, "sally.doe@example.com", {"first" => "Sally", "last" => "Doe"});  
          # Define the subject
          mb_obj.set_subject("Adeqo | Advance Search Report "+ name);  
          # Define the body of the message
          # mb_obj.set_text_body("Please See Attachment");
          
          # result_msg = "<p>For the results of your search, please see the file attached</p>"
          result_msg = "<p>For the results of your search, please download <a target='_blank' href='"+dl_excel_path+"'>here.</a></p>"
          result_msg = result_msg + "<p>To view further details visit:</p>"
          result_msg = result_msg + "<p><a href='http://china.adeqo.com/advancedsearchistory'>http://china.adeqo.com/advancedsearchistory</a></p>"
          result_msg = result_msg + "<p>or to run another search, go to</p>"
          result_msg = result_msg + "<p><a href='http://china.adeqo.com/advancedsearch'>http://china.adeqo.com/advancedsearch</a></p>"
          result_msg = result_msg + "<p>Team Adeqo</p>"
          
          @db_msg = "<p>For the results of your search, please download <a target='_blank' href='"+dl_excel_path+"'>here.</a></p>"
          
          mb_obj.set_html_body(result_msg);
          # Campaign and other headers
          # mb_obj.add_campaign_id("My-Awesome-Campaign");  
          # mb_obj.add_custom_parameter("h:Customer-Id", "12345");
          
          # Attach a file and rename it
          # mb_obj.add_attachment("/datadrive/"+name+".csv");
          # Schedule message in the future
          # mb_obj.set_delivery_time("tomorrow 8:00AM", "PST");
          # Finally, send your message using the client
          mg_client.send_message("china.adeqo.com", mb_obj)
          # @logger.info "send csv done"
      # rescue Exception
          # @logger.info "send csv fail"
      # end
      
      # File.delete("/datadrive/"+name+".csv")
      
        
  end
  
  
  def filter_object_campaign(filter, data_array)
    
          filter.each do |filter_object|
            
              if filter_object[1]['name'].downcase.to_s == "status"
                  data_array = data_array.select { |u| u[1] == filter_object[1]['value']}
                  
              elsif filter_object[1]['name'].downcase.to_s == "campaign_name"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[2].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[2].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[2] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[2].slice(0, compare_char) == filter_object[1]['value']}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "account_name"
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[6].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[6].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[6] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[6].slice(0, compare_char) == filter_object[1]['value']}
                  end
                
              
              elsif filter_object[1]['name'].downcase.to_s == "currency"  
                  data_array = data_array.select { |u| u[7].downcase == filter_object[1]['value'].downcase}
                  
              elsif filter_object[1]['name'].downcase.to_s == "impr"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[8].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[8].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[8].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[8].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[8].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[8].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "clicks"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[9].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[9].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[9].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[9].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[9].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[9].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "cost"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[10].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[10].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[10].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[10].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[10].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[10].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "avg_cpc"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[11].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[11].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[11].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[11].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[11].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[11].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "ctr"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[12].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[12].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[12].to_f <= filter_object[1]['value'].strip.to_f}  
                  end    
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[12].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[12].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[12].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                      
              elsif filter_object[1]['name'].downcase.to_s == "conv"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[13].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[13].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[13].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[13].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[13].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[13].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "conv_rate"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[14].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[14].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[14].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[14].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[14].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[14].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "cpa"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[15].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[15].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[15].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[15].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[15].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[15].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "revenue"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[16].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[16].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[16].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[16].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[16].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[16].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "profit"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[17].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[17].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[17].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[17].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[17].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[17].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "avg_pos"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[18].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[18].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[18].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[18].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[18].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[18].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "rpa"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[19].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[19].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[19].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[19].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[19].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[19].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "roas"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[20].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[20].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[20].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[20].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[20].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[20].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "roi"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[21].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[21].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[21].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[21].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[21].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[21].to_f != filter_object[1]['value'].strip.to_f}  
                  end    
              end              
          end
          
          return data_array
  end
  
  
  def filter_object_adgroup(filter, data_array)
          filter.each do |filter_object|
            
              if filter_object[1]['name'].downcase.to_s == "status"
                  data_array = data_array.select { |u| u[1] == filter_object[1]['value']}
                  
              elsif filter_object[1]['name'].downcase.to_s == "adgroup_name"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[2].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[2].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[2] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[2].slice(0, compare_char) == filter_object[1]['value']}
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "max_cpc"
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[8].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[8].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[8].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[8].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[8].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[8].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "impr"
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[9].to_i >= filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[9].to_i == filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[9].to_i <= filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[9].to_i < filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[9].to_i > filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[9].to_i != filter_object[1]['value'].strip.to_i}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "clicks"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[10].to_i >= filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[10].to_i == filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[10].to_i <= filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[10].to_i < filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[10].to_i > filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[10].to_i != filter_object[1]['value'].strip.to_i}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "ctr"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[11].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[11].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[11].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[11].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[11].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[11].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "cost"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[12].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[12].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[12].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[12].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[12].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[12].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "avg_cpc"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[13].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[13].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[13].to_f <= filter_object[1]['value'].strip.to_f}  
                  end    
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[13].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[13].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[13].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                     
              elsif filter_object[1]['name'].downcase.to_s == "conv"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[14].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[14].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[14].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[14].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[14].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[14].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "conv_rate"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[15].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[15].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[15].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[15].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[15].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[15].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "cpa"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[16].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[16].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[16].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[16].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[16].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[16].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "revenue"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[17].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[17].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[17].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[17].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[17].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[17].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "avg_pos"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[18].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[18].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[18].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[18].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[18].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[18].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "rpa"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[19].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[19].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[19].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[19].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[19].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[19].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "roas"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[20].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[20].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[20].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[20].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[20].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[20].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "roi"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[21].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[21].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[21].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[21].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[21].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[21].to_f != filter_object[1]['value'].strip.to_f}  
                  end 
              end              
          end
          
          return data_array
  end
  
  
  
  
  
  
  
  def filter_object_ad(filter, data_array)
          filter.each do |filter_object|
            
              if filter_object[1]['name'].downcase.to_s == "status"
                  data_array = data_array.select { |u| u[1] == filter_object[1]['value']}
                  
              elsif filter_object[1]['name'].downcase.to_s == "adgroup_name"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[2].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[2].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[2] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[2].slice(0, compare_char) == filter_object[1]['value']}
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "headline"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[9].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[9].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[9] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[9].slice(0, compare_char) == filter_object[1]['value']}
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "desc_1"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[10].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[10].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[10] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[10].slice(0, compare_char) == filter_object[1]['value']}
                  end        
              
              elsif filter_object[1]['name'].downcase.to_s == "desc_2"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[11].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[11].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[11] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[11].slice(0, compare_char) == filter_object[1]['value']}
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "display_url"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[12].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[12].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[12] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[12].slice(0, compare_char) == filter_object[1]['value']}
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "final_url"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[13].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[13].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[13] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[13].slice(0, compare_char) == filter_object[1]['value']}
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "m_display_url"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[14].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[14].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[14] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[14].slice(0, compare_char) == filter_object[1]['value']}
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "m_final_url"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[15].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[15].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[15] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[15].slice(0, compare_char) == filter_object[1]['value']}
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "ad_type_bak"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[10].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[10].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[10] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[10].slice(0, compare_char) == filter_object[1]['value']}
                  end
              
                                 
              elsif filter_object[1]['name'].downcase.to_s == "avg_cpc"
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[16].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[16].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[16].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[16].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[16].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[16].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "impr"
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[17].to_i >= filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[17].to_i == filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[17].to_i <= filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[17].to_i < filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[17].to_i > filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[17].to_i != filter_object[1]['value'].strip.to_i}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "clicks"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[18].to_i >= filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[18].to_i == filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[18].to_i <= filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[18].to_i < filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[18].to_i > filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[18].to_i != filter_object[1]['value'].strip.to_i}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "ctr"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[19].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[19].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[19].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[19].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[19].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[19].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "cost"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[20].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[20].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[20].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[20].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[20].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[20].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "conv"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[21].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[21].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[21].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[21].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[21].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[21].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                      
              elsif filter_object[1]['name'].downcase.to_s == "conv_rate"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[22].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[22].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[22].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[22].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[22].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[22].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "cpa"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[23].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[23].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[23].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[23].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[23].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[23].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
                  
              elsif filter_object[1]['name'].downcase.to_s == "revenue"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[24].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[24].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[24].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[24].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[24].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[24].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "avg_pos"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[25].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[25].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[25].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[25].to_f < filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[25].to_f > filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[25].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                   
              end              
          end
          
          return data_array
  end
  
  
  
  
  def filter_object_keyword(filter, data_array)
          filter.each do |filter_object|
            
              if filter_object[1]['name'].downcase.to_s == "status"
                  data_array = data_array.select { |u| u[1] == filter_object[1]['value']}
                  
              elsif filter_object[1]['name'].downcase.to_s == "adgroup_name"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[2].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[2].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[2] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[2].slice(0, compare_char) == filter_object[1]['value']}
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "final_url"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[11].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[11].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[11] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[11].slice(0, compare_char) == filter_object[1]['value']}
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "m_final_url"
                
                  if filter_object[1]['rule'].to_s == "**"
                      data_array = data_array.select { |u| u[12].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "!**"
                      data_array = data_array.select { |u| !u[12].include?(filter_object[1]['value'])}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[12] == filter_object[1]['value']}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "*="
                      compare_char = filter_object[1]['value'].length
                      data_array = data_array.select { |u| u[12].slice(0, compare_char) == filter_object[1]['value']}
                  end
                      
                  
                                  
              elsif filter_object[1]['name'].downcase.to_s == "max_cpc"
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[13].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[13].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[13].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[13].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[13].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[13].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "avg_cpc"
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[14].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[14].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[14].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[14].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[14].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[14].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "impr"
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[16].to_i >= filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[16].to_i == filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[16].to_i <= filter_object[1]['value'].strip.to_i}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[16].to_i < filter_object[1]['value'].strip.to_i}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[16].to_i > filter_object[1]['value'].strip.to_i}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[16].to_i != filter_object[1]['value'].strip.to_i}  
                  end
                      
              elsif filter_object[1]['name'].downcase.to_s == "clicks"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[17].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[17].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[17].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[17].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[17].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[17].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "ctr"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[18].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[18].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[18].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[18].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[18].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[18].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "cost"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[19].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[19].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[19].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[19].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[19].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[19].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "conv"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[20].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[20].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[20].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[20].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[20].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[20].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "conv_rate"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[21].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[21].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[21].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[21].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[21].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[21].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "cpa"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[22].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[22].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[22].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[22].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[22].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[22].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "cpm"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[23].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[23].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[23].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[23].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[23].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[23].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "revenue"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[24].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[24].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[24].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[24].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[24].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[24].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "profit"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[25].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[25].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[25].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[25].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[25].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[25].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "avg_pos"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[26].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[26].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[26].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[26].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[26].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[26].to_f != filter_object[1]['value'].strip.to_f}  
                  end
                  
              elsif filter_object[1]['name'].downcase.to_s == "rpa"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[27].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[27].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[27].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[27].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[27].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[27].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "roas"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[28].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[28].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[28].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[28].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[28].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[28].to_f != filter_object[1]['value'].strip.to_f}  
                  end
              
              elsif filter_object[1]['name'].downcase.to_s == "roi"  
                  
                  if filter_object[1]['rule'].to_s == ">="
                      data_array = data_array.select { |u| u[29].to_f >= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "="
                      data_array = data_array.select { |u| u[29].to_f == filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<="
                      data_array = data_array.select { |u| u[29].to_f <= filter_object[1]['value'].strip.to_f}  
                  end
                  
                  if filter_object[1]['rule'].to_s == "<"
                      data_array = data_array.select { |u| u[29].to_f < filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == ">"
                      data_array = data_array.select { |u| u[29].to_f > filter_object[1]['value'].strip.to_f}  
                  end

                  if filter_object[1]['rule'].to_s == "!="
                      data_array = data_array.select { |u| u[29].to_f != filter_object[1]['value'].strip.to_f}  
                  end     
              end              
          end
          
          return data_array
  end
  
  
  
  
end
 